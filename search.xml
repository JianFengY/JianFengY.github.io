<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Python库Numpy使用入门]]></title>
      <url>/Python/Python%E5%BA%93Numpy%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>本篇是慕课网<a href="https://www.imooc.com/learn/943" target="_blank" rel="noopener">Python人工智能常用库Numpy使用入门</a>整理的学习笔记</p>
<h3 id="Anaconda介绍与安装"><a href="#Anaconda介绍与安装" class="headerlink" title="Anaconda介绍与安装"></a>Anaconda介绍与安装</h3><p>anaconda是一个开源的用于科学计算的Python发行版本，是一个包管理器、环境管理器，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。它里面预装好了conda、某个版本的python、众多packages、科学计算工具等等。</p>
<p><a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">访问官网</a>下载安装包直接安装，安装时把<code>Add Anaconda to my PATH environment variable</code>也勾上了。</p>
<h3 id="jupyter-notebook简单教程"><a href="#jupyter-notebook简单教程" class="headerlink" title="jupyter notebook简单教程"></a>jupyter notebook简单教程</h3><p>安装好anaconda之后点击<strong>开始</strong>，找到Anaconda文件夹，点击Jupyter Notebook就可以打开，这样打开的话可以看到命令行里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[I 23:31:32.533 NotebookApp] Writing notebook server cookie secret to C:\Users\ASUS\AppData\Roaming\jupyter\runtime\notebook_cookie_secret</span><br><span class="line">[I 23:31:34.383 NotebookApp] JupyterLab beta preview extension loaded from D:\ProgramFiles\Anaconda3\lib\site-packages\jupyterlab</span><br><span class="line">[I 23:31:34.383 NotebookApp] JupyterLab application directory is D:\ProgramFiles\Anaconda3\share\jupyter\lab</span><br><span class="line">[I 23:31:34.555 NotebookApp] Serving notebooks from local directory: C:\Users\ASUS</span><br></pre></td></tr></table></figure></p>
<p>创建的文件都是放在<code>C:\Users\ASUS</code>目录里的。</p>
<p>要自行选择文件夹保存，可以cmd命令行切换到你要保存的目录下，运行<code>jupyter notebook</code>。</p>
<p>这里需要<strong>注意</strong>：如果前面安装时没有勾选<code>Add Anaconda to my PATH environment variable</code>就不能直接使用命令行的方式打开。</p>
<p>在打开的Jupyter noteb里点击右上角的New，选择Python3就可以新建一个notebook。点击<code>Untitled</code>可以给文件命名，然后可以看到文件夹里的文件了</p>
<p><img src="http://p3vld0dkf.bkt.clouddn.com/jupyter%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B.png" alt="jupyter notebook"></p>
<p>可以点击选择编写代码还是markdown笔记，旁边还有一些快捷按钮。前面几个按顺序分别是：保存、新增一行输入框、删除选中行、复制、粘贴、上移、下移。此外，最后一个键盘样的按钮可以查看快捷键。</p>
<p>编写好代码或者markdown都可以使用<code>alt + enter</code>快捷键查看输出。</p>
<h3 id="Numpy简单教程-数组"><a href="#Numpy简单教程-数组" class="headerlink" title="Numpy简单教程 - 数组"></a>Numpy简单教程 - 数组</h3><p>以下内容导出自jupyter notebook，<a href="/numpy.html">点击这里</a>可以看得比较清晰。</p>
<p>数组Array（rank （数组的维数））：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([1, 2, 3])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(a)</span><br></pre></td></tr></table></figure>
<pre><code>numpy.ndarray
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.shape  <span class="comment"># 数组的大小</span></span><br></pre></td></tr></table></figure>
<pre><code>(3,)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a.reshape((<span class="number">1</span>, <span class="number">-1</span>))  <span class="comment"># 1表示数组是1行，-1是占位符，其实代表的是3列</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.shape</span><br></pre></td></tr></table></figure>
<pre><code>(1, 3)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.shape</span><br></pre></td></tr></table></figure>
<pre><code>(6,)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a.reshape((<span class="number">2</span>, <span class="number">-1</span>))  <span class="comment"># 这里的2代表2行，-1代表3列，因为6个元素变成2行</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.shape</span><br></pre></td></tr></table></figure>
<pre><code>(2, 3)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 2, 3],
       [4, 5, 6]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a.reshape((<span class="number">-1</span>, <span class="number">2</span>))  <span class="comment"># -1只是占位符，可以放在任意位置，这里-1表示3行</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 2],
       [3, 4],
       [5, 6]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<pre><code>5
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>, <span class="number">0</span>] = <span class="number">55</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 1,  2],
       [ 3,  4],
       [55,  6]])
</code></pre><p><strong>zeros()可以用于创建元素全为0的数组</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.zeros((<span class="number">3</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[0., 0.],
       [0., 0.],
       [0., 0.]])
</code></pre><p><strong>ones()可以用于创建元素全为1的数组</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.ones((<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[1., 1., 1.],
       [1., 1., 1.]])
</code></pre><p><strong>full()可以用于创建元素全为指定值的数组</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.full((<span class="number">2</span>, <span class="number">3</span>), <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[3, 3, 3],
       [3, 3, 3]])
</code></pre><p><strong>eye()可以用于创建指定维度的单位矩阵</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.eye(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[1., 0., 0.],
       [0., 1., 0.],
       [0., 0., 1.]])
</code></pre><p><strong>random.random()可以用于创建元素值都是0-1之间的随机数组</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.random((<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[0.07850067, 0.26126437, 0.27118259, 0.99299099],
       [0.74982937, 0.3804697 , 0.14492257, 0.42120364],
       [0.34282385, 0.69722592, 0.06523827, 0.16707083]])
</code></pre><h3 id="Numpy简单教程-索引操作"><a href="#Numpy简单教程-索引操作" class="headerlink" title="Numpy简单教程 - 索引操作"></a>Numpy简单教程 - 索引操作</h3><p>indexing索引操作:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">            [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">            [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">-2</span>:, <span class="number">1</span>:<span class="number">3</span>]  <span class="comment"># -2:表示倒数第二行到最后一行，1:3表示第二列到第三列，索引从0开始</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[ 6,  7],
       [10, 11]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">1</span>, <span class="number">-2</span>]  <span class="comment"># 第二行，倒数第二列</span></span><br></pre></td></tr></table></figure>
<pre><code>7
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.shape</span><br></pre></td></tr></table></figure>
<pre><code>(3, 4)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = a[<span class="number">-2</span>:, <span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.shape  <span class="comment"># 维度变低了</span></span><br></pre></td></tr></table></figure>
<pre><code>(2, 2)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = a[<span class="number">2</span>, <span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure>
<pre><code>array([10, 11])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.shape</span><br></pre></td></tr></table></figure>
<pre><code>(2,)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = a[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure>
<pre><code>7
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.shape</span><br></pre></td></tr></table></figure>
<pre><code>()
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[np.arange(<span class="number">3</span>), <span class="number">1</span>] += <span class="number">10</span>  <span class="comment"># 第二列所有元素加10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 1, 12,  3,  4],
       [ 5, 16,  7,  8],
       [ 9, 20, 11, 12]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<pre><code>array([0, 1, 2])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">3</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure>
<pre><code>array([3, 4, 5, 6])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 1, 22,  3,  4],
       [ 5, 26,  7,  8],
       [ 9, 30, 11, 12]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[np.arange(<span class="number">3</span>), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]] += <span class="number">10</span>  <span class="comment"># 各行的第二三四列分别加10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 1, 32,  3,  4],
       [ 5, 26, 17,  8],
       [ 9, 30, 11, 22]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]] += <span class="number">10</span>  <span class="comment"># 第二列所有元素加10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 1, 42,  3,  4],
       [ 5, 36, 17,  8],
       [ 9, 40, 11, 22]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result_index = a&gt;<span class="number">10</span>  <span class="comment"># 找出元素值大于10的索引</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result_index</span><br></pre></td></tr></table></figure>
<pre><code>array([[False,  True, False, False],
       [False,  True,  True, False],
       [False,  True,  True,  True]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[result_index]  <span class="comment"># 找出值大于10的元素</span></span><br></pre></td></tr></table></figure>
<pre><code>array([42, 36, 17, 40, 11, 22])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[a&gt;<span class="number">10</span>]  <span class="comment"># 找出值大于10的元素</span></span><br></pre></td></tr></table></figure>
<pre><code>array([42, 36, 17, 40, 11, 22])
</code></pre><h3 id="Numpy简单教程-元素数据类型"><a href="#Numpy简单教程-元素数据类型" class="headerlink" title="Numpy简单教程 - 元素数据类型"></a>Numpy简单教程 - 元素数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>])  <span class="comment"># numpy会自动判断元素的数据类型</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.dtype</span><br></pre></td></tr></table></figure>
<pre><code>dtype(&apos;int32&apos;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1.1</span>, <span class="number">2.2</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.dtype</span><br></pre></td></tr></table></figure>
<pre><code>dtype(&apos;float64&apos;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2.2</span>])  <span class="comment"># 如果既有整数又有浮点数会当成浮点数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.dtype</span><br></pre></td></tr></table></figure>
<pre><code>dtype(&apos;float64&apos;)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1.6</span>, <span class="number">2.2</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1.6</span>, <span class="number">2.2</span>], dtype=np.int64)  <span class="comment"># 手动指定成int类型</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a  <span class="comment"># 去除小数部分，不是四舍五入！</span></span><br></pre></td></tr></table></figure>
<pre><code>array([1, 2], dtype=int64)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1.6</span>, <span class="number">2.2</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = np.array(a, dtype=np.int64)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure>
<pre><code>array([1, 2], dtype=int64)
</code></pre><h3 id="Numpy简单教程-数组运算与常用函数"><a href="#Numpy简单教程-数组运算与常用函数" class="headerlink" title="Numpy简单教程 - 数组运算与常用函数"></a>Numpy简单教程 - 数组运算与常用函数</h3><h4 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">            [<span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = np.array([[<span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">            [<span class="number">6</span>, <span class="number">5</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a+b  <span class="comment"># 对应位置的元素相加</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[6, 8],
       [9, 9]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.add(a,b)  <span class="comment"># 和a+b相同</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[6, 8],
       [9, 9]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a-b  <span class="comment"># 对应位置元素相减</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[-4, -4],
       [-3, -1]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.subtract(a, b)  <span class="comment"># 和a-b相同</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[-4, -4],
       [-3, -1]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a*b  <span class="comment"># 对应位置的元素相乘，并不是矩阵的乘法</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[ 5, 12],
       [18, 20]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.multiply(a, b)  <span class="comment"># 和a*b相同</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[ 5, 12],
       [18, 20]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a/b  <span class="comment"># 对应位置的元素相除</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[0.2       , 0.33333333],
       [0.5       , 0.8       ]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.divide(a, b)   <span class="comment"># 和a/b相同</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[0.2       , 0.33333333],
       [0.5       , 0.8       ]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sqrt(a)  <span class="comment"># a的每个元素开方</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[1.        , 1.41421356],
       [1.73205081, 2.        ]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 2],
       [3, 4]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">             [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.dot(b)  <span class="comment"># 矩阵乘法，a的列数要等于b的行数</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[ 9, 12, 15],
       [19, 26, 33]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dot(a, b)  <span class="comment"># 矩阵乘法</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[ 9, 12, 15],
       [19, 26, 33]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dot(b, a)  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure>
<pre><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-97-f65bf4b3a481&gt; in &lt;module&gt;()
----&gt; 1 np.dot(b, a)  # 报错


ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)
</code></pre><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p><strong>sum</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 2],
       [3, 4]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(a)  <span class="comment"># 对数组的所有元素求和</span></span><br></pre></td></tr></table></figure>
<pre><code>10
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(a, axis=<span class="number">0</span>)  <span class="comment"># 对数组的每一列元素求和</span></span><br></pre></td></tr></table></figure>
<pre><code>array([4, 6])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(a, axis=<span class="number">1</span>)  <span class="comment"># 对数组的每一行元素求和</span></span><br></pre></td></tr></table></figure>
<pre><code>array([3, 7])
</code></pre><p><strong>mean</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(a)  <span class="comment"># 求a中元素的平均值</span></span><br></pre></td></tr></table></figure>
<pre><code>2.5
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(a, axis=<span class="number">0</span>)  <span class="comment"># 求a中每一列元素的平均值， axis=0是对列进行操作</span></span><br></pre></td></tr></table></figure>
<pre><code>array([2., 3.])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(a, axis=<span class="number">1</span>)  <span class="comment"># 求a中每一行元素的平均值， axis=1是对行进行操作</span></span><br></pre></td></tr></table></figure>
<pre><code>array([1.5, 3.5])
</code></pre><p><strong>uniform</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.uniform(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 产生指定范围内的随机小数</span></span><br></pre></td></tr></table></figure>
<pre><code>3.079329791701754
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.uniform(<span class="number">1</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<pre><code>34.39661009456285
</code></pre><p><strong>tile</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 2],
       [3, 4]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.tile(a, (<span class="number">1</span>, <span class="number">2</span>))  <span class="comment"># 将a当成一个元素生成一行两列的数组</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 2, 1, 2],
       [3, 4, 3, 4]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.tile(a, (<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 两行三列的a数组</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 2, 1, 2, 1, 2],
       [3, 4, 3, 4, 3, 4],
       [1, 2, 1, 2, 1, 2],
       [3, 4, 3, 4, 3, 4]])
</code></pre><p><strong>argsort</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">11</span>],</span><br><span class="line">             [<span class="number">5</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.argsort()  <span class="comment"># 对每一行元素从小到大排序，返回的是每个元素排序后的下标</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[0, 2, 1, 3],
       [2, 3, 0, 1]], dtype=int32)
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.argsort(axis=<span class="number">0</span>)  <span class="comment"># 对每一列元素从小到大排序</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[0, 0, 1, 1],
       [1, 1, 0, 0]], dtype=int32)
</code></pre><p><strong>矩阵转置</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 3,  6,  4, 11],
       [ 5, 10,  1,  3]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.T  <span class="comment"># 转置</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[ 3,  5],
       [ 6, 10],
       [ 4,  1],
       [11,  3]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.transpose(a)  <span class="comment"># 和a.T相同</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[ 3,  5],
       [ 6, 10],
       [ 4,  1],
       [11,  3]])
</code></pre><h3 id="Numpy简单教程-广播"><a href="#Numpy简单教程-广播" class="headerlink" title="Numpy简单教程 - 广播"></a>Numpy简单教程 - 广播</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">             [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">             [<span class="number">12</span>, <span class="number">31</span>, <span class="number">22</span>],</span><br><span class="line">             [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):  <span class="comment"># 数据量比较大的时候，循环会比较低效，比较慢</span></span><br><span class="line">    a[i,:] += b</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 2,  4,  6],
       [ 3,  5,  7],
       [13, 33, 25],
       [ 3,  4,  5]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a + np.tile(b, (<span class="number">4</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<pre><code>array([[ 3,  6,  9],
       [ 4,  7, 10],
       [14, 35, 28],
       [ 4,  6,  8]])
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a + b  <span class="comment"># 广播，自动将相加的数组转化为相同维度</span></span><br></pre></td></tr></table></figure>
<pre><code>array([[ 3,  6,  9],
       [ 4,  7, 10],
       [14, 35, 28],
       [ 4,  6,  8]])
</code></pre><p>上面的内容都是从jupyter notebook导出的，<a href="/numpy.html">点击这里</a>可以看得比较清晰。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python操作MySql数据库]]></title>
      <url>/Python/Python%E6%93%8D%E4%BD%9CMySql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>本篇是慕课网课程<a href="https://www.imooc.com/learn/475" target="_blank" rel="noopener">Python操作MySql数据库</a>的笔记</p>
<h3 id="Python-DB-API"><a href="#Python-DB-API" class="headerlink" title="Python DB API"></a>Python DB API</h3><p>Python DB API：<a href="https://www.python.org/dev/peps/pep-0249/" target="_blank" rel="noopener">Python访问数据库的统一接口规范</a></p>
<p>包括的内容：</p>
<ul>
<li>数据库连接对象connection</li>
<li>数据库交互对象cursor</li>
<li>数据库异常类exceptions</li>
</ul>
<p>使用Python DB API访问数据库流程：</p>
<p><strong>开始</strong> –&gt; <strong>创建connection</strong> –&gt; <strong>获取cursor</strong> –&gt; <strong>执行查询、执行命令、获取数据、处理数据</strong> –&gt; <strong>关闭cursor</strong> –&gt; <strong>关闭connection</strong> –&gt; <strong>结束</strong></p>
<h3 id="Python-MySQL开发环境"><a href="#Python-MySQL开发环境" class="headerlink" title="Python MySQL开发环境"></a>Python MySQL开发环境</h3><ul>
<li>教程里是Python2.7，而我的是<strong>Python3.6</strong></li>
<li>MySQL，我的是5.7</li>
<li>教程里开发工具是Eclipse+Pydev，我用的是Pycharm</li>
<li><code>PyMySQL</code><strong>（Python2.x里是<code>MySQLdb</code>）</strong>可以通过<code>pip</code>安装：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyMySQL</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>因为Python统一了数据库连接的接口，所以<code>pymysql</code>和<code>MySQLdb</code>的使用方式是类似的</p>
<h3 id="数据库连接对象connection"><a href="#数据库连接对象connection" class="headerlink" title="数据库连接对象connection"></a>数据库连接对象connection</h3><p>连接对象connection：建立Python客户端与数据库的网络连接</p>
<p>创建方法：<code>pymysql.Connect(参数)</code></p>
<table>
<thead>
<tr>
<th style="text-align:center">参数名</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">host</td>
<td style="text-align:center">字符串</td>
<td style="text-align:center">MySQL服务器地址</td>
</tr>
<tr>
<td style="text-align:center">post</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">MySQL服务器端口号</td>
</tr>
<tr>
<td style="text-align:center">user</td>
<td style="text-align:center">字符串</td>
<td style="text-align:center">用户名</td>
</tr>
<tr>
<td style="text-align:center">passwd</td>
<td style="text-align:center">字符串</td>
<td style="text-align:center">密码</td>
</tr>
<tr>
<td style="text-align:center">db</td>
<td style="text-align:center">字符串</td>
<td style="text-align:center">数据库名称</td>
</tr>
<tr>
<td style="text-align:center">charset</td>
<td style="text-align:center">字符串</td>
<td style="text-align:center">连接编码</td>
</tr>
</tbody>
</table>
<p>connection对象支持的方法：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">cursor()</td>
<td style="text-align:center">使用该连接创建并返回游标</td>
</tr>
<tr>
<td style="text-align:center">commit()</td>
<td style="text-align:center">提交当前事务</td>
</tr>
<tr>
<td style="text-align:center">rollback()</td>
<td style="text-align:center">回滚当前事务</td>
</tr>
<tr>
<td style="text-align:center">close()</td>
<td style="text-align:center">关闭连接</td>
</tr>
</tbody>
</table>
<h3 id="数据库的游标对象cursor"><a href="#数据库的游标对象cursor" class="headerlink" title="数据库的游标对象cursor"></a>数据库的游标对象cursor</h3><p>游标对象cursor：用于执行查询和获取结果</p>
<p>cursor对象支持的方法：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">execute(op[,args])</td>
<td style="text-align:center">执行一个数据库查询和命令(CRUD)</td>
</tr>
<tr>
<td style="text-align:center">fetchone()</td>
<td style="text-align:center">取得结果集的下一行</td>
</tr>
<tr>
<td style="text-align:center">fetchmany(size)</td>
<td style="text-align:center">获取结果集的下几行</td>
</tr>
<tr>
<td style="text-align:center">fetchall()</td>
<td style="text-align:center">获取结果集中剩下的所有行（没有被遍历的所有行）</td>
</tr>
<tr>
<td style="text-align:center">rowcount</td>
<td style="text-align:center">最近一次execute返回数据的行数或影响行数<strong>（不是方法）</strong></td>
</tr>
<tr>
<td style="text-align:center">close()</td>
<td style="text-align:center">关闭游标对象</td>
</tr>
</tbody>
</table>
<ul>
<li>execute方法：执行SQL、将结果从数据库获取到客户端</li>
<li>fetch*方法：移动rownumber（它相当于一个指针），返回数据</li>
</ul>
<h3 id="select查询数据"><a href="#select查询数据" class="headerlink" title="select查询数据"></a>select查询数据</h3><p>过程：</p>
<p><strong>开始</strong> –&gt; <strong>创建connection</strong> –&gt; <strong>获取cursor</strong> –&gt; <strong>使用<code>cursor.execute()</code>执行<code>SELECT</code>语句</strong> –&gt; <strong>使用<code>cursor.fetch*()</code>获取并处理数据</strong> –&gt; <strong>关闭cursor</strong> –&gt; <strong>关闭connection</strong> –&gt; <strong>结束</strong></p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.Connect(</span><br><span class="line">    host=&apos;localhost&apos;,</span><br><span class="line">    port=3306,</span><br><span class="line">    user=&apos;root&apos;,</span><br><span class="line">    passwd=&apos;123456&apos;,</span><br><span class="line">    db=&apos;pymysql&apos;,</span><br><span class="line">    charset=&apos;utf8&apos;  # 注意不是utf-8!</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">sql = &quot;SELECT * FROM user&quot;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line">rs = cursor.fetchall()</span><br><span class="line">for row in rs:</span><br><span class="line">    print(&quot;userid = %s, username = %s&quot; % row)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p>
<h3 id="Insert-Update-Delete数据"><a href="#Insert-Update-Delete数据" class="headerlink" title="Insert/Update/Delete数据"></a>Insert/Update/Delete数据</h3><p>过程：</p>
<p><strong>开始</strong> –&gt; <strong>创建connection</strong> –&gt; <strong>获取cursor</strong> –&gt; <strong>使用<code>cursor.execute()</code>执行<code>INSERT/UPDATE/DELETE</code>语句</strong> –&gt; <strong>出现异常？（否：使用<code>conn.commit()</code>提交事务/是：使用<code>conn.rollback()</code>回滚事务）</strong> –&gt; <strong>关闭cursor</strong> –&gt; <strong>关闭connection</strong> –&gt; <strong>结束</strong></p>
<p>这里就要使用<code>try...except...</code>语句判断是否出现异常</p>
<p>事务：访问和更新数据库的一个程序执行单元</p>
<ul>
<li>原子性：事务中包括的诸操作要么都做，要么都不做</li>
<li>一致性：事务必须使数据库从一致性状态变到另一个一致性状态</li>
<li>隔离性：一个事务的执行不能被其他事务干扰</li>
<li>持久性：食物一旦提交，它对数据库的改变就是永久性的</li>
</ul>
<p><strong>注意：MySQL引擎不能设置为<code>MyISAM</code>，因为它不支持事务</strong></p>
<p>开发中怎样使用事务？</p>
<ul>
<li>关闭自动commit：设置<code>conn.autocommit(FALSE)</code></li>
<li>正常结束事务：<code>conn.commit()</code></li>
<li>异常结束事务：<code>conn.rollback()</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sql_insert = &quot;INSERT INTO user (userid, username) VALUES (10, &apos;name10&apos;)&quot;</span><br><span class="line">sql_update = &quot;UPDATE user SET username=&apos;name99&apos; WHERE userid=9&quot;</span><br><span class="line">sql_delete = &quot;DELETE FROM user WHERE userid&lt;3&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql_insert)</span><br><span class="line">    print(cursor.rowcount)</span><br><span class="line">    cursor.execute(sql_update)</span><br><span class="line">    print(cursor.rowcount)</span><br><span class="line">    cursor.execute(sql_delete)</span><br><span class="line">    print(cursor.rowcount)</span><br><span class="line"></span><br><span class="line">    conn.commit()  # 上面三条语句就是一个事务，成功执行就可以commit</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)</span><br><span class="line">    conn.rollback()  # 出现异常就rollback回滚</span><br></pre></td></tr></table></figure>
<h3 id="银行转账实例（账户A给账户B转账100元）"><a href="#银行转账实例（账户A给账户B转账100元）" class="headerlink" title="银行转账实例（账户A给账户B转账100元）"></a>银行转账实例（账户A给账户B转账100元）</h3><p>过程：</p>
<p><strong>开始事务</strong> –&gt; <strong>检查账户A和账户B是否可用</strong> –&gt; <strong>检查账户A是否有100元</strong> –&gt; <strong>账户A减去100元，账户B加上100元</strong> –&gt; <strong>出现异常则回滚事务，否则提交事务</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TransferMoney():</span><br><span class="line">    def __init__(self, conn):</span><br><span class="line">        self.conn = conn</span><br><span class="line"></span><br><span class="line">    def transfer(self, source_acctid, target_acctid, money):</span><br><span class="line">        try:</span><br><span class="line">            self.check_acct_available(source_acctid)</span><br><span class="line">            self.check_acct_available(target_acctid)</span><br><span class="line">            self.has_enough_money(source_acctid, money)</span><br><span class="line">            self.reduce_money(source_acctid, money)</span><br><span class="line">            self.add_money(target_acctid, money)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as e:</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            raise e</span><br><span class="line"></span><br><span class="line">    def check_acct_available(self, acctid):</span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        try:</span><br><span class="line">            sql = &quot;SELECT * FROM account WHERE acctid=%s&quot; % acctid</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            print(&quot;check_acct_available: &quot; + sql)</span><br><span class="line">            rs = cursor.fetchall()</span><br><span class="line">            if len(rs) != 1:</span><br><span class="line">                raise Exception(&quot;账号%s不存在&quot; % acctid)</span><br><span class="line">        finally:</span><br><span class="line">            cursor.close()</span><br><span class="line"></span><br><span class="line">    def has_enough_money(self, acctid, money):</span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        try:</span><br><span class="line">            sql = &quot;SELECT * FROM account WHERE acctid=%s AND money&gt;%s&quot; % (acctid, money)</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            print(&quot;has_enough_money: &quot; + sql)</span><br><span class="line">            rs = cursor.fetchall()</span><br><span class="line">            if len(rs) != 1:</span><br><span class="line">                raise Exception(&quot;账号%s没有足够的金额&quot; % acctid)</span><br><span class="line">        finally:</span><br><span class="line">            cursor.close()</span><br><span class="line"></span><br><span class="line">    def reduce_money(self, acctid, money):</span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        try:</span><br><span class="line">            sql = &quot;UPDATE account SET money=money-%s WHERE acctid=%s&quot; % (money, acctid)</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            print(&quot;reduce_money: &quot; + sql)</span><br><span class="line">            rs = cursor.fetchall()</span><br><span class="line">            if cursor.rowcount != 1:  # SQL语句影响的行数不是1</span><br><span class="line">                raise Exception(&quot;账号%s减款失败&quot; % acctid)</span><br><span class="line">        finally:</span><br><span class="line">            cursor.close()</span><br><span class="line"></span><br><span class="line">    def add_money(self, acctid, money):</span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        try:</span><br><span class="line">            sql = &quot;UPDATE account SET money=money+%s WHERE acctid=%s&quot; % (money, acctid)</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            print(&quot;add_money: &quot; + sql)</span><br><span class="line">            rs = cursor.fetchall()</span><br><span class="line">            if cursor.rowcount != 1:  # SQL语句影响的行数不是1</span><br><span class="line">                raise Exception(&quot;账号%s加款失败&quot; % acctid)</span><br><span class="line">        finally:</span><br><span class="line">            cursor.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    source_acctid = sys.argv[1]  # 这些参数在run configuration里找到parameters设置</span><br><span class="line">    target_acctid = sys.argv[2]</span><br><span class="line">    money = sys.argv[3]</span><br><span class="line"></span><br><span class="line">    conn = pymysql.Connect(</span><br><span class="line">        host=&apos;localhost&apos;,</span><br><span class="line">        port=3306,</span><br><span class="line">        user=&apos;root&apos;,</span><br><span class="line">        passwd=&apos;123456&apos;,</span><br><span class="line">        db=&apos;pymysql&apos;,</span><br><span class="line">        charset=&apos;utf8&apos;  # 注意不是utf-8!</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    tr_money = TransferMoney(conn)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        tr_money.transfer(source_acctid, target_acctid, money)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;出现异常：&quot; + str(e))</span><br><span class="line">    finally:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> MySql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python基础语法篇（1）]]></title>
      <url>/Python/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%AF%87%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Python是吉多·范罗苏姆在1989年的圣诞节创立的。经过二十多年的完善，已经成为了一个优秀并广泛使用的语言。</p>
<p>Python可以应用于数据分析、组件集成、网络服务、图像处理、数值计算和科学计算等众多领域。</p>
<p>诸如Youtube、Dropbox、Quora、豆瓣、知乎、Google、Yahoo!、Facebook、百度、腾讯等公司都有使用Python。</p>
<h3 id="编译型-amp-解释型"><a href="#编译型-amp-解释型" class="headerlink" title="编译型&amp;解释型"></a>编译型&amp;解释型</h3><p>Python是<strong>解释型语言</strong>，程序不需要编译，在运行程序的时候才翻译成机器语言，每个语句都是执行的时候才翻译。这样解释性语言每执行一次就需要逐行翻译一次，效率比较低。</p>
<p>而<strong>编译型语言</strong>在程序执行之前，有一个单独的编译过程，将程序翻译成机器语言，以后执行这个程序的时候，就不用再进行翻译了。典型的有C、C++。</p>
<p><strong>编译型语言</strong>就相当于做好一桌子菜再开吃，而<strong>编译型语言</strong>就相当于吃火锅…</p>
<p>我们还能从Python项目里看到<code>__pycache__</code>文件夹和里面的<code>.pyc</code>文件。在文档里是这么说的：</p>
<blockquote>
<p>To speed up loading modules, Python caches the compiled version of each module in the <strong>pycache</strong> directory under the name module.version.pyc, where the version encodes the format of the compiled file; it generally contains the Python version number.</p>
</blockquote>
<p>也就是说<code>import</code>别的<code>.py</code>文件时，那个<code>.py</code>文件会被存一份<code>.pyc</code>提升下次加载的速度。<strong>注意并不是运行的速度。</strong> 例如：</p>
<p>新建文件<code>a.py</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Greet():</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    def greet(self):</span><br><span class="line">        print(&quot;Hello, &quot; + self.name + &quot;!&quot;)</span><br></pre></td></tr></table></figure></p>
<p>新建文件<code>b.py</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from a import Greet</span><br><span class="line"></span><br><span class="line">A = Greet(&quot;Jack&quot;)</span><br><span class="line">A.greet()</span><br></pre></td></tr></table></figure></p>
<p>这时候，命令行运行<code>&gt;python b.py</code>，当前目录下就会生成一个<code>__pycache__</code>目录，里面有文件<code>a.cpython-36.pyc</code></p>
<h3 id="静态语言-amp-动态语言"><a href="#静态语言-amp-动态语言" class="headerlink" title="静态语言&amp;动态语言"></a>静态语言&amp;动态语言</h3><p>Python是一门<strong>动态语言</strong>，动态类型语言是在运行期间才去做数据类型检查的语言，也就是说，在用动态类型的语言编程时，不用给变量指定数据类型。此外，Ruby、JavaScript也是动态语言。</p>
<p><strong>静态语言</strong>则是在编译期间做类型判断，如C、C++等。</p>
<h3 id="强类型定义语言-amp-弱类型定义语言"><a href="#强类型定义语言-amp-弱类型定义语言" class="headerlink" title="强类型定义语言&amp;弱类型定义语言"></a>强类型定义语言&amp;弱类型定义语言</h3><p><strong>强类型定义语言</strong>：强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。</p>
<p><strong>弱类型定义语言</strong>：数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。</p>
<p>Python是动态语言，也是强类型定义语言（类型安全的语言）；VBScript是动态语言，是弱类型定义语言（类型不安全的语言）；JAVA是静态语言，是强类型定义语言（类型安全的语言）。</p>
<h3 id="Python2-x-amp-Python3-x"><a href="#Python2-x-amp-Python3-x" class="headerlink" title="Python2.x&amp;Python3.x"></a>Python2.x&amp;Python3.x</h3><p>官方有一句话：</p>
<blockquote>
<p>In summary : Python 2.x is legacy, Python 3.x is the present and future of the language</p>
</blockquote>
<p>2和3详细的区别这里就不说了，最大的改动就是Python3.x里所有文本字符串默认为Unicode编码，意味着可以直接写中文，开头不需要<code># -*- coding:utf-8 -*-</code>了。</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h3><p>Windows下在<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">官网</a>下载安装程序直接安装，安装时勾上<code>Add Python 3.6 to PATH</code>。</p>
<p>安装好后在命令行输入<code>python</code>输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;hello, world&apos;)</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure></p>
<p>Linux下想类似于执行shell脚本一样执行python脚本，例：<code>./hello.py</code>要在第一行加上指定解释器，<code>env</code>指里寻找python环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br></pre></td></tr></table></figure></p>
<p>记得执行前需给予<code>hello.py</code>执行权限，<code>chmod 755 hello.py</code></p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li>变量名只能是 字母、数字或下划线的任意组合</li>
<li>变量名的第一个字符不能是数字</li>
<li>以下<strong>关键字</strong>不能声明为变量名：<br><code>[&#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;exec&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;print&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = &quot;Jack&quot;</span><br><span class="line">name2 = name  # name2不是指向name而是指向name的值&quot;Jack&quot;</span><br><span class="line">print(&quot;My name is &quot;, name)  # My name is  Jack</span><br><span class="line">print(name, name2)  # Jack Jack</span><br><span class="line"></span><br><span class="line">name = &quot;Tom&quot;  # 只有name变了，name2不会变</span><br><span class="line">print(name, name2)  # Tom Jack</span><br></pre></td></tr></table></figure>
<h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p><strong>ASCII</strong>（American Standard Code for Information Interchange，美国标准信息交换代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言，其最多只能用 8 位来表示（一个字节），即：<code>2**8 = 256-1</code>，所以，ASCII码最多只能表示 255 个符号。</p>
<p>为了处理中文，程序员设计了用于简体中文的<strong>GB2312</strong>和用于繁体中文的big5。GB2312(1980年)一共收录了7445个字符，包括6763个汉字和682个其它符号。汉字区的内码范围高字节从B0-F7，低字节从A1-FE，占用的码位是72*94=6768。其中有5个空位是D7FA-D7FE。</p>
<p>1995年的汉字扩展规范<strong>GBK1.0</strong>收录了21886个符号，它分为汉字区和图形符号区。汉字区包括21003个字符。2000年的 <strong>GB18030</strong>是取代GBK1.0的正式国家标准。该标准收录了27484个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。<strong>现在的PC平台必须支持GB18030</strong>，对嵌入式产品暂不作要求。所以手机、MP3一般只支持GB2312。</p>
<p>显然ASCII码无法将世界上的各种文字和符号全部表示，所以，就需要新出一种可以代表所有字符和符号的编码，即：<br><strong>Unicode</strong>（统一码、万国码、单一码）是一种在计算机上使用的字符编码。它为每种语言中的每个字符设定了统一并且唯一的二进制编码，规定虽有的字符和符号<strong>最少</strong>由 16 位来表示（2个字节），即：<code>2 **16 = 65536</code>。</p>
<p><strong>UTF-8</strong>，是对Unicode编码的压缩和优化，他不再使用最少使用2个字节，而是将所有的字符和符号进行分类：<strong>ascii码</strong>中的内容用<strong>1个字节</strong>保存、<strong>欧洲的字符</strong>用<strong>2个字节</strong>保存，<strong>东亚的字符</strong>用<strong>3个字节</strong>保存。</p>
<h3 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># name = raw_input(&quot;What is your name?&quot;) # python 2.x</span><br><span class="line">name = input(&quot;What is your name?&quot;)</span><br><span class="line">print(&quot;Hello &quot; + name )</span><br></pre></td></tr></table></figure>
<ul>
<li>python2中用raw_input()，它接收输入转换成string返回，输入数字也会当成string</li>
<li>python2中input()原理上是raw_input()调用eval()函数，输入字符串要用引号引起</li>
<li>python3中raw_input()和input()进行了整合,仅保留了input()函数，其接收任意输入并返回字符串类型。</li>
<li>eval()：把字符串当成有效的python表达式求值并计算结果</li>
<li>repr()：把变量和表达式转换成字符串表示</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自己写一个Chrome插件]]></title>
      <url>/Chrome/%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AAChrome%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>这篇文章也是之前在公众号上发布过的，现在整理一下发上来，如果这里分析的廖雪峰老师的网站结构有改变，代码可能也要重新分析编写。</p>
<p>另外，很多时候，使用<a href="https://tampermonkey.net/" target="_blank" rel="noopener">Tampermonkey</a>写用户脚本会更加方便，而且也可以使用别的许多大牛写的脚本，也推荐大家使用。我这篇文章只是写一下制作插件的过程。</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前段时间在看廖雪峰老师网站的JavaScript教程时，发现有很多图片广告，看得我很是不舒服。于是决定写一个Chrome插件屏蔽一下。并不是说挂广告有什么不对，只是单纯地想折腾一下……</p>
<p>所以这里就记录下我是怎么做的。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先当然是F12看源码了，我们可以找到图片广告的div。<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%BD%91%E7%AB%99%E5%B7%A6%E4%BE%A7%E5%B9%BF%E5%91%8A.jpg" alt="左侧广告"><br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%BD%91%E7%AB%99%E4%B8%AD%E9%97%B4%E5%B9%BF%E5%91%8A.png" alt="中间广告"><br>可以看到两个div的<code>class</code>都有<code>uk-clearfix</code>,我们用<code>hide()</code>方法就可以这些图片隐藏了。</p>
<h3 id="编写js代码"><a href="#编写js代码" class="headerlink" title="编写js代码"></a>编写js代码</h3><p>以下代码就可以把图片去掉了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.uk-clearfix&apos;).hide();</span><br></pre></td></tr></table></figure></p>
<p>然后我就想了，既然要去广告，那就再去得干净一点吧，左侧还有一个关于作者的廖雪峰老师的微博……<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%BD%91%E7%AB%99%E4%BD%9C%E8%80%85%E6%A0%8F.jpg" alt="微博"></p>
<p>于是找到<code>class</code>为<code>x-sidebar-left-bottom</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.x-sidebar-left-bottom&apos;).hide();</span><br></pre></td></tr></table></figure></p>
<p>还有下面的分享部分，可以看到这些是分开的。<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%BD%91%E7%AB%99%E5%88%86%E4%BA%AB%E5%B9%BF%E5%91%8A.jpg" alt="分享"></p>
<p>这里我是通过找到他们的前一个元素来去定位的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.x-wiki-content&apos;).next().next().andSelf().next().andSelf().next().andSelf().hide();</span><br></pre></td></tr></table></figure></p>
<p>之后评论这一部分：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%BD%91%E7%AB%99%E8%AF%84%E8%AE%BA.jpg" alt="评论"></p>
<p>本来我想直接去除，但是觉得有些评论还是挺有用的，所以就做成了可以通过点击评论让评论列表隐藏或显示，还让鼠标移到“评论”上就变成手指哈哈：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.x-anchor&apos;).next().mousemove(function()&#123;</span><br><span class="line">    $(this).css(&quot;cursor&quot;,&quot;pointer&quot;);</span><br><span class="line">&#125;).on(&apos;click&apos;, function () &#123;</span><br><span class="line">    $(&apos;#x-comment-list&apos;).toggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>还有一个提示登录评论的我就直接去掉了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#x-comment-list&apos;).next().next().andSelf().hide();</span><br></pre></td></tr></table></figure></p>
<h3 id="制作插件"><a href="#制作插件" class="headerlink" title="制作插件"></a>制作插件</h3><p>这里先准备以下文件：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%87%86%E5%A4%87%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6%E6%96%87%E4%BB%B6.png" alt="准备文件"></p>
<p>icon就是安装后显示的图标，一个jQuery的js文件，另一个js就是刚才自己编写的js脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function () &#123;</span><br><span class="line">    $(&apos;.uk-clearfix&apos;).hide();</span><br><span class="line">    $(&apos;.x-anchor&apos;).next().mousemove(function()&#123;</span><br><span class="line">        $(this).css(&quot;cursor&quot;,&quot;pointer&quot;);</span><br><span class="line">    &#125;).on(&apos;click&apos;, function () &#123;</span><br><span class="line">        $(&apos;#x-comment-list&apos;).toggle();</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&apos;.x-sidebar-left-bottom&apos;).hide();</span><br><span class="line">    $(&apos;.x-wiki-content&apos;).next().next().andSelf().next().andSelf().next().andSelf().hide();</span><br><span class="line">    $(&apos;#x-comment-list&apos;).next().next().andSelf().hide();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>manifest.json就相当于这个插件的配置文件了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;manifest_version&quot;: 2,</span><br><span class="line">  &quot;name&quot;: &quot;LiaoXueFeng&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Don&apos;t tell others!&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0&quot;,</span><br><span class="line">  &quot;permissions&quot;: [</span><br><span class="line">    &quot;https://www.liaoxuefeng.com/*&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;browser_action&quot;: &#123;</span><br><span class="line">    &quot;default_icon&quot;: &quot;icon.png&quot;,</span><br><span class="line">    &quot;default_title&quot;: &quot;Remove somthing!&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;content_scripts&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;matches&quot;: [&quot;https://www.liaoxuefeng.com/*&quot;],</span><br><span class="line">      &quot;js&quot;: [&quot;jquery-1.10.2.min.js&quot;,&quot;Liaoxuefeng.js&quot;],</span><br><span class="line">      &quot;run_at&quot;: &quot;document_start&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来就是打开Chrome的扩展程序界面，点击打包扩展程序这里选了根目录就行，密钥文件是用来更新扩展程序用的：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%87%86%E5%A4%87%E7%82%B9%E5%87%BB%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6.png" alt="点击打包"><br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%87%86%E5%A4%87%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6.png" alt="打包"></p>
<p>之后生成了crx文件，就完成了！pem文件就是刚才说的密钥文件了。<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%AE%8C%E6%88%90%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6.png" alt="完成打包"></p>
<p>然后就可以安装使用了，以后打开这个网页就变得清爽多了：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%AE%8C%E6%88%90%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E6%95%88%E6%9E%9C.jpg" alt="效果"></p>
]]></content>
      
        <categories>
            
            <category> Chrome </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python获取Bing图片做壁纸]]></title>
      <url>/Python/python%E8%8E%B7%E5%8F%96Bing%E5%9B%BE%E7%89%87%E5%81%9A%E5%A3%81%E7%BA%B8/</url>
      <content type="html"><![CDATA[<p>这篇东西是之前发在微信公众号上的文章，现在整理一下发出来。</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用过Bing搜索的都知道，它首页每天都会更新一张图片，<a href="https://cn.bing.com" target="_blank" rel="noopener">点击这里</a>可以访问。</p>
<p>先说说结果吧，写了一个有GUI界面的小工具，可以查看和保存壁纸，有兴趣的可以在公众号回复“bing”下载玩玩。也可以点击<a href="https://github.com/JianFengY/BingSpider" target="_blank" rel="noopener">我的GitHub</a>下载<code>Main.exe</code>试试。</p>
<p><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BF%85%E5%BA%94%E5%A3%81%E7%BA%B8%E5%B0%8F%E5%B7%A5%E5%85%B7.jpg" alt="必应壁纸小工具"></p>
<p>需要注意的一些问题：</p>
<ul>
<li>工具需要联网才能打开</li>
<li>暂时不支持更改保存的文件夹</li>
<li>设为壁纸之后注销或重启之后就无效了（用保存的图片手动设置壁纸的话就没问题。我在win10用的时候是这样，其他系统不知道，可能是用的pywin32这个库的问题。）</li>
</ul>
<p>好了，不想看分析和代码的看到这里就好了。</p>
<h3 id="准备工作（python-3-x环境）"><a href="#准备工作（python-3-x环境）" class="headerlink" title="准备工作（python 3.x环境）"></a>准备工作（python 3.x环境）</h3><ul>
<li>获取网页信息的requests，urllib库</li>
<li>设置壁纸的pywin32，PIL库</li>
<li>编写GUI的pyqt5库</li>
</ul>
<h3 id="分析网页"><a href="#分析网页" class="headerlink" title="分析网页"></a>分析网页</h3><p>和以前一样，第一步就是打开网页开发者工具，发现在代码里是找不到图片的网址的，这时候就要看networks了：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BF%85%E5%BA%94networks.jpg" alt="必应networks"><br>我们可以在XHR里发现下面这个请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1&amp;nc=1510118759864&amp;pid=hp</span><br></pre></td></tr></table></figure></p>
<p>请求的结果格式化之后是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;images&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;startdate&quot;: &quot;20171107&quot;, </span><br><span class="line">            &quot;fullstartdate&quot;: &quot;201711071600&quot;, </span><br><span class="line">            &quot;enddate&quot;: &quot;20171108&quot;, </span><br><span class="line">            &quot;url&quot;: &quot;/az/hprichbg/rb/PointArenaLH_ZH-CN12332642727_1920x1080.jpg&quot;, </span><br><span class="line">            &quot;urlbase&quot;: &quot;/az/hprichbg/rb/PointArenaLH_ZH-CN12332642727&quot;, </span><br><span class="line">            &quot;copyright&quot;: &quot;波因特阿里纳灯塔，美国加利福尼亚州 (© plainpicture/Westend61/Spotcatch)&quot;, </span><br><span class="line">            &quot;copyrightlink&quot;: &quot;/search?q=Point+Arena+Ligh&amp;form=hpcapt&amp;mkt=zh-cn&quot;, </span><br><span class="line">            &quot;quiz&quot;: &quot;/search?q=Bing+homepage+quiz&amp;filters=WQOskey:%22HPQuiz_20171107_PointArenaLH%22&amp;FORM=HPQUIZ&quot;, </span><br><span class="line">            &quot;wp&quot;: true, </span><br><span class="line">            &quot;hsh&quot;: &quot;ea5b137418244ac63db363f7276c95bb&quot;, </span><br><span class="line">            &quot;drk&quot;: 1, </span><br><span class="line">            &quot;top&quot;: 1, </span><br><span class="line">            &quot;bot&quot;: 1, </span><br><span class="line">            &quot;hs&quot;: [ ]</span><br><span class="line">        &#125;</span><br><span class="line">    ], </span><br><span class="line">    &quot;tooltips&quot;: &#123;</span><br><span class="line">        &quot;loading&quot;: &quot;正在加载...&quot;, </span><br><span class="line">        &quot;previous&quot;: &quot;上一个图像&quot;, </span><br><span class="line">        &quot;next&quot;: &quot;下一个图像&quot;, </span><br><span class="line">        &quot;walle&quot;: &quot;此图片不能下载用作壁纸。&quot;, </span><br><span class="line">        &quot;walls&quot;: &quot;下载今日美图。仅限用作桌面壁纸。&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>没错，“url”加上域名就是图片的地址了，“enddate”的值就是当天日期，可以作为保存的文件名。另外，请求的链接里有个“idx”参数，0是今天的图片，1是昨天的，以此类推。知道这个，接下来的事就很简单了。</p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>首先先写一个获取url的函数，因为要让程序可以获取到前些天的图片，参数的默认值为0，也就是今天的图片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_url(day=0):</span><br><span class="line">    url = &quot;https://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=&quot; + str(day) + &quot;&amp;n=1&amp;nc=1509675905008&amp;pid=hp&amp;video=1&quot;</span><br><span class="line">    return url</span><br></pre></td></tr></table></figure></p>
<p>然后，写一个保存图片的函数，用“enddate”作为文件名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def get_img(url, path=&quot;D://wallpaper/&quot;):</span><br><span class="line">    isExists = os.path.exists(path)</span><br><span class="line">    if not isExists:</span><br><span class="line">        os.makedirs(path) </span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    content = html.json()</span><br><span class="line">    src = &quot;https://www.bing.com&quot; + content[&apos;images&apos;][0][&apos;url&apos;]</span><br><span class="line">    urlretrieve(src, path + content[&apos;images&apos;][0][&apos;enddate&apos;] + &apos;.jpg&apos;)</span><br></pre></td></tr></table></figure></p>
<p>设置壁纸的方法来自网上，原理是通过pywin32访问注册表修改壁纸，至于为什么注销或重启之后会无效我也不是太懂……<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def set_wallpaper_from_bmp(bmp_path):  </span><br><span class="line">    reg_key = win32api.RegOpenKeyEx(win32con.HKEY_CURRENT_USER, &quot;Control Panel\\Desktop&quot;, 0, win32con.KEY_SET_VALUE)    </span><br><span class="line">    win32api.RegSetValueEx(reg_key, &quot;WallpaperStyle&quot;, 0, win32con.REG_SZ, &quot;2&quot;)  </span><br><span class="line">    win32api.RegSetValueEx(reg_key, &quot;TileWallpaper&quot;, 0, win32con.REG_SZ, &quot;0&quot;)  </span><br><span class="line">    win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER, bmp_path, win32con.SPIF_SENDWININICHANGE)  </span><br><span class="line">def set_wallpaper(img_path):  </span><br><span class="line">    isExists = os.path.exists(img_path)</span><br><span class="line">    if isExists:</span><br><span class="line">        img_dir = os.path.dirname(img_path)  </span><br><span class="line">        bmpImage = Image.open(img_path)  </span><br><span class="line">        new_bmp_path = os.path.join(img_dir, &apos;wallpaper.bmp&apos;)  </span><br><span class="line">        bmpImage.save(new_bmp_path, &quot;BMP&quot;)  </span><br><span class="line">        set_wallpaper_from_bmp(new_bmp_path)  </span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure></p>
<p>最后是用pyqt5写GUI界面，我也是第一次使用，所以不是太好看，代码也有点乱，大家凑和看看吧哈哈……<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">class Bing(QMainWindow):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">    def initUI(self):</span><br><span class="line">        self.setGeometry(400, 200, 500, 325)</span><br><span class="line">        self.setFixedSize(self.width(), self.height());    </span><br><span class="line">        self.setWindowTitle(&apos;Bing Wallpaper&apos;)</span><br><span class="line">        self.setWindowIcon(QIcon(&apos;Bing.ico&apos;))</span><br><span class="line">        self.add_position_layout()</span><br><span class="line">    # 添加布局部件</span><br><span class="line">    def add_position_layout(self):</span><br><span class="line">        bg_label = QLabel(self)  </span><br><span class="line">        bg_label.resize(self.width(), self.height())</span><br><span class="line">        bg_label.setScaledContents(True)</span><br><span class="line">        def set_background_image(img):</span><br><span class="line">            photo = QtGui.QPixmap()</span><br><span class="line">            photo.loadFromData(img)</span><br><span class="line">            bg_label.setPixmap(photo)</span><br><span class="line">#         img = time.strftime(&quot;%Y%m%d&quot;) + &apos;.jpg&apos;</span><br><span class="line">        img, self.filename = sp.show_img(sp.get_url())</span><br><span class="line">        set_background_image(img)</span><br><span class="line">#         label_1 = QLabel(&quot;&lt;p style=&apos;font-size:25px;text-align:center;&apos;&gt;&lt;b&gt;Path:&lt;/b&gt;&lt;/p&gt;&quot;, self)</span><br><span class="line">        label_1 = QLabel(&quot;     保存目录: &quot;, self)</span><br><span class="line">        label_1.setStyleSheet(&quot;QLabel&#123;background:rgb(255,255,255,100)&#125;&quot;)</span><br><span class="line">        path_edit = QLineEdit()</span><br><span class="line">        path_edit.setText(&apos;D:/wallpaper&apos;)</span><br><span class="line">        path_edit.setToolTip(&apos;抱歉！暂时不支持更换路径！&apos;)</span><br><span class="line">        path_edit.setReadOnly(True)</span><br><span class="line">#         def btn_change():</span><br><span class="line">#             filename = QFileDialog.getExistingDirectory(self, directory=path_edit.text())</span><br><span class="line">#             path_edit.setText(filename)</span><br><span class="line">        self.day = 0</span><br><span class="line">        def btn_previous(day):</span><br><span class="line">            img,self.filename = sp.show_img(sp.get_url(self.day + 1))</span><br><span class="line">            set_background_image(img)</span><br><span class="line">            self.day += 1</span><br><span class="line">            print(self.day)</span><br><span class="line">        def btn_next(day):</span><br><span class="line">            if self.day &gt; 0:</span><br><span class="line">                img,self.filename = sp.show_img(sp.get_url(self.day - 1))</span><br><span class="line">                set_background_image(img)</span><br><span class="line">                self.day -= 1</span><br><span class="line">                print(self.day)</span><br><span class="line">            else:</span><br><span class="line">                QMessageBox.information(self, &quot; &quot;, &quot;明天的壁纸还未更新哦！&quot;) </span><br><span class="line">        def btn_save(day):</span><br><span class="line">            img = sp.get_img(sp.get_url(self.day))</span><br><span class="line">        def btn_set_wallpaper(day):</span><br><span class="line">            flag = sw.set_wallpaper(&apos;D:/wallpaper/&apos; + self.filename)</span><br><span class="line">            if not flag:</span><br><span class="line">                QMessageBox.information(self, &quot; &quot;, &quot;请先保存此壁纸!&quot;) </span><br><span class="line">#         button_1 = QPushButton(&quot;更改路径&quot;, self)</span><br><span class="line">#         button_1.clicked.connect(btn_change)</span><br><span class="line">        button_2 = QPushButton(&quot;前一张&quot;, self)</span><br><span class="line">        button_2.setToolTip(&apos;查看前一天的必应图片！&apos;)</span><br><span class="line">        button_2.clicked.connect(btn_previous)</span><br><span class="line">        button_3 = QPushButton(&quot;设为壁纸&quot;, self)</span><br><span class="line">        button_3.setToolTip(&apos;设置壁纸要先保存哦！&apos;)</span><br><span class="line">        button_3.clicked.connect(btn_set_wallpaper)</span><br><span class="line">        button_4 = QPushButton(&quot;保存&quot;, self)</span><br><span class="line">        button_4.setToolTip(&apos;保存在该目录下！&apos;)</span><br><span class="line">        button_4.clicked.connect(btn_save)</span><br><span class="line">        button_5 = QPushButton(&quot;后一张&quot;, self)</span><br><span class="line">        button_5.setToolTip(&apos;查看后一天的必应图片！&apos;)</span><br><span class="line">        button_5.clicked.connect(btn_next)</span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        grid.setSpacing(10)</span><br><span class="line">        grid.addWidget(label_1, 2, 0)</span><br><span class="line">        grid.addWidget(path_edit, 2, 1, 1, 2)</span><br><span class="line">#         grid.addWidget(button_1, 2, 3)</span><br><span class="line">        grid.addWidget(button_2, 3, 0)</span><br><span class="line">        grid.addWidget(button_3, 3, 1, 1, 2)</span><br><span class="line">        grid.addWidget(button_4, 2, 3)</span><br><span class="line">        grid.addWidget(button_5, 3, 3)</span><br><span class="line">        grid.setAlignment(Qt.AlignTop)</span><br><span class="line">        layout_widget = QWidget()</span><br><span class="line">        layout_widget.setLayout(grid)</span><br><span class="line">        self.setCentralWidget(layout_widget)</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    sp.get_img(sp.get_url())</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    bing = Bing()</span><br><span class="line">    bing.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p>
<p>简单来说，程序会先通过网络获取图片显示，所以没有联网的话就用不了，要设置壁纸的话需要先点击保存会把图片保存下来，运行结果是这样的：</p>
<p><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BF%85%E5%BA%94%E5%A3%81%E7%BA%B8%E7%A8%8B%E5%BA%8F%E6%95%88%E6%9E%9C%E5%9B%BE.jpg" alt="必应壁纸程序效果"></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>另外，完成之后，我用pyinstaller打包成了exe文件，打包完之后我发现左上角的那个小图标没了，不过不影响使用……大家在公众号回复“bing”就有下载地址了，或者点击<a href="https://github.com/JianFengY/BingSpider" target="_blank" rel="noopener">我的GitHub</a>，有源码也有exe程序，注意一下前面说的几个问题就好。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fiddler分析手机App请求Scrapy爬虫]]></title>
      <url>/Python/%E7%88%AC%E8%99%AB/Fiddler%E5%88%86%E6%9E%90%E6%89%8B%E6%9C%BAApp%E8%AF%B7%E6%B1%82Scrapy%E7%88%AC%E8%99%AB/</url>
      <content type="html"><![CDATA[<p>Fiddler是一款十分强大的调试代理工具，这个工具我就不详细介绍了。简单来说，它是通过创建代理，拦截http请求用于分析或修改。</p>
<p>这里就演示一下用Fiddler抓取手机端Bilibili的请求并使用Scrapy编写一个爬取图片的爬虫程序。</p>
<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ul>
<li>Python，我用的是3.6，系统是win10</li>
<li>Scrapy框架，安装过程我之前的文章提过</li>
<li>Fiddler，<a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noopener">点击这里</a>下载安装</li>
<li>手机…我的是安卓</li>
<li>一个安卓软件，我这里就用Bilibili示范</li>
</ul>
<h3 id="Fiddler配置"><a href="#Fiddler配置" class="headerlink" title="Fiddler配置"></a>Fiddler配置</h3><p>安装我就不说了，说说配置，<code>Tools - Connections</code>这里可以看到默认端口号是很吉利的<code>8888</code>。这里要勾上<code>Allow remote computers to connect</code>。<br><img src="http://p3vld0dkf.bkt.clouddn.com/fiddler%E9%85%8D%E7%BD%AE.png" alt="fidder配置"><br>然后要让<strong>手机和电脑</strong>连接上<strong>同一个网络</strong>，并给手机设置<strong>代理IP</strong>，设置成电脑的IP地址，cmd执行命令<code>ipconfig</code>可以查看ip：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E6%9F%A5%E7%9C%8Bip.png" alt="查看IP"><br>手机连接上wifi后，选择<code>代理设置</code>，<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%861.png" alt="代理设置1"><br>把服务器设置成刚才看到的IP地址，端口号如果没改的话就是<code>8888</code>，然后保存。<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%862.png" alt="代理设置2"><br>下面是给手机安装证书，不安装<strong>可能</strong>会出现手机设置了代理无法上网的问题。</p>
<p>然后手机浏览器访问<code>ip地址:8888</code>，下载证书安装：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD%E8%AF%81%E4%B9%A6.png" alt="下载证书"><br>打开<code>设置 - 安全 - 设备管理与凭证 - 从存储盘安装</code>，差不多都是这个地方，找找应该能找到…<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%AE%89%E8%A3%85%E6%AD%A4%E8%AF%81%E4%B9%A6%E5%88%B0%E6%89%8B%E6%9C%BA.png" alt="安装此证书"><br>安装完后可以在<code>用户凭证</code>可以看到：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%AE%89%E8%A3%85%E5%AE%8C%E8%AF%81%E4%B9%A6.png" alt="安装完"></p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p>接下来就可以打开Fiddler还有手机端的Bilibili，进行分析了。我这里选择<code>相簿</code>，准备爬取里面的图片。<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E9%80%89%E6%8B%A9%E7%9B%B8%E7%B0%BF.png" alt="选择相簿"><br>下面的精选热推就是我们的目标：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0.png" alt="下拉刷新"><br>刷新手机的时候，可以看到Fiddler界面出现了请求的链接返回的是json数据：<br><img src="http://p3vld0dkf.bkt.clouddn.com/fiddler%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C.png" alt="fiddler查看结果"><br>复制链接到浏览器打开就可以看到图片地址了：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80.png" alt="图片地址"><br>点开这个地址，可以看到刚才手机端显示的那张图片：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E7%82%B9%E5%BC%80%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80.png" alt="图片"><br>接下来手机端往下拉，在Fiddler可以看到刷出了相似的请求，可以看到请求的参数里，<code>page_num</code>参数增加，这就是表示页码的参数：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E6%8E%A7%E5%88%B6%E9%A1%B5%E7%A0%81%E7%9A%84%E5%8F%82%E6%95%B0.png" alt="页码参数"></p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>现在，图片的网址我们已经找出来了，接下来就可以编写代码下载图片了，这里我还是使用了Scrapy框架。</p>
<p>首先，还是新建项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject scrapy_bilibili</span><br></pre></td></tr></table></figure></p>
<p>然后编写<code>items.py</code>定义存储字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ScrapyBilibiliItem(scrapy.Item):</span><br><span class="line">    # define the fields for your item here like:</span><br><span class="line">    # name = scrapy.Field()</span><br><span class="line">    image_urls = scrapy.Field()</span><br><span class="line">    images = scrapy.Field()</span><br><span class="line">    image_paths = scrapy.Field()</span><br></pre></td></tr></table></figure></p>
<p>然后<code>settings.py</code>把<code>ITEM_PIPELINES</code>注释取消，还有增加<code>IMAGES_STORE</code>作为存储位置，还把<code>USER_AGENT</code>改成了Fiddler看到的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    &apos;scrapy_bilibili.pipelines.ScrapyBilibiliPipeline&apos;: 300,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IMAGES_STORE = &apos;E:/scrapy_bilibili/images&apos;</span><br><span class="line"></span><br><span class="line">USER_AGENT = &apos;Mozilla/5.0 BiliDroid/5.22.1 (bbcallen@gmail.com)&apos;</span><br></pre></td></tr></table></figure></p>
<p>接下来是<code>pipelines.py</code>，这段代码改自官方文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">from scrapy.pipelines.images import ImagesPipeline</span><br><span class="line">from scrapy.exceptions import DropItem</span><br><span class="line">from scrapy.utils.project import get_project_settings</span><br><span class="line"></span><br><span class="line">class ScrapyBilibiliPipeline(ImagesPipeline):</span><br><span class="line">    IMAGES_STORE = get_project_settings().get(&apos;IMAGES_STORE&apos;)</span><br><span class="line">    </span><br><span class="line">    def get_media_requests(self, item, info):</span><br><span class="line">        image_url = item[&apos;image_urls&apos;]</span><br><span class="line">        yield scrapy.Request(image_url)</span><br><span class="line">    </span><br><span class="line">    def item_completed(self, results, item, info):</span><br><span class="line">        image_paths = [x[&apos;path&apos;] for ok, x in results if ok]</span><br><span class="line">        if not image_paths:</span><br><span class="line">            raise DropItem(&quot;Item contains no images&quot;)</span><br><span class="line">        item[&apos;image_paths&apos;] = image_paths</span><br><span class="line">        return item</span><br></pre></td></tr></table></figure></p>
<p>最后在<code>spiders</code>文件夹里新建<code>bilibili_spider.py</code>放置爬虫的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import scrapy</span><br><span class="line">from scrapy_bilibili.items import ScrapyBilibiliItem</span><br><span class="line"></span><br><span class="line">class BilibiliSpider(scrapy.Spider):</span><br><span class="line">    name = &apos;bilibili_spider&apos;</span><br><span class="line">    allowed_domains = [&apos;api.vc.bilibili.com&apos;]</span><br><span class="line">    page_num = 0</span><br><span class="line">    start_urls = [&apos;http://api.vc.bilibili.com/link_draw/v2/Doc/...&amp;page_num=&apos; + str(page_num) + &apos;&amp;page_size=20...&apos;]  # 链接太长我就不放完整了</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        datas = json.loads(response.text)[&apos;data&apos;][&apos;items&apos;]</span><br><span class="line">        for data in datas:</span><br><span class="line">            item = ScrapyBilibiliItem()</span><br><span class="line">            for img in data[&apos;item&apos;][&apos;pictures&apos;]:</span><br><span class="line">                item[&apos;image_urls&apos;] = img[&apos;img_src&apos;]</span><br><span class="line">                yield item</span><br><span class="line">        if self.page_num &gt;= 10:</span><br><span class="line">            return</span><br><span class="line">        self.page_num += 1</span><br><span class="line">        yield scrapy.Request(&apos;http://api.vc.bilibili.com/link_draw/v2/Doc/...&amp;page_num=&apos; + str(self.page_num) + &apos;&amp;page_size=20...&apos;, callback = self.parse)  # 链接也是不完整的</span><br></pre></td></tr></table></figure></p>
<h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p>在项目的目录下执行以下命令，<strong>注意</strong><code>bilibili_spider</code>是<code>bilibili_spider.py</code>里<code>class</code>的<code>name</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl bilibili_spider</span><br></pre></td></tr></table></figure></p>
<p>然后，等到运行完，就能看到结果了，图片是使用它们URL的 SHA1 hash 作为文件名的：<br><img src="http://p3vld0dkf.bkt.clouddn.com/bilibili%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="结果"></p>
<p>对了，这里要注意一个问题，运行的时候如果有挂代理，比如一些科学^_^上网的工具什么的就先关掉吧，不然可能会出现以下问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection to the other side was lost in a non-clean fashion: Connection lost.</span><br></pre></td></tr></table></figure></p>
<hr>
<p>到这里，我们的程序就完成了。</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> 爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Fiddler </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo博客设置以及Next主题美化]]></title>
      <url>/Hexo/Hexo%E4%B8%BB%E9%A2%98Next%E7%BE%8E%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>之前的一篇文章写了用Hexo和GitHub搭建博客，现在就来对博客主题做一些个性化的修改。</p>
<h3 id="安装Next主题"><a href="#安装Next主题" class="headerlink" title="安装Next主题"></a>安装Next主题</h3><p>切换到博客的目录，使用<code>Git Bash</code>运行下载主题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></p>
<p>然后打开<strong>根目录</strong>下的<code>_config.yml</code>，注意这个是整个博客站点的配置文件，而<strong>主题目录</strong>下也有一个<code>_config.yml</code>，这是主题的配置文件。在站点配置文件找到<code>theme</code>改为<code>next</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></p>
<p>这样就启用了主题，可以运行<code>hexo s</code>查看效果了。</p>
<h3 id="博客设置"><a href="#博客设置" class="headerlink" title="博客设置"></a>博客设置</h3><p>这里先对博客基本信息做一些设置，<strong>注意了，设置时冒号后面都要有一个空格，这是yml文件的格式</strong></p>
<h4 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h4><p>首先先设置博客站点的语言，这个是在站点配置文件，也就是<strong>根目录</strong>下的<code>_config.yml</code>设置的，找到<code>language</code>设置成中文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p>
<h4 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h4><p>在站点配置文件的开头，填上自己博客的相应信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: # 标题</span><br><span class="line">subtitle: # 副标题</span><br><span class="line">description: # 站点描述</span><br><span class="line">author: # 作者</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure></p>
<h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><p>Next已经自带了很多功能和集成了一些第三方服务，通过主题目录下的<code>_config.yml</code>就能对主题做一些设定及个性化。</p>
<h4 id="设置主题的Scheme"><a href="#设置主题的Scheme" class="headerlink" title="设置主题的Scheme"></a>设置主题的Scheme</h4><p>Next自带了几种外观，在主题目录的<code>_config.yml</code>里找到<code>scheme</code>，我比较喜欢Mist，把前面的注释符<code>#</code>去掉即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure></p>
<h4 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h4><p>我们可以看到首页有还有归档等菜单，这些在主题配置文件里设置，找到<code>menu</code>，把需要的菜单取消注释，我这里保留了<code>categories</code>分类，<code>tags</code>标签，<code>archives</code>归档，<code>about</code>关于，<code>||</code>后面的表示图标，使用<code>Font Awesome</code>图标名字。我就不作修改了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure></p>
<p>另外，也可以自己添加菜单，但我暂时没有这个需要。</p>
<h4 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h4><p>设置完菜单但是没有页面的话点击菜单就会报错了。创建刚才建了菜单的页面执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure></p>
<p>然后在<code>source</code>目录下就会生成对应的文件夹，每个文件夹里都有一个<code>index.md</code>，打开将页面的<code>type</code>设置为相应的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: </span><br><span class="line">type: &quot;tags&quot; # 或者 &quot;categories&quot;/&quot;about&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p><code>comments</code>是关闭这个页面的评论功能用的，评论后面会提到。</p>
<h4 id="文章显示设置"><a href="#文章显示设置" class="headerlink" title="文章显示设置"></a>文章显示设置</h4><p>默认首页的文章会显示全文，在主题配置文件设置<code>auto_excerpt</code>为<code>true</code>再设置长度就会只显示你设置的字数了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 100</span><br></pre></td></tr></table></figure></p>
<p>但是，官方是不推荐这种做法的，我这里用的方法是发表的文章的开头加上<code>description</code>，这样，文章就会显示这个摘要：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">title: # 文章标题</span><br><span class="line">author: # 作者</span><br><span class="line">tags: </span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br><span class="line">categories: </span><br><span class="line">  - Hexo</span><br><span class="line">  - Next</span><br><span class="line">description: # 描述，首页文章显示的摘要</span><br><span class="line">date: </span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p>这里的<code>tags</code>和<code>categories</code>就是给文章加上标签和分类，两者的区别就是<code>categories</code>是有层级的，像上面那样分类里<code>Next</code>就是<code>Hexo</code>的子类，Hexo是不支持指定多个同级分类的。</p>
<h4 id="使用RSS"><a href="#使用RSS" class="headerlink" title="使用RSS"></a>使用RSS</h4><p>先在博客目录下执行以下命令安装插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure></p>
<p>然后在主题配置文件里找到<code>rss</code>修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></p>
<p>之后在右边的侧边栏就能看到RSS按钮了</p>
<h4 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h4><p>在<code>source</code>目录下新建一个<code>images</code>目录，放一张名为<code>avatar.png</code>的头像，修改主题配置文件的<code>avatar</code>字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: /images/avatar.png</span><br></pre></td></tr></table></figure></p>
<h4 id="设置博客favicon图标"><a href="#设置博客favicon图标" class="headerlink" title="设置博客favicon图标"></a>设置博客favicon图标</h4><p>在<code>images</code>目录下放置图标，我这里放了两种大小的ico图标，然后在主题配置文件找到<code>favicon</code>并修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favicon: </span><br><span class="line">  small: /images/favicon-16x16.ico</span><br><span class="line">  medium: /images/favicon-32x32.ico</span><br><span class="line">  #apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  #safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure></p>
<h4 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h4><p>在主题配置文件找到<code>social</code>把需要的取消注释，然后填好你的链接就可以了，<code>||</code>后面的是图标名称，和菜单的一样，也是使用<code>Font Awesome</code>图标名字。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/JianFengY || github</span><br><span class="line">  GMail: mailto:yjianfengxy@gmail.com || envelope</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  Facebook: https://www.facebook.com/jf.young.1 || facebook</span><br><span class="line">  #VK Group: https://vk.com/yourname || vk</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br></pre></td></tr></table></figure></p>
<p>你也可以自行添加其他社交方式，按照格式添加即可。</p>
<h4 id="设置背景动画"><a href="#设置背景动画" class="headerlink" title="设置背景动画"></a>设置背景动画</h4><p>同样是主题配置文件，我这里用的是<code>canvas_nest</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Canvas-nest</span><br><span class="line">canvas_nest: true</span><br><span class="line"></span><br><span class="line"># three_waves</span><br><span class="line">three_waves: false</span><br><span class="line"></span><br><span class="line"># canvas_lines</span><br><span class="line">canvas_lines: false</span><br><span class="line"></span><br><span class="line"># canvas_sphere</span><br><span class="line">canvas_sphere: false</span><br></pre></td></tr></table></figure></p>
<h4 id="修改文章底部的-号标签"><a href="#修改文章底部的-号标签" class="headerlink" title="修改文章底部的#号标签"></a>修改文章底部的#号标签</h4><p>打开<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将<code>#</code>换成<code>Font Awesome</code>图标:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h4><p>我使用的是来必力 <a href="https://livere.com/" target="_blank" rel="noopener">点击这里</a> 注册账号，然后复制下面的<code>data-uid</code>：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E6%9D%A5%E5%BF%85%E5%8A%9B.png" alt="来必力"></p>
<p>在主题配置文件找到<code>livere_uid</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Support for LiveRe comments system.</span><br><span class="line"># You can get your uid from https://livere.com/insight/myCode (General web site)</span><br><span class="line">livere_uid: # 粘贴你的uid</span><br></pre></td></tr></table></figure></p>
<p>这样，除了设置了<code>comments: false</code>的页面，其他都会有评论系统了。</p>
<h4 id="网站底部加访问量"><a href="#网站底部加访问量" class="headerlink" title="网站底部加访问量"></a>网站底部加访问量</h4><p>这个我是通过修改<code>\themes\next\layout\_partials\footer.swig</code>文件实现的:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">	&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;</span><br><span class="line">	&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">		本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">	&lt;/span&gt;</span><br><span class="line">	&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">	&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">		本站访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;</span><br><span class="line">	&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="统计功能"><a href="#统计功能" class="headerlink" title="统计功能"></a>统计功能</h4><p>先在博客目录下安装插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure></p>
<p>然后在主题配置文件，找到<code>post_wordcount</code>，修改你想要的统计功能，有字数统计，阅读时长等：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  totalcount: true</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure></p>
<h4 id="LeanCloud文章阅读次数统计"><a href="#LeanCloud文章阅读次数统计" class="headerlink" title="LeanCloud文章阅读次数统计"></a>LeanCloud文章阅读次数统计</h4><p><a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">点击这里</a> 注册登录LeanCloud账号，先创建一个任意名称的应用，再创建一个名为<code>Counter</code>的<code>Class</code>。<br><img src="http://p3vld0dkf.bkt.clouddn.com/LeanCloud.png" alt="LeanCloud"><br>在应用Key这里分别复制<code>App ID</code>和<code>App Key</code>到主题配置文件里的<code>leancloud_visitors</code>，并把<code>enable</code>改为<code>true</code>。<br><img src="http://p3vld0dkf.bkt.clouddn.com/LeanCloudKey.png" alt="Key"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Show number of visitors to each article.</span><br><span class="line"># You can visit https://leancloud.cn get AppID and AppKey.</span><br><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: </span><br><span class="line">  app_key:</span><br></pre></td></tr></table></figure></p>
<p>然后最好再设置一下安全域名就可以了：<br><img src="http://p3vld0dkf.bkt.clouddn.com/LeanCloud%E5%AE%89%E5%85%A8%E5%9F%9F%E5%90%8D.png" alt="安全域名"></p>
<h4 id="搜索服务Local-Search"><a href="#搜索服务Local-Search" class="headerlink" title="搜索服务Local Search"></a>搜索服务Local Search</h4><p>先安装<code>hexo-generator-searchdb</code>，博客目录执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p>
<p>然后在站点配置文件，<strong>注意不是主题配置</strong>，添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p>
<p>然后主题配置文件找到<code>local_search</code>改为<code>true</code>，然后从上面提供的样式选一个填入<code>pace_theme</code>中就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p>
<p>然后菜单就会出现搜索了。</p>
<h4 id="顶部加载条"><a href="#顶部加载条" class="headerlink" title="顶部加载条"></a>顶部加载条</h4><p>修改主题配置文件，找到<code>pace</code>改为<code>true</code>，并从上面提供的样式中选择一种填入<code>pace_theme</code>中就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># Progress bar in the top during page loading.</span><br><span class="line">pace: true</span><br><span class="line"># Themes list:</span><br><span class="line">#pace-theme-big-counter</span><br><span class="line">#pace-theme-bounce</span><br><span class="line">#pace-theme-barber-shop</span><br><span class="line">#pace-theme-center-atom</span><br><span class="line">#pace-theme-center-circle</span><br><span class="line">#pace-theme-center-radar</span><br><span class="line">#pace-theme-center-simple</span><br><span class="line">#pace-theme-corner-indicator</span><br><span class="line">#pace-theme-fill-left</span><br><span class="line">#pace-theme-flash</span><br><span class="line">#pace-theme-loading-bar</span><br><span class="line">#pace-theme-mac-osx</span><br><span class="line">#pace-theme-minimal</span><br><span class="line"># For example</span><br><span class="line"># pace_theme: pace-theme-center-simple</span><br><span class="line">pace_theme: pace-theme-minimal</span><br></pre></td></tr></table></figure></p>
<h4 id="右上角加fork-me-on-github"><a href="#右上角加fork-me-on-github" class="headerlink" title="右上角加fork me on github"></a>右上角加fork me on github</h4><p>点击<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a>或者<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">这里</a>挑选你喜欢的样式，修改成你的GitHub链接，复制到<code>themes/next/layout/_layout.swig</code>文件中的以下位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;&#123;&#123; container_class &#125;&#125; &#123;% block page_class %&#125;&#123;% endblock %&#125;&quot;&gt;</span><br><span class="line">	&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;a href=&quot;https://github.com/JianFengY&quot; ......&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="浏览文章时显示浏览进度"><a href="#浏览文章时显示浏览进度" class="headerlink" title="浏览文章时显示浏览进度"></a>浏览文章时显示浏览进度</h4><p>主题设置文件查找<code>scrollpercent</code>修改为<code>true</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Scroll percent label in b2t button.</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure></p>
<h4 id="修改文章内链接的样式"><a href="#修改文章内链接的样式" class="headerlink" title="修改文章内链接的样式"></a>修改文章内链接的样式</h4><p>文章里的链接样式默认是只加一条下划线，颜色和普通文字一样，为了方便区分，在<code>themes/next/source/css/_custom/custom.styl</code>文件加以下代码，自行添加的样式都可以写在这个文件里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">    color: #0593d3;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #0593d3;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      color: #fc6423;</span><br><span class="line">      border-bottom: none;</span><br><span class="line">      border-bottom: 1px solid #fc6423;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>这个博客从搭建到美化，都参考了网上许多文章和教程，我就不一一罗列出来了，感谢网上各路大神！</p>
<p>这里推荐一篇干货满满的文章：<a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">https://www.jianshu.com/p/f054333ac9e6</a> </p>
<p>还有就是官方的文档了，里面也有很详细的主题配置和第三方服务的说明：<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/third-party-services.html</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python爬虫Scrapy入门篇]]></title>
      <url>/Python/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%ABScrapy%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为Python简单灵活的特点，一直是写爬虫的热门语言，我之前也在公众号上分享过几篇简单的爬虫例子和教程。</p>
<p>Scrapy是一款简单高效的Python网络爬虫框架，使用框架，我们就可以只关注数据的提取而不用去自己造轮子了。其实，对于这个框架，我也是个新手…这里，就用我们学校的图书馆系统做个简单的入门项目了。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>先说一下我的Python是3.6版本的，电脑是win10。</p>
<p>Scrapy也可以直接用使用<code>pip</code>命令安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure></p>
<hr>
<p>因为Scrapy依赖了其他一些包，所以会额外安装一些库，如<code>lxml</code>、<code>Twisted</code>和<code>pyOpenSSL</code>等，这在文档也有提到。我在安装这些库时有遇到一个问题，报了下面这个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Command &quot;&quot;d:\program files\python3.6.1\python.exe&quot; -u -c &quot;import setuptools, tokenize;__file__=&apos;C:\\Users\\ASUS\\AppData\\Local\\Temp\\pip-build-qkm97m8f\\Twisted\\setup.py&apos;;f=getattr(tokenize, &apos;open&apos;, open)(__file__);code=f.read().replace(&apos;\r\n&apos;, &apos;\n&apos;);f.close();exec(compile(code, __file__, &apos;exec&apos;))&quot; install --record C:\Users\ASUS\AppData\Local\Temp\pip-e4cf8gml-record\install-record.txt --single-version-externally-managed --compile&quot; failed with error code 1 in C:\Users\ASUS\AppData\Local\Temp\pip-build-qkm97m8f\Twisted\</span><br></pre></td></tr></table></figure></p>
<p>可以看到是安装<code>Twisted</code>出的问题，解决方法是在 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted" target="_blank" rel="noopener">这里</a> 下载对应版本的whl包，我的是<code>Twisted-17.9.0-cp36-cp36m-win32.whl</code>，<code>cp</code>后面是Python版本，<code>win32</code>表示位数，我的Python是32位的。</p>
<p>然后切换到下载目录运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Twisted-17.9.0-cp36-cp36m-win32.whl</span><br></pre></td></tr></table></figure></p>
<p>然后再安装Scrapy就可以了。你会看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Successfully installed PyDispatcher-2.0.5 asn1crypto-0.24.0 cffi-1.11.4 cryptography-2.1.4 cssselect-1.0.3 parsel-1.4.0 pyOpenSSL-17.5.0 pyasn1-0.4.2 pyasn1-modules-0.2.1 pycparser-2.18 queuelib-1.4.2 scrapy-1.5.0 service-identity-17.0.0</span><br></pre></td></tr></table></figure></p>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>切换到你想放这个项目的目录，执行<code>scrapy startproject projectname</code>创建一个项目，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject scrapy_test</span><br></pre></td></tr></table></figure></p>
<p>生成的项目结构是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scrapy_test/</span><br><span class="line">    scrapy.cfg            # deploy configuration file</span><br><span class="line">    scrapy_test/             # project&apos;s Python module, you&apos;ll import your code from here</span><br><span class="line">        __init__.py</span><br><span class="line">        items.py          # project items definition file</span><br><span class="line">        middlewares.py    # project middlewares file</span><br><span class="line">        pipelines.py      # project pipelines file</span><br><span class="line">        settings.py       # project settings file</span><br><span class="line">        spiders/          # a directory where you&apos;ll later put your spiders</span><br><span class="line">            __init__.py</span><br></pre></td></tr></table></figure></p>
<p><code>spiders</code>目录用于放置我们的爬虫，<code>items.py</code>用于定义我们要获取的数据，<code>pipelines.py</code>定义存储，<code>settings.py</code>顾名思义就是配置文件了。</p>
<h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%BD%91%E9%A1%B5%E7%BB%93%E6%9E%84.png" alt="图书馆网页"></p>
<hr>
<p>第一步我们先定义要存储什么字段，这里就定义书名、作者和索引号吧，编写<code>items.py</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BooksItem(scrapy.Item):</span><br><span class="line">    &apos;&apos;&apos;定义要存储的字段&apos;&apos;&apos;</span><br><span class="line">    # 书名</span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    # 作者</span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    # 索引号</span><br><span class="line">    call_number = scrapy.Field()</span><br></pre></td></tr></table></figure></p>
<p>接下来我们在<code>spiders</code>目录下编写爬虫文件，我这里新建一个<code>books_spider.py</code>文件，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">from scrapy_test.items import BooksItem</span><br><span class="line"></span><br><span class="line">class BooksSpider(scrapy.Spider):</span><br><span class="line">    &apos;&apos;&apos;图书爬虫类&apos;&apos;&apos;</span><br><span class="line">    # 这个name不能重复</span><br><span class="line">    name = &apos;books&apos;</span><br><span class="line">    # allowed_domains = [&apos;202.116.174.108:8080&apos;]</span><br><span class="line">    start_urls = [&quot;http://202.116.174.108:8080/top/top_lend.php?cls_no=ALL&quot;]</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        &apos;&apos;&apos;处理下载的response的默认方法&apos;&apos;&apos;</span><br><span class="line">        books = []</span><br><span class="line">        for item in response.xpath(&apos;//tr&apos;)[1:]:</span><br><span class="line">            book = BooksItem()</span><br><span class="line">            book_name = item.xpath(&apos;td[2]/a/text()&apos;).extract()</span><br><span class="line">            book_author = item.xpath(&apos;td[3]/text()&apos;).extract()</span><br><span class="line">            book_call_number = item.xpath(&apos;td[5]/text()&apos;).extract()</span><br><span class="line">            book[&apos;name&apos;] = book_name[0]</span><br><span class="line">            book[&apos;author&apos;] = book_author[0]</span><br><span class="line">            book[&apos;call_number&apos;] = book_call_number[0]</span><br><span class="line">            books.append(book)</span><br><span class="line">        return books</span><br></pre></td></tr></table></figure></p>
<p>这个类继承<code>scrapy.Spider</code>，需要指定<code>name</code>，它是运行爬虫用的，<code>start_urls</code>是要爬取的url列表，<code>parse</code>函数接收获取到的<code>response</code>解析用的是scrapy自带的<code>xpath</code>,这个网页的结构很简单，所以就不多解释了。总之，就是遍历每一本书的信息，然后存在<code>books</code>中。这些信息在之前的item中已经定义了。<br>代码的编写到这里就结束了，接下来就可以运行了。</p>
<h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p>要运行代码，切换到项目的目录里，执行下面的命令，其中<code>books</code>就是上面的<code>name</code>，<code>books.json</code>就是生成的json文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl books -o books.json -t json</span><br></pre></td></tr></table></figure></p>
<p>开始运行时，出现了一个问题，就是没报错，但没有结果，输出一片空白，然后发现下面的提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG: Forbidden by robots.txt</span><br></pre></td></tr></table></figure></p>
<p>这是因为要获取的页面在robots中被禁止了，所以Scrapy自动忽略了，只需修改<code>settings.py</code>将：<code>ROBOTSTXT_OBEY</code>改为<code>False</code>就行了。</p>
<p>后来又遇到了乱码的问题，输出全是<code>\uxxx</code>这种字符，只要在<code>settings.py</code>加上<code>FEED_EXPORT_ENCODING = &#39;utf-8&#39;</code>就可以。</p>
<p>没报错执行完上面的命令之后就会在根目录生成一个<code>books.json</code>文件，打开，就会看到保存下来的json格式图书信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;暗恋·橘生淮南&quot;,</span><br><span class="line">    &quot;author&quot;: &quot;八月长安[著]&quot;,</span><br><span class="line">    &quot;call_number&quot;: &quot;I247.57/5494&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;Time series and panel data econometrics / First edition.&quot;,</span><br><span class="line">    &quot;author&quot;: &quot;M. Hashem Pesaran.&quot;,</span><br><span class="line">    &quot;call_number&quot;: &quot;F224.0/EN4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;杀死一只知更鸟.第2版&quot;,</span><br><span class="line">    &quot;author&quot;: &quot;(美国) 哈珀·李著&quot;,</span><br><span class="line">    &quot;call_number&quot;: &quot;I712.45/1231=2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;name&quot;: &quot;众筹:互联网金融的下一个风口&quot;,</span><br><span class="line">    &quot;author&quot;: &quot;陈晓暾, 白帆, 陈英编著&quot;,</span><br><span class="line">    &quot;call_number&quot;: &quot;F830.45/77&quot;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%9B%BE%E4%B9%A6%E9%A6%86%E7%88%AC%E8%99%AB%E7%BB%93%E6%9E%9C.png" alt="结果"></p>
<hr>
<p>我们的Scrapy入门项目就完成了！</p>
]]></content>
      
        <categories>
            
            <category> Python </category>
            
            <category> 爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitHub+Hexo搭建个人博客]]></title>
      <url>/Hexo/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>其实网上已经有很多这样的教程了，我这里只是把自己一步步搭建的过程做一些记录而已。闲话不多说，马上开始。</p>
<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ul>
<li>Git，先 <a href="https://gitforwindows.org/" target="_blank" rel="noopener">点击这里</a> 下载Git安装，安装过程我就不作说明了</li>
<li>Node.js，<a href="https://nodejs.org/en/" target="_blank" rel="noopener">点击这里</a> 下载安装，安装也很简单方便，这里也不作说明，记得安装上npm就好</li>
<li>GitHub账号当然不能少，这里就默认你已经有账号了…没有的 <a href="https://github.com/" target="_blank" rel="noopener">点击这里</a> 去注册吧</li>
</ul>
<h3 id="Hexo安装与搭建"><a href="#Hexo安装与搭建" class="headerlink" title="Hexo安装与搭建"></a>Hexo安装与搭建</h3><p>首先，新建一个文件夹，你的博客就要放在这里，我这里是<code>E:\hexo</code>，然后，在这个文件夹里右键<code>Git Bash Here</code>，因为要使用到这个，所以就不用cmd命令行直接用这个了。<br>执行以下命令安装Hexo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
<p>再执行以下命令，生成建立网站所需要的所有文件并安装依赖包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>然后，我们在<strong>根目录</strong>下的<code>_config.yml</code>文件，填上自己博客的相应信息，<strong>注意，冒号后面都要有一个空格，这是yml文件的格式</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: # 标题</span><br><span class="line">subtitle: # 副标题</span><br><span class="line">description: # 站点描述</span><br><span class="line">author: # 作者</span><br><span class="line">language: zh-Hans</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure></p>
<p>然后，以下命令生成静态页面并开启本地服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></p>
<p>现在，浏览器输入<code>http://localhost:4000</code>就能查看你的博客了，当然，只是本地，接下来，就是放到GitHub上让别人能访问了。</p>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>首先<code>New Repository</code>，名称是<code>username.github.io</code>，<code>username</code>要与账号对应，比如我的就是<code>JianFengY.github.io</code>，所以，我的GitHub账号本来应该全部小写字母的，这样会比较协调…</p>
<h4 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h4><p>执行以下命令，不出意外应该是一直回车就好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot;</span><br></pre></td></tr></table></figure></p>
<p>然后，在<code>C:\Users\ASUS\.ssh</code>目录会有两个文件<strong>id_rsa</strong>和<strong>id_rsa.pub</strong>,打开<strong>id_rsa.pub</strong>，复制里面的所有内容到 <a href="https://github.com/settings/keys" target="_blank" rel="noopener">SSH keys这里</a> 的Key，Title随便填，然后<code>Add SSH key</code>就可以了</p>
<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>首先，在<strong>根目录</strong>下的<code>_config.yml</code>文件，找到<code>deploy</code>，填上相应信息，repo就是上面创建的仓库地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p>
<p>安装hexo-deployer-git部署发布工具:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>然后就可以使用以下命令发布你的博客了，第一次发布会让你输入Github 的邮箱和密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>这里贴一下Hexo常用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo init # 初始化目录</span><br><span class="line">hexo server 或 hexo s # 本地服务器预览</span><br><span class="line">hexo new &quot;postName&quot; 或 hexo n &quot;postName&quot; # 新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; 或 hexo n &quot;pageName&quot; # 新建页面</span><br><span class="line">hexo generate 或 hexo g # 生成网页在 public 目录有整个网站的文件</span><br><span class="line">hexo deploy 或 hexo d # 部署.deploy目录</span><br><span class="line">hexo clean # 清除缓存</span><br></pre></td></tr></table></figure></p>
<h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>现在，浏览器输入<code>https://username.github.io/</code>我的就是<code>https://jianfengy.github.io/</code>就能查看你的博客了。</p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu配置JDK、MySQL和Tomcat遇到的一些坑]]></title>
      <url>/Ubuntu/Ubuntu%E9%85%8D%E7%BD%AEJDK%E3%80%81MySQL%E5%92%8CTomcat%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>之前买了阿里云的Ubuntu服务器，安装JDK、MySQL和Tomcat的时候遇到了一些问题，折腾了挺长时间，这里是一些记录。</p>
<h3 id="安装配置JDK"><a href="#安装配置JDK" class="headerlink" title="安装配置JDK"></a>安装配置JDK</h3><p>windows上下载的<code>jdk-8u161-linux-i586.tar.gz</code>用xshell执行<code>rz</code>命令上传到阿里云的ubuntu，然后执行<code>mkdir /usr/java</code>建一个文件夹，再执行<code>tar zxvf jdk-8u161-linux-i586.tar.gz -C /usr/java</code>解压到java目录下，<br>之后执行<code>vim ~/.bashrc</code>在文件尾添加以下内容设置环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_151</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:&#123;JAVA_HOME&#125;/lib:&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=&#123;JAVA_HOME&#125;/bin:PATH</span><br></pre></td></tr></table></figure></p>
<p>这里遇到了报错<code>-bash: java/ jdk1.8.0_131/bin/java: cannot execute binary file</code>，是因为我下载的JDK是64位的，而ubuntu是32位的…使用<code>getconf LONG_BIT</code>命令可以查看linux位数。</p>
<h3 id="安装配置Mysql"><a href="#安装配置Mysql" class="headerlink" title="安装配置Mysql"></a>安装配置Mysql</h3><p>安装时有遇到<code>Err http://mirrors.aliyun.com/ubuntu 404 Not Found</code>，执行<code>sudo apt-get update</code>就可以了。</p>
<p>网上学到的一个技巧：如果忘记了MySQL账户的密码，文件<code>/etc/mysql/debian.cnf</code>里有个MySQL用户<code>debian-sys-maint</code>。可以<code>mysql -u debian-sys-maint -p</code>使用文件提供的密码登录MySQL修改root的密码。</p>
<p>修改MySQL密码时因为设置的密码过于简单会报错<code>Your password does not satisfy the current policy requirements</code>，处理如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update mysql.user set authentication_string=password(&apos;123456&apos;) where user=&apos;root&apos; and Host =&apos;localhost&apos;;</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password_policy=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password_length=4;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update mysql.user set authentication_string=password(&apos;123456&apos;) where user=&apos;root&apos; and Host =&apos;localhost&apos;;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 1</span><br></pre></td></tr></table></figure></p>
<h3 id="安装配置tomcat"><a href="#安装配置tomcat" class="headerlink" title="安装配置tomcat"></a>安装配置tomcat</h3><p>安装运行之后不能使用外网访问，执行<code>ufw allow 8080</code>允许外网可以访问8080端口<br>然后配置阿里云安全组，找到自己的实例，点击<strong>更多</strong>-<strong>安全组配置</strong>-<strong>配置规则</strong>-<strong>添加安全组规则</strong>配置<strong>端口范围</strong><code>8080/8080</code>，<strong>授权对象</strong><code>0.0.0.0/0</code>之后就可以了。</p>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> JDK </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySql学习笔记]]></title>
      <url>/MySQL/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>这是我之前在慕课网学习 <a href="https://www.imooc.com/learn/122" target="_blank" rel="noopener">与MySQL的零距离接触</a> 时的笔记，整理了一下发上来。</p>
<h3 id="修改MySQL提示符"><a href="#修改MySQL提示符" class="headerlink" title="修改MySQL提示符"></a>修改MySQL提示符</h3><table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\p</td>
<td style="text-align:center">完整的日期</td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td style="text-align:center">当前数据库</td>
</tr>
<tr>
<td style="text-align:center">\h</td>
<td style="text-align:center">服务器名称</td>
</tr>
<tr>
<td style="text-align:center">\u</td>
<td style="text-align:center">当前用户</td>
</tr>
</tbody>
</table>
<p>各个参数可以结合使用。如<code>prompt \u@\h \d&gt;</code></p>
<ul>
<li><p>连接客户端时指定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 --prompt \h</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接上客户端后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROMPT &quot;提示符&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h3><ul>
<li>显示当前服务器版本<code>SELECT VERSION();</code></li>
<li>显示当前日期时间<code>SELECT NOW();</code></li>
<li>显示当前用户<code>SELECT USER();</code></li>
<li>可用<code>SHOW WARNINGS;</code>查看警告信息</li>
</ul>
<h3 id="MySQL语句规范"><a href="#MySQL语句规范" class="headerlink" title="MySQL语句规范"></a>MySQL语句规范</h3><ul>
<li>关键字与函数名称全部大写</li>
<li>数据库名称、表名称、字段名称全部小写</li>
<li>SQL语句必须以分号结尾</li>
</ul>
<h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><blockquote>
<p><strong>“{}”表示必选项， “|”表示或， “[]”表示可选项</strong></p>
</blockquote>
<ul>
<li>创建数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset_name;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS db_name CHARACTER SET utf8;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>查看当前服务器下数据表列表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW &#123;DATABASES | SCHEMAS&#125; [LIKE &apos;pattern&apos; | WHERE expr];</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER &#123;DATABASE | SCHEMA&#125; [db_name] [DEFAULT] CHARACTER SET [=] charset_name;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE db_name CHARACTER SET = gbk;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>删除数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP &#123;DATABASE | SCHEMA&#125; [IF EXISTS] db_name;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>整型</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">字节 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TINYINT</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">SMALLINT</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMINT</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">INT</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">BIGINT</td>
<td style="text-align:center">8</td>
</tr>
</tbody>
</table>
<ul>
<li>浮点型<ul>
<li>FLOAT[(M,D)]</li>
<li>DOUBLE[(M,D)]</li>
</ul>
</li>
</ul>
<p><em>M是数字总位数，D是小数点后面的位数。</em></p>
<ul>
<li>日期时间型</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">列类型</th>
<th style="text-align:center">存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">YEAR</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">TIME</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">DATE</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">DATETIME</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">TIMESTAMP</td>
<td style="text-align:center">4</td>
</tr>
</tbody>
</table>
<ul>
<li>字符型</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">列类型</th>
<th style="text-align:center">存储需求</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CHAR(M)</td>
<td style="text-align:center">M个字节，0&lt;=M&lt;=255</td>
</tr>
<tr>
<td style="text-align:center">VARCHAR(M)</td>
<td style="text-align:center">L+1个字节，其中L&lt;=M且0&lt;=M&lt;=65535</td>
</tr>
<tr>
<td style="text-align:center">TINYTEXT</td>
<td style="text-align:center">L+1个字节，其中L&lt;2^8</td>
</tr>
<tr>
<td style="text-align:center">TEXT</td>
<td style="text-align:center">L+2个字节，其中L&lt;2^16</td>
</tr>
<tr>
<td style="text-align:center">MEDIUMTEXT</td>
<td style="text-align:center">L+3个字节，其中L&lt;2^24</td>
</tr>
<tr>
<td style="text-align:center">LONGTEXT</td>
<td style="text-align:center">L+4个字节，其中L&lt;2^32</td>
</tr>
<tr>
<td style="text-align:center">ENUM(‘value1’,’value2’,…)</td>
<td style="text-align:center">1或2个字节，取决于枚举值的个数(最多65536个值)</td>
</tr>
<tr>
<td style="text-align:center">SET(‘value1’,’value2’,…)</td>
<td style="text-align:center">1、2、3、4或8个字节，取决于set成员数目(最多64个成员)</td>
</tr>
</tbody>
</table>
<h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] table_name (</span><br><span class="line">column_name data_type,</span><br><span class="line">...</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">username VARCHAR(20),</span><br><span class="line">age TINYINT UNSIGNED,</span><br><span class="line">salary FLOAT(8,2) UNSIGNED</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p><code>UNSIGNED</code>表示无符号位，即始终为正数。使用<code>SHOW CREATE TABLE table_name;</code>可以查看建表语句</p>
<h4 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES [FROM db_name] [LIKE &apos;pattern&apos; | WHERE expr];</span><br></pre></td></tr></table></figure>
<h4 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW COLUMNS FROM table_name;</span><br></pre></td></tr></table></figure>
<p>或：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC table_name;</span><br></pre></td></tr></table></figure></p>
<h4 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT [INTO] table_name[(col_name,...)] VALUES(val,...);</span><br></pre></td></tr></table></figure>
<h4 id="查找记录"><a href="#查找记录" class="headerlink" title="查找记录"></a>查找记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT expr,... FROM table_name;</span><br></pre></td></tr></table></figure>
<h3 id="空值与非空"><a href="#空值与非空" class="headerlink" title="空值与非空"></a>空值与非空</h3><ul>
<li><code>NULL</code>，字段值可以为空(可以不写，默认可以为空)</li>
<li><code>NOT NULL</code>，字段值禁止为空</li>
</ul>
<h3 id="自动编号"><a href="#自动编号" class="headerlink" title="自动编号"></a>自动编号</h3><p><code>AUTO_INCREMENT</code> ,必须与主键组合使用，默认情况下，起始值为1，每次增量为1，不需要赋值</p>
<h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p><code>PRIMARY KEY</code> ,每张表只能存在一个主键,用于保证记录的唯一性(不能有重复值)，主键自动为<code>NOT NULL</code></p>
<h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p><code>UNIQUE KEY</code> ,可以保证记录唯一性，唯一约束的字段可以为空(<code>NULL</code>)，每张表可以存在多个唯一约束</p>
<h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><p><code>DEFAULT</code> ,默认值，插入记录时，如果没有明确为字段复制，则自动赋予默认值</p>
<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>作用：保证数据的一致性、完整性；实现一对一或一对多关系</p>
<p>要求：</p>
<ul>
<li>父表（子表所参照的表）和子表（具有外键列的表）必须使用相同的存储引擎（InnoDB），且禁止使用临时表</li>
<li>外键列（有<code>FOREIGN KEY</code>关键字的列）和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同；而字符的长度可以不同。否则会报错<code>(errorno：150)</code></li>
<li>外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL会自动创建索引（主键都会自动创建索引）.以网格形式查看索引：<code>SHOW INDEXES FROM db_name\G;</code></li>
</ul>
<p>编辑数据表默认存储引擎在安装MySQL的磁盘的<figure class="highlight plain"><figcaption><span>Server 5.7\my.ini```文件里，修改为```default-storage-engine</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例：</span><br></pre></td></tr></table></figure></p>
<p>CREATE TABLE provinces(<br>id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,<br>pname VARCHAR(20) NOT NULL<br>);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">CREATE TABLE users(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(20) NOT NULL,</span><br><span class="line">pid SMALLINT UNSIGNED,</span><br><span class="line">FOREIGN KEY (pid) REFERENCES provinces (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<h3 id="外键约束的参照操作"><a href="#外键约束的参照操作" class="headerlink" title="外键约束的参照操作"></a>外键约束的参照操作</h3><ul>
<li><code>CASCADE</code>：从父表删除或更新且自动删除或更新子表中匹配的行</li>
<li><code>SET NULL</code>：从父表删除或更新行，并设置子表中的外键列为<code>NULL</code>。如果适用此项，必须保证兹表列没有制定<code>NOT NULL</code></li>
<li><code>RESTRICT</code>：拒绝对父表的删除或更新操作</li>
<li><code>NO ACTION</code>：标准SQL的关键字，在MySQL中与<code>RESTRICT</code>相同</li>
</ul>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users1(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(10) NOT NULL,</span><br><span class="line">pid SMALLINT UNSIGNED,</span><br><span class="line">FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>表示级联删除，此时删除provinces表中的记录，user1中相关的记录也会被删除，级联更新<code>ON UPDATE CASCADE</code>同理</p>
<h3 id="表级约束与列级约束"><a href="#表级约束与列级约束" class="headerlink" title="表级约束与列级约束"></a>表级约束与列级约束</h3><ul>
<li>对一个数据列建立的约束，称为列级约束。既可以在列定义时声明，也可以在列定义后声明（<code>NOT NULL</code>和<code>DEFAULT</code>约束只有列级约束，其他几种约束则可以有表级也可以有列级约束）</li>
<li>对多个数据列建立的约束，称为表级约束。只能在列定义后声明</li>
</ul>
<h3 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h3><h4 id="添加单列"><a href="#添加单列" class="headerlink" title="添加单列"></a>添加单列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [COLUMN] column_name column_definition [FIRST | AFTER column_name;</span><br></pre></td></tr></table></figure>
<p>其中，<code>FIRST</code>指把新列放在最前面，<code>AFTER</code>指把新列放在指定列，不加此参数默认添加到所有列最后面</p>
<h4 id="添加多列"><a href="#添加多列" class="headerlink" title="添加多列"></a>添加多列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [COLUMN] (column_name column_definition, ...);</span><br></pre></td></tr></table></figure>
<p>添加多列时，要加小括号，且不能制定添加的位置</p>
<h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP [COLUMN] column_name;</span><br></pre></td></tr></table></figure>
<p>可以同时操作几个语句，用逗号隔开,如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP [COLUMN] column_name,DROP [COLUMN] column_name,ADDADD [COLUMN] column_name column_definition;</span><br></pre></td></tr></table></figure></p>
<h4 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name, ...);</span><br></pre></td></tr></table></figure>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD CONSTRAINT PK_users2_id PRIMARY KEY (id);</span><br></pre></td></tr></table></figure></p>
<h4 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>
<h4 id="添加唯一约束"><a href="#添加唯一约束" class="headerlink" title="添加唯一约束"></a>添加唯一约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY] [index_name] [index_type] (index_col_name, ...);</span><br></pre></td></tr></table></figure>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD UNIQUE (username);</span><br></pre></td></tr></table></figure></p>
<h4 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h4><p>要删除唯一约束需要先知道约束的名字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEXES FROM table_name\G;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP &#123;INDEX | KEY&#125; index_name;</span><br></pre></td></tr></table></figure>
<h4 id="添加外键约束"><a href="#添加外键约束" class="headerlink" title="添加外键约束"></a>添加外键约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name, ...) reference_difinition;</span><br></pre></td></tr></table></figure>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD FOREIGN KEY (pid) REFERENCES provinces (id);</span><br></pre></td></tr></table></figure></p>
<h4 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h4><p>删除外键约束也要先知道约束的名字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE table_name;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP FOREIGN KEY fk_symbol;</span><br></pre></td></tr></table></figure>
<h4 id="添加-删除默认约束"><a href="#添加-删除默认约束" class="headerlink" title="添加/删除默认约束"></a>添加/删除默认约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ALTER [COLUMN] col_name &#123;SET DEFAULT literal | DROP DEFAULT&#125;;</span><br></pre></td></tr></table></figure>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ALTER age SET DEFAULT 15;</span><br><span class="line">ALTER TABLE users2 ALTER age DROP DEFAULT;</span><br></pre></td></tr></table></figure></p>
<h4 id="修改列定义"><a href="#修改列定义" class="headerlink" title="修改列定义"></a>修改列定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name MODIFY [COLUMN] col_name column_difinition [FIRST | AFTER col_name];</span><br></pre></td></tr></table></figure>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST;</span><br></pre></td></tr></table></figure></p>
<p><strong>注意：</strong> 由于存储范围不同，数据类型由大类型改为小类型时可能会导致数据丢失</p>
<h4 id="修改列名称"><a href="#修改列名称" class="headerlink" title="修改列名称"></a>修改列名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name CHANGE [COLUMN] old_col_name new_col_name column_difinition [FIRST | AFTER col_name];</span><br></pre></td></tr></table></figure>
<p>使用<code>CHANGE</code>语句既可以修改列名称也可以修改列定义</p>
<h4 id="修改数据表名"><a href="#修改数据表名" class="headerlink" title="修改数据表名"></a>修改数据表名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name RENAME [TO | AS] new_table_name;</span><br></pre></td></tr></table></figure>
<p>或：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE table_name TO new_table_name [, table_name2 TO new_table_name2] ... ;</span><br></pre></td></tr></table></figure></p>
<p><code>RENAME TABLE</code>这个语句可以修改多个数据表的名字</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 RENAME users3;</span><br><span class="line">RENAME TABLE users3 TO users2,users1 TO users4;</span><br></pre></td></tr></table></figure></p>
<p>尽量少使用修改数据列或数据表名的命令，因为在创建了索引或使用了视图或存储过程后，表名和列名被引用的情况下，更名可能会导致视图等无法正常工作</p>
<h3 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h3><h4 id="插入记录-1"><a href="#插入记录-1" class="headerlink" title="插入记录"></a>插入记录</h4><p>第一种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT [INTO] table_name [(col_name, ...)] &#123;VALUES | VALUE&#125; (&#123;expr | DEFAULE&#125;,...),(...),...;</span><br></pre></td></tr></table></figure></p>
<p>插入的值可以写数学表达式也可以写一些函数如<code>md5(&#39;123&#39;)</code>，也可以一次插入多条记录<br>插入时把<code>AUTO_INCREMENT</code>的字段赋值为<code>NULL</code>或<code>DEFAULT</code>都会自动递增</p>
<p>第二种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT [INTO] table_name SET col_name=&#123;expr | DEFAULT&#125;,...;</span><br></pre></td></tr></table></figure></p>
<p>与第一种方式的区别在于，此方法可以使用<code>子查询(SubQuery)</code>，而且一次只能插入一条记录</p>
<p>第三种方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT [INTO] table_name [(col_name,...)] SELECT ...;</span><br></pre></td></tr></table></figure>
<p>此方法可以将<code>SELECT</code>查询结果插入到指定数据表，见下文子查询</p>
<h4 id="更新记录（单表更新）"><a href="#更新记录（单表更新）" class="headerlink" title="更新记录（单表更新）"></a>更新记录（单表更新）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE [LOW_PRIORITY] [IGNORE] table_reference SET col_name1=&#123;expr1 | DEFAULT&#125; [, col_name2=&#123;expr2 | DEFAULT&#125;] ... [WHERE where_condition];</span><br></pre></td></tr></table></figure>
<p>可以一次更新多条记录，不加<code>WHERE</code>会更新所有记录</p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET age = age + 10 WHERE id % 2 = 0;</span><br></pre></td></tr></table></figure></p>
<h4 id="删除记录（单表删除）"><a href="#删除记录（单表删除）" class="headerlink" title="删除记录（单表删除）"></a>删除记录（单表删除）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE where_condition];</span><br></pre></td></tr></table></figure>
<h4 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT select_expr [, select_expr ...]</span><br><span class="line">[</span><br><span class="line">    FROM table_references</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [GROUP BY &#123;col_name | position&#125; [ASC | DESC],...]</span><br><span class="line">    [HAVING where_condition]</span><br><span class="line">    [ORDER BY &#123;col_name | expr |position&#125; [ASC | DESC],...]</span><br><span class="line">    [LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;]</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h5 id="查询表达式select-expr："><a href="#查询表达式select-expr：" class="headerlink" title="查询表达式select_expr："></a>查询表达式<code>select_expr</code>：</h5><ul>
<li>每一个表达式表示想要的一列，必须有至少一个</li>
<li>多个列之间以英文逗号分隔</li>
<li>星号<code>(*)</code>表示所有列。<code>table_name.*</code>可以表示命名表的所有列</li>
<li>查询表达式可以使用<code>[AS] alias_name</code>为其赋予别名</li>
<li>别名可用于<code>GROUP BY, ORDER BY</code>或<code>HAVING</code>子句</li>
</ul>
<h5 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h5><p>对记录进行过滤，如果没有指定<code>WHERE</code>子句，则显示所有记录。在<code>WHERE</code>表达式中，可以使用MySQL支持的函数或运算符</p>
<h5 id="查询结果分组"><a href="#查询结果分组" class="headerlink" title="查询结果分组"></a>查询结果分组</h5><p><code>[GROUP BY {col_name | position} [ASC | DESC],...]</code>，<code>ASC</code>为升序<code>DESC</code>为降序，默认是升序</p>
<h5 id="分组条件"><a href="#分组条件" class="headerlink" title="分组条件"></a>分组条件</h5><p><code>[HAVING where_condition]</code>,条件中若使用字段，要保证字段出现在<code>select_expr</code>中，或者使用聚合函数，如<code>count()</code>等</p>
<h5 id="对查询结果进行排序"><a href="#对查询结果进行排序" class="headerlink" title="对查询结果进行排序"></a>对查询结果进行排序</h5><p><code>[ORDER BY {col_name | expr |position} [ASC | DESC],...]</code>，<code>position</code>指字段在<code>select_expr</code>中出现的位置，推荐尽量直接指定字段名</p>
<h5 id="限制查询结果返回的数量"><a href="#限制查询结果返回的数量" class="headerlink" title="限制查询结果返回的数量"></a>限制查询结果返回的数量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;]</span><br></pre></td></tr></table></figure>
<p>例：<br><code>SELECT * FROM users LIMIT 3,2;</code>表示从第四条开始（编号从0开始，且顺序是查询结果的顺序，受<code>ORDER BY</code>等影响），返回共两条数据</p>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><code>子查询(SubQuery)</code> 是指出现在其他SQL语句内的<code>SELECT</code>子句<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t1 WHERE col1 = (SELECT col2 FROM t2);</span><br></pre></td></tr></table></figure></p>
<p>其中 <code>SELECT * FROM t1</code> 称为 <code>Outer Query[外查询](或者Outer Statement)</code> ,  <code>SELECT col2 FROM t2</code> 称为 <code>SubQuery[子查询]</code>。</p>
<ul>
<li>子查询是嵌套在外查询内部，也有可能在子查询内部再嵌套子查询。而且子查询必须出现在<strong>圆括号</strong>之间</li>
<li>子查询可以包含多个关键字或条件，如<code>DISTINCT, GROUP BY, ORDER BY, LIMIT, 函数等</code></li>
<li>子查询的外层查询可以是<code>SELECT, INSERT, UPDATE, SET或DO</code></li>
<li>子查询的返回值可以是标量、一行、一列或子查询<h4 id="使用比较运算符的子查询"><a href="#使用比较运算符的子查询" class="headerlink" title="使用比较运算符的子查询"></a>使用比较运算符的子查询</h4>比较运算符：<code>=, &gt;, &lt;, &gt;=, &lt;=, &lt;&gt;, !=, &lt;=&gt;</code></li>
</ul>
<p>语法结构：<code>operand comparison_operator [ANY | SOME | ALL] subquery</code></p>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price &gt; (SELECT ROUND(AVG(goods_price),2) AS avg_price FROM tdb_goods) ORDER BY goods_price DESC;</span><br></pre></td></tr></table></figure></p>
<p><code>AVG(), MAX(), MIN(), COUNT(), SUM()</code>等为聚合函数，聚合函数只有一个返回值<br>使用比较运算符时，如果子查询返回值多于一行记录可能会报错，这时需要用<code>ANY, SOME或ALL</code>修饰：</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">ANY</th>
<th style="text-align:center">SOME</th>
<th style="text-align:center">ALL</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&gt;, &gt;=</td>
<td style="text-align:center">最小值</td>
<td style="text-align:center">最小值</td>
<td style="text-align:center">最大值</td>
</tr>
<tr>
<td style="text-align:center">&lt;, &lt;=</td>
<td style="text-align:center">最大值</td>
<td style="text-align:center">最大值</td>
<td style="text-align:center">最小值</td>
</tr>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">任意值</td>
<td style="text-align:center">任意值</td>
</tr>
<tr>
<td style="text-align:center">&lt;&gt;, !=</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">任意值</td>
</tr>
</tbody>
</table>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price = ANY(SELECT goods_price FROM tdb_goods WHERE goods_cate = &apos;超级本&apos;) ORDER BY goods_price DESC;</span><br></pre></td></tr></table></figure></p>
<h4 id="使用-NOT-IN-的子查询"><a href="#使用-NOT-IN-的子查询" class="headerlink" title="使用[NOT] IN 的子查询"></a>使用<code>[NOT] IN</code> 的子查询</h4><p>语法结构：<code>operand comparison_operator [NOT] IN (subquery)</code></p>
<p><strong>注意：</strong> <code>=ANY</code>和<code>=SOME</code>运算符与<code>IN</code>等效；<code>!=ALL或&lt;&gt;ALL</code>运算符与<code>NOT IN</code>等效</p>
<h4 id="使用-NOT-EXISTS的子查询"><a href="#使用-NOT-EXISTS的子查询" class="headerlink" title="使用[NOT] EXISTS的子查询"></a>使用<code>[NOT] EXISTS</code>的子查询</h4><p>如果子查询返回任何行，<code>EXISTS</code>将返回<code>TRUE</code>，否则返回<code>FALSE</code></p>
<h4 id="使用INSERT-SELECT插入记录"><a href="#使用INSERT-SELECT插入记录" class="headerlink" title="使用INSERT...SELECT插入记录"></a>使用<code>INSERT...SELECT</code>插入记录</h4><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT tdb_goods_cates (cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;</span><br></pre></td></tr></table></figure></p>
<h3 id="多表更新"><a href="#多表更新" class="headerlink" title="多表更新"></a>多表更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_references SET col_name1=&#123;expr1 |DEFAULT&#125; [, col_name2=&#123;expr2 | DEFAULT&#125;]... [WHERE where_condition];</span><br></pre></td></tr></table></figure>
<p>多表更新时可能会出现字段名混淆，这时候一般会使用<code>AS</code>给表起别名，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE tdb_goods AS  g  INNER JOIN tdb_goods_brands AS b ON g.brand_name = b.brand_name SET g.brand_name = b.brand_id;</span><br></pre></td></tr></table></figure>
<h3 id="创建表同时插入记录CREATE-SELECT"><a href="#创建表同时插入记录CREATE-SELECT" class="headerlink" title="创建表同时插入记录CREATE...SELECT"></a>创建表同时插入记录<code>CREATE...SELECT</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] table_name [&#123;create_definition,...)] select_statement;</span><br></pre></td></tr></table></figure>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tdb_goods_brands (</span><br><span class="line">brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">brand_name VARCHAR(40) NOT NULL</span><br><span class="line">) SELECT brand_name FROM tdb_goods GROUP BY brand_name;</span><br></pre></td></tr></table></figure></p>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>MySQL在<code>SELECT</code>语句、多表更新、多表删除语句中支持<code>JOIN</code>操作</p>
<p>连接类型：</p>
<ul>
<li><code>INNER JOIN</code>内连接。MySQL中，<code>JOIN, CROSS JOIN和INNER JOIN</code>是等价的</li>
<li><code>LEFT [OUTER] JOIN</code>左外连接</li>
<li><code>RIGHT [OUTER] JOIN</code>右外连接</li>
</ul>
<p>连接条件<code>ON</code>或<code>WHERE</code>：</p>
<ul>
<li>通常使用<code>ON</code>关键字来设定连接条件</li>
<li>使用<code>WHERE</code>关键字进行结果集记录的过滤</li>
</ul>
<p>语法结构：<code>table_reference {[INNER | CROSS] JOIN | {LEFT | RIGHT} [OUTER] JOIN} table_reference ON conditional_expr</code></p>
<h4 id="数据表参照table-reference"><a href="#数据表参照table-reference" class="headerlink" title="数据表参照table_reference"></a>数据表参照<code>table_reference</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table_name [[AS] alias] | table_subquery [AS] alias</span><br></pre></td></tr></table></figure>
<ul>
<li>数据表可以使用<code>table_name AS alias_name</code>或<code>table_name alias_name</code>赋予别名</li>
<li><code>table_subquery</code>可以作为子查询使用在<code>FROM</code>子句中，这样的子查询必须为其赋予别名</li>
</ul>
<h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>显示左表及右表符合连接条件的记录，即两表的公共部分</p>
<h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>显示左表的全部记录及右表符合连接条件的记录</p>
<h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><p>显示右表的全部记录及左表符合连接条件的记录</p>
<h4 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h4><p>通过<strong>内连接</strong>实现查询所有商品的详细信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g</span><br><span class="line">INNER JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id</span><br><span class="line">INNER JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G;</span><br></pre></td></tr></table></figure></p>
<p>通过<strong>左外连接</strong>实现查询所有商品的详细信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g</span><br><span class="line">LEFT JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id</span><br><span class="line">LEFT JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G;</span><br></pre></td></tr></table></figure></p>
<p>通过<strong>右外连接</strong>实现查询所有商品的详细信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g</span><br><span class="line">RIGHT JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id</span><br><span class="line">RIGHT JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G;</span><br></pre></td></tr></table></figure></p>
<h4 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h4><ol>
<li>对于左外连接<code>A LEFT JOIN B join_condition</code>（右外连接类似）：<ul>
<li>数据表B的结果集依赖数据表A</li>
<li>数据表A的结果集根据左连接条件以来所有数据表（B表除外）</li>
<li>左外连接条件决定如何检索数据表B（在没有制定<code>WHERE</code>条件的情况下）</li>
<li>如果数据表A的某条记录符合<code>WHERE</code>条件，但是数据表B不存在符合连接条件的记录，将生成一个所有列为空的额外B行</li>
</ul>
</li>
<li>如果使用内连接查找的记录在连接数据表中不存在，并且在<code>WHERE</code>子句中尝试以下操作：<code>col_name IS NULL</code>时，如果<code>col_name</code>被定义为<code>NOT NULL</code>，MySQL将在找到符合连接条件的记录后停止搜索更多的行</li>
</ol>
<h3 id="无限分类的数据表设计"><a href="#无限分类的数据表设计" class="headerlink" title="无限分类的数据表设计"></a>无限分类的数据表设计</h3><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tdb_goods_types(</span><br><span class="line">type_id   SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">type_name VARCHAR(20) NOT NULL,</span><br><span class="line">parent_id SMALLINT UNSIGNED NOT NULL DEFAULT 0</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p><code>parent_id</code> 就是该类的父类，来自 <code>type_id</code>，没有父类（即最大类）的 <code>type_id</code>为0</p>
<p>这种数据表的查询用到<strong>自身连接</strong>（同一个数据表对其自身进行连接）如：</p>
<ul>
<li><p>查找所有分类及其父类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT s.type_id,s.type_name,p.type_name FROM tdb_goods_types AS s LEFT JOIN tdb_goods_types AS  p ON s.parent_id = p.type_id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找所有分类及其子类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT p.type_id,p.type_name,s.type_name FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS  s ON s.parent_id = p.type_id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找所有分类及其子类的数目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT p.type_id,p.type_name,count(s.type_name) AS children_count FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS s ON s.parent_id = p.type_id GROUP BY p.type_name ORDER BY p.type_id;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="多表删除"><a href="#多表删除" class="headerlink" title="多表删除"></a>多表删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE table_name[.*] [, table_name[.*]] ... FROM table_references [WHERE where_condition];</span><br></pre></td></tr></table></figure>
<p>例如删除重复记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) &gt;= 2 ) AS t2  ON t1.goods_name = t2.goods_name  WHERE t1.goods_id &gt; t2.goods_id;</span><br></pre></td></tr></table></figure></p>
<h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><table>
<thead>
<tr>
<th style="text-align:center">函数名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CONCAT()</td>
<td style="text-align:center">字符连接</td>
</tr>
<tr>
<td style="text-align:center">CONCAT_WS()</td>
<td style="text-align:center">使用指定的分隔符进行字符连接</td>
</tr>
<tr>
<td style="text-align:center">FORMAT()</td>
<td style="text-align:center">数字格式化,此函数返回值是字符型</td>
</tr>
<tr>
<td style="text-align:center">LOWER()</td>
<td style="text-align:center">转换成小写字母</td>
</tr>
<tr>
<td style="text-align:center">UPPER()</td>
<td style="text-align:center">转换成大写字母</td>
</tr>
<tr>
<td style="text-align:center">LEFT()</td>
<td style="text-align:center">获取左侧字符</td>
</tr>
<tr>
<td style="text-align:center">RIGHT()</td>
<td style="text-align:center">获取右侧字符</td>
</tr>
<tr>
<td style="text-align:center">LENGTH()</td>
<td style="text-align:center">获取字符串长度（包括空格）</td>
</tr>
<tr>
<td style="text-align:center">LTRIM()</td>
<td style="text-align:center">删除字符串的前导空格</td>
</tr>
<tr>
<td style="text-align:center">RTRIM()</td>
<td style="text-align:center">删除字符串的后续空格</td>
</tr>
<tr>
<td style="text-align:center">TRIM()</td>
<td style="text-align:center">删除前导和后续空格</td>
</tr>
<tr>
<td style="text-align:center">SUBSTRING()</td>
<td style="text-align:center">字符串截取</td>
</tr>
<tr>
<td style="text-align:center">[NOT] LIKE</td>
<td style="text-align:center">模式匹配</td>
</tr>
<tr>
<td style="text-align:center">REPLACE()</td>
<td style="text-align:center">字符串替换</td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong>表示字符位置的数字是从1开始而不是从0开始的，起始位置的数值可以是负值，表示从后往前数<br>例：</p>
<p><code>SELECT CONCAT_WS(&#39;|&#39;,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;);</code>结果：<code>A|B|C</code></p>
<p><code>SELECT FORMAT(12560.75, 1);</code>结果：<code>12,560.8</code></p>
<p><code>SELECT LOWER(LEFT(&#39;MySQL&#39;, 2));</code>结果：<code>my</code>。表示把截取的前两位字符变为小写</p>
<p><code>SELECT TRIM(LEADING &#39;?&#39; FROM &#39;??My??SQL???&#39;);</code>结果：<code>My??SQL???</code>。这里的<code>LEADING</code>表示删除前导的指定字符，<code>TRAILING</code>表示删除后续，<code>BOTH</code>表示前导和后续都删除</p>
<p><code>SELECT REPLACE(&#39;??My??SQL???&#39;, &#39;?&#39;, &#39;&#39;);</code>结果：<code>MySQL</code></p>
<p><code>SELECT SUBSTRING(&#39;MySQL&#39;, 1, 2);</code>结果：<code>My</code>。这里表示从第一位截取，截取两位</p>
<p><code>SELECT &#39;MYSQL&#39; LIKE &#39;M%&#39;;</code>结果：<code>1</code>。<code>1</code>表示<code>TRUE</code>，<code>%</code>表示<strong>任意0个或多个</strong>字符，另外还有<code>_</code>下划线表示<strong>任意一个</strong>字符</p>
<p>假设数据表<code>test</code>有个<code>first_name</code>为<code>tom%</code>的数据，要查找出此记录，就要<code>SELECT * FROM test WHERE first_name LIKE &#39;%1%%&#39; ESCAPE &#39;1&#39;;</code>，表示1后面的<code>%</code>为普通字符串而非通配符</p>
<h3 id="数值运算符与函数"><a href="#数值运算符与函数" class="headerlink" title="数值运算符与函数"></a>数值运算符与函数</h3><table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CEIL()</td>
<td style="text-align:center">进一取整（向上取整）</td>
</tr>
<tr>
<td style="text-align:center">DIV</td>
<td style="text-align:center">整除，如<code>3 DIV 4</code>为<code>0</code></td>
</tr>
<tr>
<td style="text-align:center">FLOOR()</td>
<td style="text-align:center">舍一取整（向下取整）</td>
</tr>
<tr>
<td style="text-align:center">MOD</td>
<td style="text-align:center">取余数（取模，与<code>%</code>相同）</td>
</tr>
<tr>
<td style="text-align:center">POWER()</td>
<td style="text-align:center">幂运算</td>
</tr>
<tr>
<td style="text-align:center">ROUND()</td>
<td style="text-align:center">四舍五入</td>
</tr>
<tr>
<td style="text-align:center">TRUNCATE()</td>
<td style="text-align:center">数字截取</td>
</tr>
</tbody>
</table>
<p>例：</p>
<p><code>SELECT POWER(2,3);</code> 结果：<code>8</code></p>
<p><code>SELECT TRUNCATE(125.59,1);</code>结果：<code>125.5</code>。保留小数点后一位，舍去后面的，与四舍五入不同</p>
<h3 id="比较运算符与函数"><a href="#比较运算符与函数" class="headerlink" title="比较运算符与函数"></a>比较运算符与函数</h3><table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">[NOT] BETWEEN…AND…</td>
<td style="text-align:center">[不]在范围之内</td>
</tr>
<tr>
<td style="text-align:center">[NOT] IN()</td>
<td style="text-align:center">[不]在列出值范围内</td>
</tr>
<tr>
<td style="text-align:center">IS [NOT] NULL</td>
<td style="text-align:center">[不]为空</td>
</tr>
</tbody>
</table>
<p>例：</p>
<p><code>SELECT 35 BETWEEN 1 AND 35;</code>结果：<code>1</code></p>
<p><code>SELECT 13 NOT IN(5, 10, 15);</code>结果：<code>1</code></p>
<p><code>SELECT 0 IS NOT NULL;</code>结果：<code>1</code></p>
<h3 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h3><table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">NOW()</td>
<td style="text-align:center">当前日期和时间</td>
</tr>
<tr>
<td style="text-align:center">CURDATE()</td>
<td style="text-align:center">当前日期</td>
</tr>
<tr>
<td style="text-align:center">CURTIME()</td>
<td style="text-align:center">当前时间</td>
</tr>
<tr>
<td style="text-align:center">DATE_ADD()</td>
<td style="text-align:center">日期变化</td>
</tr>
<tr>
<td style="text-align:center">DATEDIFF()</td>
<td style="text-align:center">日期差值</td>
</tr>
<tr>
<td style="text-align:center">DATE_FORMAT()</td>
<td style="text-align:center">日期格式化</td>
</tr>
</tbody>
</table>
<p>例 ：</p>
<p><code>SELECT DATE_ADD(&#39;2017-11-23&#39;, INTERVAL -365 DAY);</code>结果：<code>2016-11-23</code></p>
<p><code>SELECT DATE_ADD(&#39;2017-11-23&#39;, INTERVAL 3 WEEK);</code>结果：<code>2017-12-14</code></p>
<p><code>SELECT DATEDIFF(&#39;2017-11-23&#39;, &#39;2018-11-23&#39;);</code>结果：<code>-365</code></p>
<p><code>SELECT DATE_FORMAT(&#39;2017-11-23&#39;, &#39;%m/%d/%Y&#39;);</code>结果：<code>11/23/2017</code></p>
<h3 id="信息函数"><a href="#信息函数" class="headerlink" title="信息函数"></a>信息函数</h3><table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CONNECTION_ID()</td>
<td style="text-align:center">连接ID</td>
</tr>
<tr>
<td style="text-align:center">DATABASE()</td>
<td style="text-align:center">当前数据库</td>
</tr>
<tr>
<td style="text-align:center">LAST_INSERT_ID()</td>
<td style="text-align:center">最后插入的记录的ID号</td>
</tr>
<tr>
<td style="text-align:center">USER()</td>
<td style="text-align:center">当前用户</td>
</tr>
<tr>
<td style="text-align:center">VERSION()</td>
<td style="text-align:center">版本信息</td>
</tr>
</tbody>
</table>
<p>对于<code>LAST_INSERT_ID()</code>函数，需要数据表里有一个<code>AUTO_INCREMENT</code>的<code>id</code>字段。另外，若是同时插入多条记录，如<code>INSERT test(name,age) VALUES(&#39;Tom&#39;,20),(&#39;Jack&#39;,22);</code>，这个函数只会返回第一个插入的也就是<code>Tom</code>的<code>id</code></p>
<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AVG()</td>
<td style="text-align:center">平均值</td>
</tr>
<tr>
<td style="text-align:center">COUNT()</td>
<td style="text-align:center">计数</td>
</tr>
<tr>
<td style="text-align:center">MAX()</td>
<td style="text-align:center">最大值</td>
</tr>
<tr>
<td style="text-align:center">MIN()</td>
<td style="text-align:center">最小值</td>
</tr>
<tr>
<td style="text-align:center">SUM()</td>
<td style="text-align:center">求和</td>
</tr>
</tbody>
</table>
<p>聚合函数的典型特点：只有一个返回值</p>
<h3 id="信息函数-1"><a href="#信息函数-1" class="headerlink" title="信息函数"></a>信息函数</h3><table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">MD5()</td>
<td style="text-align:center">信息摘要算法</td>
</tr>
<tr>
<td style="text-align:center">PASSWORD()</td>
<td style="text-align:center">密码算法</td>
</tr>
</tbody>
</table>
<p>如果密码是为WEB页面准备的，建议使用<code>MD5()</code>,而<code>PASSWORD()</code>主要用于修改MySQL的用户密码</p>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><ul>
<li>用户自定义函数<code>(user-defined function, UDF)</code>是一种对MySQL扩展的途径，其用法与内置函数相同</li>
<li>两个必要条件：<strong>参数</strong>（可以有0个或多个）、<strong>返回值</strong>（只能有一个）</li>
<li>函数可以返回任意类型的值，同样可以接收这些类型的参数；参数与返回值之间没有必然的内在联系</li>
</ul>
<h4 id="创建自定义函数"><a href="#创建自定义函数" class="headerlink" title="创建自定义函数"></a>创建自定义函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION function_name RETURNS &#123;STRING | INTEGER | REAL | DECIMAL&#125; routine_body;</span><br></pre></td></tr></table></figure>
<p>删除自定义函数用<code>DROP FUNCTION [IF EXISTS] function_name;</code></p>
<p>关于函数体<code>routine_body</code>：</p>
<ul>
<li>函数体由合法的SQL语句构成</li>
<li>函数体可以是简单的<code>SELECT</code>或<code>INSERT</code>语句</li>
<li>函数体如果为复合结构则使用<code>BEGIN...END</code>语句</li>
<li>复合结构可以包含声明、循环、控制结构</li>
</ul>
<p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION f1() RETURNS VARCHAR(30)</span><br><span class="line">RETURN DATE_FORMAT(NOW(),&apos;%Y年%m月%d日 %H点:%i分:%s秒&apos;);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION f2(num1 SMALLINT UNSIGNED, num2 SMALLINT UNSIGNED)</span><br><span class="line">RETURNS FLOAT(10,2) UNSIGNED</span><br><span class="line">RETURN (num1+num2)/2;</span><br></pre></td></tr></table></figure>
<p>有时候需要创建有复合结构函数体的自定义函数，由于分隔符<code>;</code>被认为是SQL语句的结束，所以要先执行<code>DELIMITER //</code>修改SQL语句的结束符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION adduser(username VARCHAR(20))</span><br><span class="line">RETURNS INT UNSIGNED</span><br><span class="line">BEGIN</span><br><span class="line">INSERT test(username) VALUES (username);</span><br><span class="line">RETURN LAST_INSERT_ID();</span><br><span class="line">END</span><br><span class="line">//</span><br></pre></td></tr></table></figure></p>
<p>之后就可以把分隔符修改回来和使用函数了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER ;</span><br><span class="line">SELECT adduser(&apos;Rose&apos;);</span><br></pre></td></tr></table></figure></p>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><ul>
<li>存储过程是SQL语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理</li>
<li>存储过程存储在数据库内，可以由应用程序调用执行，允许用户声明变量以及进行流程控制</li>
<li>存储过程可以接收输入和输出类型的参数且可以存在多个返回值</li>
<li>存储过程只在第一次进行语法分析和编译，以后都直接调用编译结果，省略了编译环节</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>增强SQL语句的功能和灵活性</li>
<li>实现较快的执行速度</li>
<li>减少网络流量</li>
</ul>
<h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE</span><br><span class="line">[DEFINER = &#123;user | CURRENT_USER&#125;]</span><br><span class="line">PROCEDURE sp_name ([proc_parameter[,...]])</span><br><span class="line">[characteristic ...]</span><br><span class="line">routine_body</span><br></pre></td></tr></table></figure>
<ul>
<li><code>DEFINER</code>是创建者，省略的话默认是当前登录到MySQL的用户</li>
<li><code>sp_name</code>是存储过程的名字</li>
<li><code>proc_parameter</code>是参数，可以有0到多个，写法：<code>[IN | OUT | INOUT]param_name type</code>。<strong>注意：</strong> 参数名<strong>不要</strong>和数据表字段名<strong>重名</strong><ul>
<li><code>IN</code>，表示该参数的值必须在调用存储过程时指定，该值不能被返回</li>
<li><code>OUT</code>，表示该参数的值可以被存储过程改变，并且可以被返回</li>
<li><code>INOUT</code>，表示该参数的值在调用时指定，并且可以被改变和返回</li>
</ul>
</li>
<li><p><code>characteristic</code>特性，与自定义函数相似：</p>
<ul>
<li><code>COMMENT</code>：注释</li>
<li><code>CONTAINS SQL</code>：包含SQL语句，但不包含读或写数据的语句</li>
<li><code>NO SQL</code>：不包含SQL语句</li>
<li><code>READS SQL DATA</code>：包含读数据的语句</li>
<li><code>MODIFIES SQL DATA</code>：包含写数据的语句</li>
<li><code>SQL SECURITY {DEFINER | INVOKER}</code>：指明谁有权限来执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMENT &apos;string&apos; | &#123;CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA&#125; | SQL SECURITY &#123;DEFINER | INVOKER&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>routine_body</code>过程体：</p>
<ul>
<li>过程体由合法的SQL语句构成</li>
<li>过程体可以是任意SQL语句（主要指对记录的增删改查及多表连接等而非对数据库数据表本身的修改）</li>
<li>过程体如果为复合结构则使用<code>BEGIN...END</code>语句</li>
<li>复合结构可以包含声明、循环、控制结构</li>
</ul>
</li>
</ul>
<h4 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CALL sp_name([parameter[,...]]);</span><br><span class="line">CALL sp_name[()];</span><br></pre></td></tr></table></figure>
<h4 id="修改存储过程"><a href="#修改存储过程" class="headerlink" title="修改存储过程"></a>修改存储过程</h4><p>和修改自定义函数相似，只能修改以下简单的选项，<strong>不能</strong>修改过程体，要修改过程体只能删除该存储过程然后重新创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER PROCEDURE sp_name [characteristic ...] COMMENT &apos;string&apos; | &#123;CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA&#125; | SQL SECURITY &#123;DEFINER | INVOKER&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><p>删除时不用带参数，只用存储过程名称<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE [IF EXISTS] sp_name;</span><br></pre></td></tr></table></figure></p>
<h4 id="创建不带参数的存储过程"><a href="#创建不带参数的存储过程" class="headerlink" title="创建不带参数的存储过程"></a>创建不带参数的存储过程</h4><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE sp1() SELECT VERSION();</span><br></pre></td></tr></table></figure></p>
<p>调用：因为不带参数，所以<code>CALL sp1;</code>或<code>CALL sp1();</code>都可以</p>
<h4 id="创建带有IN类型参数的存储过程"><a href="#创建带有IN类型参数的存储过程" class="headerlink" title="创建带有IN类型参数的存储过程"></a>创建带有IN类型参数的存储过程</h4><p>和创建自定义函数一样要先使用<code>DELIMITER //</code>修改结束符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE removeUserById(IN p_id INT UNSIGNED)</span><br><span class="line">BEGIN</span><br><span class="line">DELETE FROM test WHERE id = p_id;</span><br><span class="line">END</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></p>
<h4 id="创建带有IN和OUT类型参数的存储过程"><a href="#创建带有IN和OUT类型参数的存储过程" class="headerlink" title="创建带有IN和OUT类型参数的存储过程"></a>创建带有IN和OUT类型参数的存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE removeUserAndReturnUserCount(IN p_id INT UNSIGNED,OUT userCount INT UNSIGNED)</span><br><span class="line">BEGIN</span><br><span class="line">DELETE FROM test WHERE id = p_id;</span><br><span class="line">SELECT count(id) FROM test INTO userCount;</span><br><span class="line">END</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
<p>调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CALL removeUserAndReturnUserCount(37,@nums);</span><br><span class="line">SELECT @nums;</span><br></pre></td></tr></table></figure></p>
<p>其中，<code>@nums</code>是变量，在<code>BEGIN...END</code>间用<code>DECLEAR</code>声明的变量叫局部变量，作用域只在<code>BEGIN...END</code>之间。而且在<code>BEGIN...END</code>间<code>DECLEAR</code>语句必须位于<strong>第一行</strong>。而像上面<code>SELECT...INTO para_name</code>或<code>SET @para_name = ...</code>声明的变量叫用户变量，对当前用户使用的客户端有效</p>
<h4 id="创建带有多个OUT类型参数的存储过程"><a href="#创建带有多个OUT类型参数的存储过程" class="headerlink" title="创建带有多个OUT类型参数的存储过程"></a>创建带有多个OUT类型参数的存储过程</h4><p><code>ROW_COUNT()</code> 函数可以得到被影响（即插入、删除或更新）的记录数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE removeUserByAgeAndReturnInfos(IN p_age SMALLINT UNSIGNED, OUT deleteUsers SMALLINT UNSIGNED, OUT userCounts SMALLINT UNSIGNED)</span><br><span class="line">BEGIN</span><br><span class="line">DELETE FROM test WHERE age = p_age;</span><br><span class="line">SELECT ROW_COUNT() INTO deleteUsers;</span><br><span class="line">SELECT COUNT(id) FROM test INTO userCounts;</span><br><span class="line">END</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></p>
<p>调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CALL removeUserByAgeAndReturnInfos(20,@a,@b);</span><br><span class="line">SELECT @a,@b;</span><br></pre></td></tr></table></figure></p>
<h3 id="存储过程与自定义函数的区别"><a href="#存储过程与自定义函数的区别" class="headerlink" title="存储过程与自定义函数的区别"></a>存储过程与自定义函数的区别</h3><ul>
<li>存储过程实现的功能要复杂一些；而函数的针对性更强（针对表做操作一般使用存储过程）</li>
<li>存储过程可以返回多个值；函数只能有一个返回值</li>
<li>存储过程一般独立来执行；而函数可以作为其他SQL语句的组成部分来出现</li>
</ul>
<p><strong>二者注意事项：</strong></p>
<ul>
<li>创建存储过程或者自定义函数时需要通过<code>delimiter</code>语句修改定界符</li>
<li>如果函数体或过程体有多个语句，需要包含在<code>BEGIN...END</code>语句块中</li>
</ul>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>MySQL可以将数据以不同的技术存储在文件（内存）中，这种技术就称为存储引擎。每一种存储引擎使用不同的存储机制、索引技巧、锁定水平，最终提供广泛且不同的功能</p>
<p>分类：</p>
<ul>
<li>MyISAM</li>
<li>InnoDB</li>
<li>Memory</li>
<li>Archive</li>
<li>CSV（不支持索引）</li>
<li>BlackHole：黑洞引擎，写入的数据都会消失，一般用于做数据复制的中继</li>
</ul>
<h4 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h4><p>当多个连接对记录进行修改时要保证数据的一致性和完整性，就要使用并发控制。处理并发读或并发写时系统会使用锁系统：</p>
<ul>
<li><strong>共享锁</strong>（读锁）：在同一时间段内，多个用户可以读取同一个资源，读取过程中数据不会发生任何变化</li>
<li><strong>排它锁</strong>（写锁）：在任何时候只能有一个用户写入资源，当进行写锁时会阻塞其他的读锁或者写锁操作</li>
</ul>
<p>锁颗粒：</p>
<ul>
<li>表锁，是一种开销最小的锁策略</li>
<li>行锁，是一种开销最大的锁策略</li>
</ul>
<h4 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h4><p>事务用于保证数据库的完整性</p>
<p>事务的特性：</p>
<ul>
<li>原子性(Atomicity)</li>
<li>一致性(Consistency)</li>
<li>隔离性(Isolation)</li>
<li>持久性(Durability)</li>
</ul>
<h4 id="外键和索引"><a href="#外键和索引" class="headerlink" title="外键和索引"></a>外键和索引</h4><p>外键是保证数据一致性的策略；索引是对数据表中一列或多列的值进行排序的一种结构，包括：普通索引、唯一索引、全文索引、btree索引、hash索引……</p>
<h4 id="各种存储引擎的特点"><a href="#各种存储引擎的特点" class="headerlink" title="各种存储引擎的特点"></a>各种存储引擎的特点</h4><table>
<thead>
<tr>
<th style="text-align:center">特点</th>
<th style="text-align:center">MyISAM</th>
<th style="text-align:center">InnoDB</th>
<th style="text-align:center">Memory</th>
<th style="text-align:center">Archive</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">存储限制</td>
<td style="text-align:center">256TB</td>
<td style="text-align:center">64TB</td>
<td style="text-align:center">有</td>
<td style="text-align:center">无</td>
</tr>
<tr>
<td style="text-align:center">事务安全</td>
<td style="text-align:center">-</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">支持索引</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">锁颗粒</td>
<td style="text-align:center">表锁</td>
<td style="text-align:center">行锁</td>
<td style="text-align:center">表锁</td>
<td style="text-align:center">行锁</td>
</tr>
<tr>
<td style="text-align:center">数据压缩</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td style="text-align:center">支持外键</td>
<td style="text-align:center">-</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<p>使用得比较多的是MyISAM和InnoDB。MyISAM适用于事务的处理不多的情况；InnoDB适用于事务处理较多，需要有外键支持的情况</p>
<h4 id="修改存储引擎"><a href="#修改存储引擎" class="headerlink" title="修改存储引擎"></a>修改存储引擎</h4><ul>
<li>通过修改MySQL配置文件实现：<code>default-storage-engine= engine_name</code>，默认是InnoDB</li>
<li>通过创建数据表或修改数据表命令实现：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">)ENGINE = engine_name;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ENGINE [=] engine_name;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
