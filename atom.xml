<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>麻瓜码农</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jeffyang.top/"/>
  <updated>2018-03-03T08:25:00.092Z</updated>
  <id>http://jeffyang.top/</id>
  
  <author>
    <name>Jeff Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kali更新时出现签名无效、Hash和校验不符的问题</title>
    <link href="http://jeffyang.top/Linux/Kali/Kali%E6%9B%B4%E6%96%B0%E6%97%B6%E5%87%BA%E7%8E%B0%E7%AD%BE%E5%90%8D%E6%97%A0%E6%95%88%E3%80%81Hash%E5%92%8C%E6%A0%A1%E9%AA%8C%E4%B8%8D%E7%AC%A6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://jeffyang.top/Linux/Kali/Kali更新时出现签名无效、Hash和校验不符的问题/</id>
    <published>2018-03-03T06:08:00.000Z</published>
    <updated>2018-03-03T08:25:00.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>今天在整我虚拟机上的Kali系统，安装东西的时候出现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E: 有几个软件包无法下载，要不运行 apt-get update 或者加上 --fix-missing 的选项再试试？</span><br></pre></td></tr></table></figure></p><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>然后，使用<code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code>更新的时候，出现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">错误:4 http://mirrors.ustc.edu.cn/kali kali-rolling InRelease</span><br><span class="line">  下列签名无效： EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository &lt;devel@kali.org&gt;</span><br><span class="line">已下载 30.5 kB，耗时 1秒 (24.5 kB/s)</span><br><span class="line">正在读取软件包列表... 完成</span><br><span class="line">W: 校验数字签名时出错。此仓库未被更新，所以仍然使用此前的索引文件。GPG 错误：http://mirrors.ustc.edu.cn/kali kali-rolling InRelease: 下列签名无效： EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository &lt;devel@kali.org&gt;</span><br></pre></td></tr></table></figure></p><p>然后，使用<code>apt-key list</code>查看，发现有个<code>keyring.gpg</code>过期了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/etc/apt/trusted.gpg.d/kali-archive-keyring.gpg</span><br><span class="line">-----------------------------------------------</span><br><span class="line">pub   rsa4096 2012-03-05 [SC] [expired: 2018-02-02]</span><br><span class="line">      44C6 513A 8E4F B3D3 0875  F758 ED44 4FF0 7D8D 0BF6</span><br><span class="line">uid           [ expired] Kali Linux Repository &lt;devel@kali.org&gt;</span><br></pre></td></tr></table></figure></p><p><strong>解决方法</strong>：<br>首先使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://http.kali.org/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2018.1_all.deb</span><br></pre></td></tr></table></figure></p><p>然后运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install ./kali-archive-keyring_2018.1_all.deb</span><br></pre></td></tr></table></figure></p><p>这个问题就解决了</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>但是这个时候再使用<code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code>，又出现了另一个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">E: 无法下载 http://172.17.0.111/cache/7/02/mirrors.ustc.edu.cn/01fbf595fbfd06d37257ada0be178b0b/Sources.gz  Hash 校验和不符</span><br><span class="line">   Hashes of expected file:</span><br><span class="line">    - Filesize:11822681 [weak]</span><br><span class="line">    - SHA256:32a1f422348290dbe259aa9c57ea3c8e9622b4f6e808dcc7694163d3d8622c26</span><br><span class="line">    - SHA1:872723d9ba3977a72101d847ce341c503e681cef [weak]</span><br><span class="line">    - MD5Sum:c4c623d3ec6792e477ef37c62561021a [weak]</span><br><span class="line">   Hashes of received file:</span><br><span class="line">    - SHA256:2ee0958d97d7df9fe0b406f0b18d225125939f0d3699cc3f9b2dd3c948cea941</span><br><span class="line">    - SHA1:fe4abbd5e75606c6ce6df3d87968f32bd16c9027 [weak]</span><br><span class="line">    - MD5Sum:5c7119257cd72146aa5f4d70daf41e4b [weak]</span><br><span class="line">    - Filesize:11702644 [weak]</span><br><span class="line">   Last modification reported: Fri, 26 Jan 2018 00:03:11 +0000</span><br><span class="line">   Release file created at: Sat, 03 Mar 2018 00:03:33 +0000</span><br><span class="line">E: 部分索引文件下载失败。如果忽略它们，那将转而使用旧的索引文件。</span><br></pre></td></tr></table></figure></p><p><strong>解决方法</strong>：<br>这是因为我之前的更新没有顺利结束，有临时文件残留，所以先执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get clean</span><br></pre></td></tr></table></figure></p><p>再执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/lib/apt/lists/*</span><br></pre></td></tr></table></figure></p><p>就可以了。</p><p>另外，这个问题也有可能是<strong>网络问题</strong>导致的。</p>]]></content>
    
    <summary type="html">
    
      本篇是我在Kali更新的时候遇到的出现签名无效、Hash和校验不符这两个问题的记录
    
    </summary>
    
      <category term="Linux" scheme="http://jeffyang.top/categories/Linux/"/>
    
      <category term="Kali" scheme="http://jeffyang.top/categories/Linux/Kali/"/>
    
    
      <category term="Linux" scheme="http://jeffyang.top/tags/Linux/"/>
    
      <category term="Kali" scheme="http://jeffyang.top/tags/Kali/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫常用库selenium详解</title>
    <link href="http://jeffyang.top/Python/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB%E5%B8%B8%E7%94%A8%E5%BA%93selenium%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jeffyang.top/Python/爬虫/Python爬虫常用库selenium详解/</id>
    <published>2018-02-25T12:21:28.000Z</published>
    <updated>2018-02-27T06:59:39.588Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>selenium是一款支持多种浏览器的自动化测试工具，爬虫中主要用于解决JavaScript渲染页面的问题。</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.common.keys import Keys</span><br><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line">from selenium.webdriver.support.wait import WebDriverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">try:</span><br><span class="line">    browser.get(&apos;https://www.baidu.com&apos;)</span><br><span class="line">    input = browser.find_element_by_id(&apos;kw&apos;)</span><br><span class="line">    input.send_keys(&apos;Python&apos;)</span><br><span class="line">    input.send_keys(Keys.ENTER)</span><br><span class="line">    wait = WebDriverWait(browser, 10)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID, &apos;content_left&apos;)))</span><br><span class="line">    print(browser.current_url)</span><br><span class="line">    print(browser.get_cookies())</span><br><span class="line">    print(browser.page_source)</span><br><span class="line">finally:</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure><p>这个代码执行会打开一个Chrome浏览器，然后自行访问百度首页，再找到<code>id</code>为<code>kw</code>的元素，传入<code>Python</code>，等到<code>id</code>为<code>content_left</code>的元素加载完毕，最多等10秒；最后打印出URL、cookie和网页源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=Python&amp;rsv_pq=ecec174c000446b6&amp;rsv_t=e937VWYSLXgLXfqehqBQAlxkvD%2BxfJgrJbQShd9tlzleUDgLT79hlx3OY4I&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=6&amp;rsv_sug2=0&amp;inputT=151&amp;rsv_sug4=152</span><br><span class="line">[&#123;&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;H_PS_PSSID&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;1431_25548_21083_17001_20927&apos;&#125;, &#123;&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;expiry&apos;: 3667193230.07363, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BAIDUID&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;A7794CCB63F72DF1DB89412B90FD7594:FG=1&apos;&#125;, &#123;&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;expiry&apos;: 3667193230.073748, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BIDUPSID&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;A7794CCB63F72DF1DB89412B90FD7594&apos;&#125;, &#123;&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;expiry&apos;: 3667193230.073789, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;PSTM&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;1519709584&apos;&#125;, &#123;&apos;domain&apos;: &apos;www.baidu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BD_HOME&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;0&apos;&#125;, &#123;&apos;domain&apos;: &apos;www.baidu.com&apos;, &apos;expiry&apos;: 1520573584, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BD_UPN&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;12314753&apos;&#125;, &#123;&apos;domain&apos;: &apos;www.baidu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;BD_CK_SAM&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;1&apos;&#125;, &#123;&apos;domain&apos;: &apos;.baidu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;PSINO&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;6&apos;&#125;, &#123;&apos;domain&apos;: &apos;www.baidu.com&apos;, &apos;expiry&apos;: 1519712177, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;H_PS_645EC&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;73c5tON4OP%2BcqrdDlwHz6rwaG1DOdU1Z3%2F9ptI2btWk%2BMk40sI5n%2BTm0W0M&apos;&#125;]</span><br><span class="line">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;&lt;script type=&quot;text/javascript&quot; charset=&quot;gb2312&quot; src=&quot;//www.baidu.com/cache/aladdin/ui/tabs5/tabs5.js?v=20170208&quot; data-for=&quot;A.ui&quot;&gt;&lt;/script&gt;&lt;script charset=&quot;utf-8&quot; async=&quot;&quot; src=&quot;https://ss0.bdstatic.com/-0U0bnSm1A5BphGlnYG/tam-ogel/5d4e9b24-dcc5-483a-b6da-be1e9e621891.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h3><p>selenium支持多种浏览器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.PhantomJS()</span><br><span class="line">browser = webdriver.Safari()</span><br></pre></td></tr></table></figure></p><h3 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(&apos;https://www.taobao.com&apos;)</span><br><span class="line">print(browser.page_source)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;zh-CN&quot; class=&quot;ks-webkit537 ks-webkit ks-chrome63 ks-chrome&quot;&gt;&lt;head&gt;&lt;script charset=&quot;utf-8&quot; src=&quot;https://g.alicdn.com/mm/tb-page-peel/0.0.5/index-min.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://tce.alicdn.com/api/data.htm?ids=1017579&amp;amp;callback=tce_fixedtool_callback&quot; async=&quot;&quot;&gt;&lt;/script&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><h4 id="单个元素"><a href="#单个元素" class="headerlink" title="单个元素"></a>单个元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(&apos;https://www.taobao.com&apos;)</span><br><span class="line">input_first = browser.find_element_by_id(&apos;q&apos;)</span><br><span class="line">input_second = browser.find_element_by_css_selector(&apos;#q&apos;)</span><br><span class="line">input_third = browser.find_element_by_xpath(&apos;//*[@id=&quot;q&quot;]&apos;)</span><br><span class="line">print(input_first, &apos;\n&apos;, input_second, &apos;\n&apos;, input_third)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><p>打开淘宝页面，查找<code>id</code>为<code>q</code>的元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;a1d52c692ca1e8a73e7238f098e13ce9&quot;, element=&quot;0.678986922879961-1&quot;)&gt; </span><br><span class="line"> &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;a1d52c692ca1e8a73e7238f098e13ce9&quot;, element=&quot;0.678986922879961-1&quot;)&gt; </span><br><span class="line"> &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;a1d52c692ca1e8a73e7238f098e13ce9&quot;, element=&quot;0.678986922879961-1&quot;)&gt;</span><br></pre></td></tr></table></figure></p><p>selenium支持包括css选择器、xpath等多种选择方法：</p><ul><li>find_element_by_name</li><li>find_element_by_xpath</li><li>find_element_by_link_text</li><li>find_element_by_partial_link_text</li><li>find_element_by_tag_name</li><li>find_element_by_class_name</li><li>find_element_by_css_selector</li></ul><p>还有一种方法是把选择方式当参数传入，如<code>browser.find_element(By.ID, &#39;q&#39;)</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(&apos;https://www.taobao.com&apos;)</span><br><span class="line">input_first = browser.find_element(By.ID, &apos;q&apos;)</span><br><span class="line">print(input_first)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;1f209c0d11551c40d9d20ad964fef244&quot;, element=&quot;0.07914603542731591-1&quot;)&gt;</span><br></pre></td></tr></table></figure></p><h4 id="多个元素"><a href="#多个元素" class="headerlink" title="多个元素"></a>多个元素</h4><p>查找多个元素用<code>find_elements</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(&apos;https://www.taobao.com&apos;)</span><br><span class="line">lis = browser.find_elements_by_css_selector(&apos;.service-bd li&apos;)</span><br><span class="line">print(lis)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><p>结果返回一个列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-1&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-2&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-3&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-4&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-5&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-6&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-7&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-8&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-9&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-10&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-11&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-12&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-13&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-14&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-15&quot;)&gt;, &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;c688cf3c4681d66e813217aa5311a77e&quot;, element=&quot;0.3350212468864553-16&quot;)&gt;]</span><br></pre></td></tr></table></figure></p><p>对应的，查找多种元素也有多种方法：</p><ul><li>find_elements_by_name</li><li>find_elements_by_xpath</li><li>find_elements_by_link_text</li><li>find_elements_by_partial_link_text</li><li>find_elements_by_tag_name</li><li>find_elements_by_class_name</li><li>find_elements_by_css_selector</li></ul><h3 id="元素交互操作"><a href="#元素交互操作" class="headerlink" title="元素交互操作"></a>元素交互操作</h3><p>对获取的元素可以调用一些交互方法，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(&apos;https://www.taobao.com&apos;)</span><br><span class="line">input = browser.find_element_by_id(&apos;q&apos;)</span><br><span class="line">input.send_keys(&apos;iPhone&apos;)</span><br><span class="line">time.sleep(1)</span><br><span class="line">input.clear()</span><br><span class="line">input.send_keys(&apos;iPad&apos;)</span><br><span class="line">button = browser.find_element_by_class_name(&apos;btn-search&apos;)</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure></p><p>这个代码会打开Chrome，找到搜索框，先输入<code>iPhone</code>，等待1秒，把输入框清空，在输入<code>iPad</code>然后点击搜索按钮。</p><p>更多有关元素交互操作的内容可以<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement" target="_blank" rel="noopener">点击这里</a>查看文档。</p><h3 id="交互动作"><a href="#交互动作" class="headerlink" title="交互动作"></a>交互动作</h3><p>将动作附加到动作链中串行执行，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver import ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = &apos;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&apos;</span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(&apos;iframeResult&apos;)</span><br><span class="line">source = browser.find_element_by_css_selector(&apos;#draggable&apos;)</span><br><span class="line">target = browser.find_element_by_css_selector(&apos;#droppable&apos;)</span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure></p><p>这串代码会执行一个iframe的拖拽操作。</p><p>更多的交互动作<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains" target="_blank" rel="noopener">点击这里</a>查看。</p><h3 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h3><p>使用<code>execute_script()</code>执行js代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(&apos;https://www.zhihu.com/explore&apos;)</span><br><span class="line">browser.execute_script(&apos;window.scrollTo(0, document.body.scrollHeight)&apos;)</span><br><span class="line">browser.execute_script(&apos;alert(&quot;To Bottom&quot;)&apos;)</span><br></pre></td></tr></table></figure></p><p>上面的代码会打开知乎页面并把滚动条下拉到底部然后弹出提示。</p><h3 id="获取元素信息"><a href="#获取元素信息" class="headerlink" title="获取元素信息"></a>获取元素信息</h3><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><p>获取属性使用<code>get_attribute()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver import ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = &apos;https://www.zhihu.com/explore&apos;</span><br><span class="line">browser.get(url)</span><br><span class="line">logo = browser.find_element_by_id(&apos;zh-top-link-logo&apos;)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.get_attribute(&apos;class&apos;))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;767d4093cfd43cd8c5d9cd4dc12dc204&quot;, element=&quot;0.4229578279847983-1&quot;)&gt;</span><br><span class="line">zu-top-link-logo</span><br></pre></td></tr></table></figure></p><h4 id="获取文本值"><a href="#获取文本值" class="headerlink" title="获取文本值"></a>获取文本值</h4><p>获取文本值使用<code>.text</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = &apos;https://www.zhihu.com/explore&apos;</span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(&apos;zu-top-add-question&apos;)</span><br><span class="line">print(input.text)</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提问</span><br></pre></td></tr></table></figure></p><h4 id="获取ID、位置、标签名、大小"><a href="#获取ID、位置、标签名、大小" class="headerlink" title="获取ID、位置、标签名、大小"></a>获取ID、位置、标签名、大小</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = &apos;https://www.zhihu.com/explore&apos;</span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(&apos;zu-top-add-question&apos;)</span><br><span class="line">print(input.id)</span><br><span class="line">print(input.location)</span><br><span class="line">print(input.tag_name)</span><br><span class="line">print(input.size)</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0.6822924344980397-1</span><br><span class="line">&#123;&apos;y&apos;: 7, &apos;x&apos;: 774&#125;</span><br><span class="line">button</span><br><span class="line">&#123;&apos;height&apos;: 32, &apos;width&apos;: 66&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h3><p>网页中有frame时，不能直接查找元素，需要切换到元素所在frame才能查找到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.common.exceptions import NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">url = &apos;http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&apos;</span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(&apos;iframeResult&apos;)</span><br><span class="line">source = browser.find_element_by_css_selector(&apos;#draggable&apos;)</span><br><span class="line">print(source)</span><br><span class="line">try:</span><br><span class="line">    logo = browser.find_element_by_class_name(&apos;logo&apos;)</span><br><span class="line">except NoSuchElementException:</span><br><span class="line">    print(&apos;NO LOGO&apos;)</span><br><span class="line">browser.switch_to.parent_frame()</span><br><span class="line">logo = browser.find_element_by_class_name(&apos;logo&apos;)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.text)</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;4bb8ac03ced4ecbdefef03ffdc0e4ccd&quot;, element=&quot;0.44746093888932004-1&quot;)&gt;</span><br><span class="line">NO LOGO</span><br><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;4bb8ac03ced4ecbdefef03ffdc0e4ccd&quot;, element=&quot;0.13792611320464965-2&quot;)&gt;</span><br><span class="line">RUNOOB.COM</span><br></pre></td></tr></table></figure></p><h3 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h3><h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><p>当使用了隐式等待执行测试的时候，如果WebDriver没有在DOM中找到元素，将继续等待，超出设定时间后则抛出找不到元素的异常, 换句话说，当查找元素或元素并没有立即出现的时候，隐式等待将等待一段时间再查找 DOM，默认的时间是0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(10)</span><br><span class="line">browser.get(&apos;https://www.zhihu.com/explore&apos;)</span><br><span class="line">input = browser.find_element_by_class_name(&apos;zu-top-add-question&apos;)</span><br><span class="line">print(input)</span><br></pre></td></tr></table></figure></p><p><code>implicitly_wait(10)</code>指如果网速过慢等情况下，元素没有加载出来将额外等待10秒，10秒后还没有加载出来就抛出异常。一般情况下没有必要加隐式等待。</p><h4 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h4><p>比较常用的是显式等待，即指定一个等待条件和最长等待时间，它会在最长等待时间内判断条件是否成立，成立则直接返回，超出等待时间则抛出异常，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.webdriver.common.by import By</span><br><span class="line">from selenium.webdriver.support.ui import WebDriverWait</span><br><span class="line">from selenium.webdriver.support import expected_conditions as EC</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(&apos;https://www.taobao.com/&apos;)</span><br><span class="line">wait = WebDriverWait(browser, 10)</span><br><span class="line">input = wait.until(EC.presence_of_element_located((By.ID, &apos;q&apos;)))</span><br><span class="line">button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &apos;.btn-search&apos;)))</span><br><span class="line">print(input, button)</span><br></pre></td></tr></table></figure></p><p><code>presence_of_element_located((By.ID, &#39;q&#39;))</code>判断元素是否出现；<code>element_to_be_clickable((By.CSS_SELECTOR, &#39;.btn-search&#39;))</code>判断指定按钮是否可点击；可以看到它们都传入了一个元组。结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;07dd2fbc2d5b1ce40e82b9754aba8fa8&quot;, element=&quot;0.5642646294074107-1&quot;)&gt; &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;07dd2fbc2d5b1ce40e82b9754aba8fa8&quot;, element=&quot;0.5642646294074107-2&quot;)&gt;</span><br></pre></td></tr></table></figure></p><p>常用的判断条件有：</p><ul><li>title_is 标题是某内容</li><li>title_contains  标题包含某内容</li><li>presence_of_element_located 元素加载出，传入定位元组，如(By.ID, p’)</li><li>visibility_of_element_located  元素可见，传入定位元组</li><li>visibility_of 可见，传入元素对象</li><li>presence_of_all_elements_located 所有元素加载出</li><li>text_to_be_present_in_element 某个元素文本包含某文字</li><li>text_to_be_present_in_element_value  某个元素值包含某文字</li><li>frame_to_be_available_and_switch_to_it  frame加载并切换</li><li>invisibility_of_element_located 元素不可见</li><li>element_to_be_clickable  元素可点击</li><li>staleness_of  判断一个元素是否仍在DOM，可判断页面是否已经刷新</li><li>element_to_be_selected  元素可选择，传元素对象</li><li>element_located_to_be_selected  元素可选择，传入定位元组</li><li>element_selection_state_to_be  传入元素对象以及状态，相等返回True，否则返回False</li><li>element_located_selection_state_to_be  传入定位元组以及状态，相等回True，否则返回False</li><li>alert_is_present 是否出现Alert</li></ul><p>详细内容可以<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.expected_conditions" target="_blank" rel="noopener">点击这里</a>查看文档。</p><h3 id="前进后退"><a href="#前进后退" class="headerlink" title="前进后退"></a>前进后退</h3><p><code>back()</code>和<code>forward()</code>控制后退和前进：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(&apos;https://www.baidu.com/&apos;)</span><br><span class="line">browser.get(&apos;https://www.taobao.com/&apos;)</span><br><span class="line">browser.get(&apos;https://www.python.org/&apos;)</span><br><span class="line">browser.back()</span><br><span class="line">time.sleep(1)</span><br><span class="line">browser.forward()</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></p><p>它会先访问百度，再访问淘宝，再访问Python官网，然后返回淘宝，等待1秒后再前进到Python官网。</p><h3 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(&apos;https://www.zhihu.com/explore&apos;)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.add_cookie(&#123;&apos;name&apos;: &apos;name&apos;, &apos;domain&apos;: &apos;www.zhihu.com&apos;, &apos;value&apos;: &apos;jeff&apos;&#125;)</span><br><span class="line">print(browser.get_cookies())</span><br></pre></td></tr></table></figure><p>上面代码会打开知乎页面，然后打印出cookies，然后删除掉所有cookies，最后往cookies添加一些内容再打印：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;expiry&apos;: 1614321990.390978, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;d_c0&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;&quot;AAAsNHqUNQ2PTmyB9_dLW6YtcYCfwvIaBac=|1519713991&quot;&apos;&#125;, &#123;&apos;domain&apos;: &apos;www.zhihu.com&apos;, &apos;httpOnly&apos;: True, &apos;name&apos;: &apos;aliyungf_tc&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;AQAAADeoZFYSBAYACrwVt1hMfg3RqO/a&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;l_n_c&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;1&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;expiry&apos;: 1519715791, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;__utmb&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;51854390.0.10.1519713992&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;expiry&apos;: 1614321988.412313, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;q_c1&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;bff234c12f284b39b3b49bb9be57735d|1519713988000|1519713988000&apos;&#125;, &#123;&apos;domain&apos;: &apos;www.zhihu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;_xsrf&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;6f356dbeb54748552c389235dc679975&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;expiry&apos;: 1522305988.412491, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;r_cap_id&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;&quot;YjAzMTliOWEyOGRiNGEyMGE5NzVmYzY2NDg1MWZjZjQ=|1519713988|a448a57c0fa2941a00ca61a0bb8ba1c521adb298&quot;&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;expiry&apos;: 1522305988.412595, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;cap_id&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;&quot;NGUzM2U2ZGVmNmFiNGY0MWI0M2MwMGE4ZGJhMjc0NGE=|1519713988|707d2d360638930efdf20eec53827e09891b1d53&quot;&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;expiry&apos;: 1522305988.412739, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;l_cap_id&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;&quot;MzdlNzAyOWU4NmNiNDBlMjhlZDBhNGI4NWE1MGYwMDM=|1519713988|3a82264b18882e235680e56235a7dee96be9e1c2&quot;&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;n_c&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;1&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;expiry&apos;: 1582785991, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;_zap&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;310e0d7a-3b5f-4293-867e-e7c2052b3734&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;expiry&apos;: 1582785991, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;__utma&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;51854390.1700258999.1519713992.1519713992.1519713992.1&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;__utmc&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;51854390&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;expiry&apos;: 1535481991, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;__utmz&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;51854390.1519713992.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)&apos;&#125;, &#123;&apos;domain&apos;: &apos;.zhihu.com&apos;, &apos;expiry&apos;: 1582785991, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;__utmv&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: False, &apos;value&apos;: &apos;51854390.000--|3=entry_date=20180227=1&apos;&#125;]</span><br><span class="line">[]</span><br><span class="line">[&#123;&apos;domain&apos;: &apos;www.zhihu.com&apos;, &apos;expiry&apos;: 2150433993, &apos;httpOnly&apos;: False, &apos;name&apos;: &apos;name&apos;, &apos;path&apos;: &apos;/&apos;, &apos;secure&apos;: True, &apos;value&apos;: &apos;jeff&apos;&#125;]</span><br></pre></td></tr></table></figure></p><p>cookies可以在开发者工具的Application的Cookie看到。</p><h3 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h3><p>最简单的就是使用js代码<code>window.open()</code>打开新窗口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(&apos;https://www.baidu.com&apos;)</span><br><span class="line">browser.execute_script(&apos;window.open()&apos;)</span><br><span class="line">print(browser.window_handles)</span><br><span class="line">browser.switch_to_window(browser.window_handles[1])</span><br><span class="line">browser.get(&apos;https://www.taobao.com&apos;)</span><br><span class="line">time.sleep(1)</span><br><span class="line">browser.switch_to_window(browser.window_handles[0])</span><br><span class="line">browser.get(&apos;https://python.org&apos;)</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;CDwindow-(CCB96210C849FFC0EC59E7230C77B934)&apos;, &apos;CDwindow-(C67B5EFB619A8F76ED9A2609C0E79842)&apos;]</span><br></pre></td></tr></table></figure></p><p>使用<code>window_handles</code>定位选项卡，通过<code>switch_to_window()</code>可以切换选项卡进行操作。</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>如查找一个不存在的元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(&apos;https://www.baidu.com&apos;)</span><br><span class="line">browser.find_element_by_id(&apos;hello&apos;)</span><br></pre></td></tr></table></figure></p><p>报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NoSuchElementException                    Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-23-978945848a1b&gt; in &lt;module&gt;()</span><br><span class="line">      3 browser = webdriver.Chrome()</span><br><span class="line">      4 browser.get(&apos;https://www.baidu.com&apos;)</span><br><span class="line">----&gt; 5 browser.find_element_by_id(&apos;hello&apos;)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">NoSuchElementException: Message: no such element: Unable to locate element: &#123;&quot;method&quot;:&quot;id&quot;,&quot;selector&quot;:&quot;hello&quot;&#125;</span><br><span class="line">  (Session info: chrome=63.0.3239.132)</span><br><span class="line">  (Driver info: chromedriver=2.35.528161 (5b82f2d2aae0ca24b877009200ced9065a772e73),platform=Windows NT 10.0.16299 x86_64)</span><br></pre></td></tr></table></figure></p><p>异常处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">from selenium.common.exceptions import TimeoutException, NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">try:</span><br><span class="line">    browser.get(&apos;https://www.baidu.com&apos;)</span><br><span class="line">except TimeoutException:</span><br><span class="line">    print(&apos;Time Out&apos;)</span><br><span class="line">try:</span><br><span class="line">    browser.find_element_by_id(&apos;hello&apos;)</span><br><span class="line">except NoSuchElementException:</span><br><span class="line">    print(&apos;No Element&apos;)</span><br><span class="line">finally:</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No Element</span><br></pre></td></tr></table></figure></p><p>关于异常处理 的更多内容<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.common.exceptions" target="_blank" rel="noopener">点击这里</a>查看文档。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>详细的说明和使用可以<a href="https://selenium-python.readthedocs.io/" target="_blank" rel="noopener">点击这里</a>查看文档。</p>]]></content>
    
    <summary type="html">
    
      Python爬虫常用库urllib的使用方法介绍
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Windows安装配置MongoDB</title>
    <link href="http://jeffyang.top/MongoDB/Windows%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEMongoDB/"/>
    <id>http://jeffyang.top/MongoDB/Windows安装配置MongoDB/</id>
    <published>2018-02-24T11:34:00.000Z</published>
    <updated>2018-02-24T12:50:30.517Z</updated>
    
    <content type="html"><![CDATA[<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>MongoDB是一个灵活的文档数据库，它将数据存储在类似JSON的文档中。下面是Windows下安装与配置的过程。</p><p>可以<a href="https://www.mongodb.com/download-center?jmp=homepage#community" target="_blank" rel="noopener">点击这里</a>下载Windows的MongoDB安装包。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载完安装包后直接双击打开就开始安装，安装过程其实很简单，只需要不断点击Next就可以了。</p><p>只是如果需要选择安装路径的话，在<code>Choose Setup Type</code>时选择<code>Custom</code>就可以自定义路径。</p><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>MongoDB将数据等存在<code>db</code>目录下，但这个目录我们需要自行创建。</p><p>我的安装目录是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\MongoDB\Server\3.4</span><br></pre></td></tr></table></figure></p><p>我就在这个目录下新建一个<code>data</code>目录，在<code>data</code>里再建一个<code>db</code>目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\MongoDB\Server\3.4\data\db</span><br></pre></td></tr></table></figure></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><p>cmd切换到<code>bin</code>目录下执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath &quot;D:\Program Files\MongoDB\Server\3.4\data\db&quot;</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：我的目录里<code>Program Files</code>有空格，所以在命令里需要用<strong>双引号</strong>引起。</p><p>运行命令后，可以看到类似以下输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">2018-02-24T01:24:39.882-0700 I CONTROL  [initandlisten] MongoDB starting : pid=15252 port=27017 dbpath=D:\Program Files\MongoDB\Server\3.4\data\db 64-bit host=DESKTOP-H1N98FT</span><br><span class="line">2018-02-24T01:24:39.882-0700 I CONTROL  [initandlisten] targetMinOS: Windows 7/Windows Server 2008 R2</span><br><span class="line">2018-02-24T01:24:39.883-0700 I CONTROL  [initandlisten] db version v3.4.9</span><br><span class="line">2018-02-24T01:24:39.883-0700 I CONTROL  [initandlisten] git version: 876ebee8c7dd0e2d992f36a848ff4dc50ee6603e</span><br><span class="line">2018-02-24T01:24:39.883-0700 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.1u-fips  22 Sep 2016</span><br><span class="line">2018-02-24T01:24:39.883-0700 I CONTROL  [initandlisten] allocator: tcmalloc</span><br><span class="line">2018-02-24T01:24:39.883-0700 I CONTROL  [initandlisten] modules: none</span><br><span class="line">2018-02-24T01:24:39.884-0700 I CONTROL  [initandlisten] build environment:</span><br><span class="line">2018-02-24T01:24:39.884-0700 I CONTROL  [initandlisten]     distmod: 2008plus-ssl</span><br><span class="line">2018-02-24T01:24:39.884-0700 I CONTROL  [initandlisten]     distarch: x86_64</span><br><span class="line">2018-02-24T01:24:39.884-0700 I CONTROL  [initandlisten]     target_arch: x86_64</span><br><span class="line">2018-02-24T01:24:39.884-0700 I CONTROL  [initandlisten] options: &#123; storage: &#123; dbPath: &quot;D:\Program Files\MongoDB\Server\3.4\data\db&quot; &#125; &#125;</span><br><span class="line">2018-02-24T01:24:39.914-0700 I -        [initandlisten] Detected data files in D:\Program Files\MongoDB\Server\3.4\data\db created by the &apos;wiredTiger&apos; storage engine, so setting the active storage engine to &apos;wiredTiger&apos;.</span><br><span class="line">2018-02-24T01:24:39.915-0700 I STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=5565M,session_max=20000,eviction=(threads_min=4,threads_max=4),config_base=false,statistics=(fast),log=(enabled=true,archive=true,path=journal,compressor=snappy),file_manager=(close_idle_time=100000),checkpoint=(wait=60,log_size=2GB),statistics_log=(wait=0),</span><br><span class="line">2018-02-24T01:24:41.078-0700 I CONTROL  [initandlisten]</span><br><span class="line">2018-02-24T01:24:41.078-0700 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</span><br><span class="line">2018-02-24T01:24:41.078-0700 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class="line">2018-02-24T01:24:41.078-0700 I CONTROL  [initandlisten]</span><br><span class="line">2018-02-24T16:24:41.504+0800 I FTDC     [initandlisten] Initializing full-time diagnostic data capture with directory &apos;D:/Program Files/MongoDB/Server/3.4/data/db/diagnostic.data&apos;</span><br><span class="line">2018-02-24T16:24:41.507+0800 I NETWORK  [thread1] waiting for connections on port 27017</span><br><span class="line">2018-02-24T16:25:06.603+0800 I NETWORK  [thread1] connection accepted from 127.0.0.1:2718 #1 (1 connection now open)</span><br><span class="line">2018-02-24T16:25:06.605+0800 I NETWORK  [conn1] received client metadata from 127.0.0.1:2718 conn1: &#123; application: &#123; name: &quot;MongoDB Shell&quot; &#125;, driver: &#123; name: &quot;MongoDB Internal Client&quot;, version: &quot;3.4.9&quot; &#125;, os: &#123; type: &quot;Windows&quot;, name: &quot;Microsoft Windows 8&quot;, architecture: &quot;x86_64&quot;, version: &quot;6.2 (build 9200)&quot; &#125; &#125;</span><br></pre></td></tr></table></figure></p><p>这时在浏览器访问<code>http://localhost:27017/</code>可以看到这样一句话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It looks like you are trying to access MongoDB over HTTP on the native driver port.</span><br></pre></td></tr></table></figure></p><p>这就说明服务已经启动了。</p><p>然后就可以在<code>bin</code>目录打开cmd，执行<code>mongo</code>命令进入MongoDB客户端了（<strong>小技巧</strong>：在打开的文件管理器的地址栏输入<code>cmd</code>就可以在当前路径打开命令行，或者按<code>shift + 右键</code>也可以选择在当前目录打开cmd，不过我的win10更新后用<code>shift + 右键</code>只能打开Power Shell了，不是很习惯…）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\MongoDB\Server\3.4\bin&gt;mongo</span><br><span class="line">MongoDB shell version v3.4.9</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017</span><br><span class="line">MongoDB server version: 3.4.9</span><br><span class="line">Server has startup warnings:</span><br><span class="line">2018-02-24T01:24:41.078-0700 I CONTROL  [initandlisten]</span><br><span class="line">2018-02-24T01:24:41.078-0700 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</span><br><span class="line">2018-02-24T01:24:41.078-0700 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class="line">2018-02-24T01:24:41.078-0700 I CONTROL  [initandlisten]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>此外，我们可以把<code>D:\Program Files\MongoDB\Server\3.4\bin</code>路径配置到环境变量的<code>Path</code>里，这样就不用每次使用都切换到<code>bin</code>目录下了。<br>环境变量的配置：右键我的电脑 –&gt; 属性 –&gt; 高级系统设置 –&gt; 环境变量，然后选择<code>Path</code>把路径添加就可以了。</p><h3 id="配置系统服务"><a href="#配置系统服务" class="headerlink" title="配置系统服务"></a>配置系统服务</h3><p>每次都通过命令行打开MongoDB服务比较麻烦，我们可以把它配置成系统服务。</p><p>首先，先在<code>data</code>目录下新建一个<code>log</code>目录，然后新建一个<code>mongo.log</code>作为日志文件。</p><p>我们需要<strong>以管理员权限运行</strong>cmd命令行，然后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --bind_ip 0.0.0.0 --logpath &quot;D:\Program Files\MongoDB\Server\3.4\data\logs\mongo.log&quot; --logappend --dbpath &quot;D:\Program Files\MongoDB\Server\3.4\data\db&quot; --port 27017 --serviceName &quot;MongoDB&quot; --serviceDisplayName &quot;MongoDB&quot; --install</span><br></pre></td></tr></table></figure></p><p>执行完这个命令后，就可以在通过<code>win + R</code>输入<code>services.msc</code>打开系统服务，在这里控制MongoDB服务的开启和关闭而不用通过命令行了。</p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>这样，Windows下MongoDB的安装和配置就完成了。</p>]]></content>
    
    <summary type="html">
    
      Windows下安装配置MongoDB的详细过程
    
    </summary>
    
      <category term="MongoDB" scheme="http://jeffyang.top/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://jeffyang.top/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Django项目遇到的问题记录</title>
    <link href="http://jeffyang.top/Python/Django/Django%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <id>http://jeffyang.top/Python/Django/Django项目遇到的问题记录/</id>
    <published>2018-02-23T12:43:00.000Z</published>
    <updated>2018-02-23T13:22:43.453Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Django框架的时候，由于不熟悉，碰到了一些小问题。</p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Python3.6</li><li>Django1.11.7</li></ul><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><p>在编写HTML页面时，我写了如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;article_id&quot; value=&quot;&#123;% if article %&#125;&#123;&#123; article.id &#125;&#125;&#123;% else %&#125; &apos;0&apos;&#123;% endif %&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>使用时就报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invalid literal for int() with base 10: &quot;&apos;0&apos;&quot;</span><br></pre></td></tr></table></figure></p><p>网上搜这个报错说是字符串转换成int，仔细一看才意识到<code>&#39;0&#39;</code>不应该加引号了…</p><p>然后去掉0的引号之后又报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DoesNotExist at /blog/edit/action</span><br><span class="line">Exception Type:DoesNotExist</span><br><span class="line">Exception Value:</span><br><span class="line">Article matching query does not exist.</span><br></pre></td></tr></table></figure></p><p>我的后台有：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if article_id == &apos;0&apos;:</span><br><span class="line">    ...</span><br><span class="line">    return ...</span><br><span class="line">article = models.Arcticle.objects.get(pk=article_id)</span><br><span class="line">return ...</span><br></pre></td></tr></table></figure></p><p>所以<code>article_id == &#39;0&#39;</code>的值为<code>FALSE</code>了，把<code>article_id</code>打印出来发现是’ 0 ‘两边各有一个空格。</p><p>前端的语句应该写成这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;article_id&quot; value=&quot;&#123;% if article %&#125;&#123;&#123; article.id &#125;&#125;&#123;% else %&#125;0&#123;% endif %&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>这样的小错误也折腾了不少时间。</p>]]></content>
    
    <summary type="html">
    
      在使用Django时碰到的小问题记录
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="Django" scheme="http://jeffyang.top/categories/Python/Django/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="Django" scheme="http://jeffyang.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫常用库beautifulsoup详解</title>
    <link href="http://jeffyang.top/Python/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB%E5%B8%B8%E7%94%A8%E5%BA%93beautifulsoup%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jeffyang.top/Python/爬虫/Python爬虫常用库beautifulsoup详解/</id>
    <published>2018-02-23T08:21:23.000Z</published>
    <updated>2018-02-26T19:23:46.325Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Beautiful Soup是一款支持多种解析器的灵活的网页解析库。</p><p>解析库：</p><table><thead><tr><th style="text-align:center">解析器</th><th style="text-align:center">使用方法</th><th style="text-align:center">优势</th><th style="text-align:center">劣势</th></tr></thead><tbody><tr><td style="text-align:center">Python标准库</td><td style="text-align:center">BeautifulSoup(markup, “html.parser”)</td><td style="text-align:center">Python的内置标准库、执行速度适中 、文档容错能力强</td><td style="text-align:center">Python 2.7.3 or 3.2.2)前的版本中文容错能力差</td></tr><tr><td style="text-align:center">lxml HTML 解析器</td><td style="text-align:center">BeautifulSoup(markup, “lxml”)</td><td style="text-align:center">速度快、文档容错能力强</td><td style="text-align:center">需要安装C语言库</td></tr><tr><td style="text-align:center">lxml XML 解析器</td><td style="text-align:center">BeautifulSoup(markup, “xml”)</td><td style="text-align:center">速度快、唯一支持XML的解析器</td><td style="text-align:center">需要安装C语言库</td></tr><tr><td style="text-align:center">html5lib</td><td style="text-align:center">BeautifulSoup(markup, “html5lib”)</td><td style="text-align:center">最好的容错性、以浏览器的方式解析文档、生成HTML5格式的文档</td><td style="text-align:center">速度慢、不依赖外部扩展</td></tr></tbody></table><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class="line">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span><br><span class="line">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class="line">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class="line">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.prettify())</span><br><span class="line">print(soup.title.string)</span><br></pre></td></tr></table></figure><p><code>lxml</code>是比较常用的一种解析库。可以看到上面的代码是不完整的HTML代码，但是<code>prettify()</code>可以帮助格式化HTML代码，<code>soup.title.string</code>可以获取标签内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;</span><br><span class="line">   The Dormouse&apos;s story</span><br><span class="line">  &lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;</span><br><span class="line">   &lt;b&gt;</span><br><span class="line">    The Dormouse&apos;s story</span><br><span class="line">   &lt;/b&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p class=&quot;story&quot;&gt;</span><br><span class="line">   Once upon a time there were three little sisters; and their names were</span><br><span class="line">   &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">    &lt;!-- Elsie --&gt;</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   ,</span><br><span class="line">   &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;</span><br><span class="line">    Lacie</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   and</span><br><span class="line">   &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;</span><br><span class="line">    Tillie</span><br><span class="line">   &lt;/a&gt;</span><br><span class="line">   ;</span><br><span class="line">and they lived at the bottom of a well.</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p class=&quot;story&quot;&gt;</span><br><span class="line">   ...</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">The Dormouse&apos;s story</span><br></pre></td></tr></table></figure></p><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><h4 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class="line">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span><br><span class="line">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class="line">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class="line">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.title)</span><br><span class="line">print(type(soup.title))</span><br><span class="line">print(soup.head)</span><br><span class="line">print(soup.p)</span><br></pre></td></tr></table></figure><p>输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;</span><br><span class="line">&lt;class &apos;bs4.element.Tag&apos;&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到它们是<code>bs4.element.Tag</code>对象，而且这种方法只会输出第一个指定标签。</p><h4 id="获取名称"><a href="#获取名称" class="headerlink" title="获取名称"></a>获取名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class="line">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span><br><span class="line">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class="line">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class="line">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.title.name)</span><br></pre></td></tr></table></figure><p>结果是把选中标签名输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title</span><br></pre></td></tr></table></figure></p><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class="line">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span><br><span class="line">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class="line">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class="line">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.p.attrs[&apos;name&apos;])</span><br><span class="line">print(soup.p[&apos;name&apos;])</span><br></pre></td></tr></table></figure><p><code>p.attrs[&#39;name&#39;]</code>和<code>p[&#39;name&#39;]</code>都可以获取属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dromouse</span><br><span class="line">dromouse</span><br></pre></td></tr></table></figure></p><h4 id="获取内容"><a href="#获取内容" class="headerlink" title="获取内容"></a>获取内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p clss=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class="line">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span><br><span class="line">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class="line">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class="line">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.p.string)</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The Dormouse&apos;s story</span><br></pre></td></tr></table></figure></p><h4 id="嵌套选择"><a href="#嵌套选择" class="headerlink" title="嵌套选择"></a>嵌套选择</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class=&quot;title&quot; name=&quot;dromouse&quot;&gt;&lt;b&gt;The Dormouse&apos;s story&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span><br><span class="line">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span><br><span class="line">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span><br><span class="line">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span><br><span class="line">and they lived at the bottom of a well.&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.head.title.string)</span><br></pre></td></tr></table></figure><p>经过选择的结果都是<code>bs4.element.Tag</code>对象，还可以用同样的方式选择，结果和前面是一样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The Dormouse&apos;s story</span><br></pre></td></tr></table></figure></p><h4 id="子节点和子孙节点"><a href="#子节点和子孙节点" class="headerlink" title="子节点和子孙节点"></a>子节点和子孙节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;</span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">                &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span><br><span class="line">            and</span><br><span class="line">            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">            and they lived at the bottom of a well.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.p.contents)</span><br></pre></td></tr></table></figure><p><code>.contents</code>以列表的形式返回子孙节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&apos;\n            Once upon a time there were three little sisters; and their names were\n            &apos;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;, &apos;\n&apos;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;, &apos; \n            and\n            &apos;, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;, &apos;\n            and they lived at the bottom of a well.\n        &apos;]</span><br></pre></td></tr></table></figure></p><p>另外，还有另外一种方式<code>.children</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;</span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">                &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span><br><span class="line">            and</span><br><span class="line">            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">            and they lived at the bottom of a well.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.p.children)</span><br><span class="line">for i, child in enumerate(soup.p.children):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;list_iterator object at 0x08CCBAF0&gt;</span><br><span class="line">0 </span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            </span><br><span class="line">1 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">2 </span><br><span class="line"></span><br><span class="line">3 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span><br><span class="line">4  </span><br><span class="line">            and</span><br><span class="line">            </span><br><span class="line">5 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">6 </span><br><span class="line">            and they lived at the bottom of a well.</span><br></pre></td></tr></table></figure></p><p>可以看出，两者的不同之处就是<code>.children</code>返回的是<code>list_iterator</code>一个<strong>迭代器</strong>而<code>.contents</code>返回<strong>列表</strong>。<br><code>enumerate()</code>方法遍历可以得到<strong>索引</strong>和<strong>值</strong>。</p><p><code>.descendants</code>获取所有子孙节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;</span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">                &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span><br><span class="line">            and</span><br><span class="line">            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">            and they lived at the bottom of a well.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.p.descendants)</span><br><span class="line">for i, child in enumerate(soup.p.descendants):</span><br><span class="line">    print(i, child)</span><br></pre></td></tr></table></figure></p><p>结果返回<code>generator</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;generator object descendants at 0x086AEB70&gt;</span><br><span class="line">0 </span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            </span><br><span class="line">1 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">2 </span><br><span class="line"></span><br><span class="line">3 &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">4 Elsie</span><br><span class="line">5 </span><br><span class="line"></span><br><span class="line">6 </span><br><span class="line"></span><br><span class="line">7 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span><br><span class="line">8 Lacie</span><br><span class="line">9  </span><br><span class="line">            and</span><br><span class="line">            </span><br><span class="line">10 &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">11 Tillie</span><br><span class="line">12 </span><br><span class="line">            and they lived at the bottom of a well.</span><br></pre></td></tr></table></figure></p><h4 id="父节点和祖先节点"><a href="#父节点和祖先节点" class="headerlink" title="父节点和祖先节点"></a>父节点和祖先节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;</span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">                &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span><br><span class="line">            and</span><br><span class="line">            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">            and they lived at the bottom of a well.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.a.parent)</span><br></pre></td></tr></table></figure><p><code>.parent</code>获取父节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;p class=&quot;story&quot;&gt;</span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span><br><span class="line">            and</span><br><span class="line">            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">            and they lived at the bottom of a well.</span><br><span class="line">        &lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p><code>.parents</code>输出所有祖先节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;</span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">                &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span><br><span class="line">            and</span><br><span class="line">            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">            and they lived at the bottom of a well.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(list(enumerate(soup.a.parents)))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">[(0, &lt;p class=&quot;story&quot;&gt;</span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span><br><span class="line">            and</span><br><span class="line">            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">            and they lived at the bottom of a well.</span><br><span class="line">        &lt;/p&gt;), (1, &lt;body&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;</span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span><br><span class="line">            and</span><br><span class="line">            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">            and they lived at the bottom of a well.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;), (2, &lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;</span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span><br><span class="line">            and</span><br><span class="line">            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">            and they lived at the bottom of a well.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;), (3, &lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;</span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">&lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span><br><span class="line">            and</span><br><span class="line">            &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">            and they lived at the bottom of a well.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;)]</span><br></pre></td></tr></table></figure></p><h4 id="兄弟节点"><a href="#兄弟节点" class="headerlink" title="兄弟节点"></a>兄弟节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">html = &quot;&quot;&quot;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;The Dormouse&apos;s story&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;</span><br><span class="line">            Once upon a time there were three little sisters; and their names were</span><br><span class="line">            &lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;</span><br><span class="line">                &lt;span&gt;Elsie&lt;/span&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; </span><br><span class="line">            and</span><br><span class="line">            &lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;</span><br><span class="line">            and they lived at the bottom of a well.</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(list(enumerate(soup.a.next_siblings)))</span><br><span class="line">print(list(enumerate(soup.a.previous_siblings)))</span><br></pre></td></tr></table></figure><p><code>.next_siblings</code>获取后面的兄弟节点，<code>.previous_siblings</code>获取前面的兄弟节点：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[(0, &apos;\n&apos;), (1, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/lacie&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;), (2, &apos; \n            and\n            &apos;), (3, &lt;a class=&quot;sister&quot; href=&quot;http://example.com/tillie&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;), (4, &apos;\n            and they lived at the bottom of a well.\n        &apos;)]</span><br><span class="line">[(0, &apos;\n            Once upon a time there were three little sisters; and their names were\n            &apos;)]</span><br></pre></td></tr></table></figure></p><h3 id="标准选择器"><a href="#标准选择器" class="headerlink" title="标准选择器"></a>标准选择器</h3><p>前面的标签选择器虽然速度很快，但是很多时候并不能满足我们的需求。</p><h4 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h4><p>可根据标签名、属性、内容查找文档，返回<strong>所有</strong>符合元素。用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_all(name, attrs, recursive, text, **kwargs)</span><br></pre></td></tr></table></figure></p><p>根据<code>name</code>查找：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">html=&apos;&apos;&apos;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">for ul in soup.find_all(&apos;ul&apos;):</span><br><span class="line">    print(ul.find_all(&apos;li&apos;))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;]</span><br><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</span><br></pre></td></tr></table></figure></p><p>根据<code>attrs</code>查找：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">html=&apos;&apos;&apos;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.find_all(attrs=&#123;&apos;id&apos;: &apos;list-1&apos;&#125;))</span><br><span class="line">print(soup.find_all(attrs=&#123;&apos;name&apos;: &apos;elements&apos;&#125;))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;]</span><br><span class="line">[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot; name=&quot;elements&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;]</span><br></pre></td></tr></table></figure></p><p>还可以简单的写成，需要注意的是，<code>class</code>是Python的关键字，要写成<code>class_</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">html=&apos;&apos;&apos;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.find_all(id=&apos;list-1&apos;))</span><br><span class="line">print(soup.find_all(class_=&apos;element&apos;))</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;]</span><br><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</span><br></pre></td></tr></table></figure></p><p>根据<code>text</code>选择：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">html=&apos;&apos;&apos;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.find_all(text=&apos;Foo&apos;))</span><br></pre></td></tr></table></figure></p><p>它是直接把text输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&apos;Foo&apos;, &apos;Foo&apos;]</span><br></pre></td></tr></table></figure></p><h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>与<code>find_all()</code>相似，不过<code>find()</code>返回<strong>单个</strong>元素，用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find(name, attrs, recursive, text, **kwargs)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">html=&apos;&apos;&apos;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.find(&apos;ul&apos;))</span><br><span class="line">print(type(soup.find(&apos;ul&apos;)))</span><br><span class="line">print(soup.find(&apos;page&apos;))</span><br></pre></td></tr></table></figure><p>不存在则返回<code>None</code>，结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">&lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;class &apos;bs4.element.Tag&apos;&gt;</span><br><span class="line">None</span><br></pre></td></tr></table></figure></p><h4 id="find-parents-、find-parent"><a href="#find-parents-、find-parent" class="headerlink" title="find_parents()、find_parent()"></a>find_parents()、find_parent()</h4><p>find_parents()返回所有祖先节点，find_parent()返回直接父节点。</p><h4 id="find-next-siblings-、find-next-sibling"><a href="#find-next-siblings-、find-next-sibling" class="headerlink" title="find_next_siblings()、find_next_sibling()"></a>find_next_siblings()、find_next_sibling()</h4><p>find_next_siblings()返回后面所有兄弟节点，find_next_sibling()返回后面第一个兄弟节点。</p><h4 id="find-previous-siblings-、find-previous-sibling"><a href="#find-previous-siblings-、find-previous-sibling" class="headerlink" title="find_previous_siblings()、find_previous_sibling()"></a>find_previous_siblings()、find_previous_sibling()</h4><p>find_previous_siblings()返回前面所有兄弟节点，find_previous_sibling()返回前面第一个兄弟节点。</p><h4 id="find-all-next-、find-next"><a href="#find-all-next-、find-next" class="headerlink" title="find_all_next()、find_next()"></a>find_all_next()、find_next()</h4><p>find_all_next()返回节点后所有符合条件的节点, find_next()返回第一个符合条件的节点</p><h4 id="find-all-previous-、find-previous"><a href="#find-all-previous-、find-previous" class="headerlink" title="find_all_previous()、find_previous()"></a>find_all_previous()、find_previous()</h4><p>find_all_previous()返回节点后所有符合条件的节点, find_previous()返回第一个符合条件的节点</p><h3 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h3><p>通过<code>select()</code>直接传入CSS选择器即可完成选择。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">html=&apos;&apos;&apos;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">print(soup.select(&apos;.panel .panel-heading&apos;))</span><br><span class="line">print(soup.select(&apos;ul li&apos;))</span><br><span class="line">print(soup.select(&apos;#list-2 .element&apos;))</span><br><span class="line">print(type(soup.select(&apos;ul&apos;)[0]))</span><br></pre></td></tr></table></figure><p>结果也是<code>bs4.element.Tag</code>对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[&lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">&lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">&lt;/div&gt;]</span><br><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</span><br><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</span><br><span class="line">&lt;class &apos;bs4.element.Tag&apos;&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">html=&apos;&apos;&apos;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">for ul in soup.select(&apos;ul&apos;):</span><br><span class="line">    print(ul.select(&apos;li&apos;))</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;]</span><br><span class="line">[&lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;, &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;]</span><br></pre></td></tr></table></figure></p><h4 id="获取属性-1"><a href="#获取属性-1" class="headerlink" title="获取属性"></a>获取属性</h4><p>获取属性也有两种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">html=&apos;&apos;&apos;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">for ul in soup.select(&apos;ul&apos;):</span><br><span class="line">    print(ul[&apos;id&apos;])</span><br><span class="line">    print(ul.attrs[&apos;id&apos;])</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list-1</span><br><span class="line">list-1</span><br><span class="line">list-2</span><br><span class="line">list-2</span><br></pre></td></tr></table></figure></p><h4 id="获取内容-1"><a href="#获取内容-1" class="headerlink" title="获取内容"></a>获取内容</h4><p><code>get_text()</code>就可以获取文本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">html=&apos;&apos;&apos;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">        &lt;h4&gt;Hello&lt;/h4&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot; id=&quot;list-1&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Jay&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;ul class=&quot;list list-small&quot; id=&quot;list-2&quot;&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Foo&lt;/li&gt;</span><br><span class="line">            &lt;li class=&quot;element&quot;&gt;Bar&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html, &apos;lxml&apos;)</span><br><span class="line">for li in soup.select(&apos;li&apos;):</span><br><span class="line">    print(li.get_text())</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Foo</span><br><span class="line">Bar</span><br><span class="line">Jay</span><br><span class="line">Foo</span><br><span class="line">Bar</span><br></pre></td></tr></table></figure></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><ul><li>推荐使用lxml解析库，必要时使用html.parser</li><li>标签选择筛选功能弱但是速度快</li><li>建议使用find()、find_all() 查询匹配单个结果或者多个结果</li><li>如果对CSS选择器熟悉建议使用select()</li><li>记住常用的获取属性和文本值的方法</li></ul><p>详细的说明和使用可以<a href="http://beautifulsoup.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">点击这里</a>查看文档。</p>]]></content>
    
    <summary type="html">
    
      Python爬虫常用库beautifulsoup的使用方法介绍
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Django入门与实践</title>
    <link href="http://jeffyang.top/Python/Django/Django%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>http://jeffyang.top/Python/Django/Django入门与实践/</id>
    <published>2018-02-22T06:48:00.000Z</published>
    <updated>2018-02-23T16:04:27.900Z</updated>
    
    <content type="html"><![CDATA[<p>Django是一个功能强大的Python的高级Web框架，这是学习慕课网<a href="https://www.imooc.com/learn/790" target="_blank" rel="noopener">django入门与实践</a>的课程笔记。<br>通过一个小型博客功能的实现来学习Django的使用。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>Django是一个基于Python的高级Web开发框架，它能够让开发人员进行高效且快速的开发。</li><li>是高度集成的，不用自己造轮子，只需专注于网站本身的开发</li><li>Django免费且开源</li></ul><h3 id="浏览器上网基本原理"><a href="#浏览器上网基本原理" class="headerlink" title="浏览器上网基本原理"></a>浏览器上网基本原理</h3><p>上网过程：<br>浏览器输入网址 –&gt; 回车（<strong>向目标URL发送一个HTTP请求</strong>） –&gt; 看到网页（<strong>服务器响应请求，把代码返回给浏览器解析成看到的页面</strong>）</p><ul><li>本质是<strong>网络通信</strong>，即通过网络进行数据传递</li><li>浏览器经过通信后获取到该页面的<strong>源代码文档（HTML等）</strong></li><li>浏览器<strong>解析文档</strong>后以适当的形式展现给用户</li></ul><p>总之，请求响应过程就是浏览器发送HTTP请求给网站服务器，服务器通过后台代码处理请求，然后返回HTTP响应，把HTML文档等返回给浏览器，通过浏览器解析成用户看到的页面。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h4><p>windows下访问<a href="https://www.python.org/" target="_blank" rel="noopener">官网</a>点击下载直接安装，课程里用的是Python2.7，我这里是<strong>Python3.6</strong><br>安装时选上<code>Add python.exe to PATH</code>。</p><h4 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h4><p>课程里用的是Django1.10.2，我这里是<strong>Django1.11.7</strong>。<br>最简单方便的安装方式，可以指定安装版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django==2.0.2</span><br></pre></td></tr></table></figure></p><p>或者使用源码安装，下载源码，进入根目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br></pre></td></tr></table></figure></p><p>具体可以<a href="https://www.djangoproject.com/download/" target="_blank" rel="noopener">点击这里</a>查看官网的说明</p><p>使用以下命令可以查看安装的版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m django --version</span><br></pre></td></tr></table></figure></p><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><p>使用的是Pycharm，也可以根据自己习惯选择Eclipse+Pydev、Sublime Text、Atom或Visual Studio Code等。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="创建项目，了解目录下文件的作用"><a href="#创建项目，了解目录下文件的作用" class="headerlink" title="创建项目，了解目录下文件的作用"></a>创建项目，了解目录下文件的作用</h4><p>在想要放置项目的目录里打开cmd命令行，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject project_name</span><br></pre></td></tr></table></figure></p><p>如<code>django-admin startproject myblog</code>，然后可以看到项目的目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├─manage.py</span><br><span class="line">└─myblog</span><br><span class="line">     ├─__init__.py</span><br><span class="line">     ├─settings.py</span><br><span class="line">     ├─urls.py</span><br><span class="line">     └─wsgi.py</span><br></pre></td></tr></table></figure></p><ul><li><code>manage.py</code>：与项目进行交互的命令行工具集的入口，相当于项目管理器，执行<code>python manage.py</code>来查看所有命令。<ul><li><code>python manage.py runserver</code>启动自带服务器</li><li><code>python manage.py runserver 9999</code>指定端口号</li></ul></li><li><code>myblog目录</code>：项目的一个容器，包含项目最基本的一些配置。目录名称允许修改，但<strong>不建议修改</strong>，因为许多配置文件里已经使用了这个目录名称做配置。</li><li><code>wsgi.py</code>：WSGI(Python Web Server Gateway Interface)中文叫Python服务器网关接口。就是Python应用与Web服务器之间的接口</li><li><code>urls.py</code>：URL配置文件，Django项目中所有的地址（页面）都需要我们自己去配置其URL</li><li><code>settings.py</code>:项目的总配置文件，里面包含了数据库、Web应用、时间等各种配置:<ul><li><code>BASE_DIR</code>：项目的根目录</li><li><code>SECRET_KEY</code>：项目自动生成的安全码</li><li><code>DEBUG</code>：调试模式，生产环境中不要打开</li><li><code>ALLOWED_HOSTS</code>：Django只允许通过这里面的地址访问网站，屏蔽其他所有地址，使其变成<code>Bad Request (400)</code></li><li><code>INSTALLED_APPS</code>：已安装应用，Django项目是由许多应用组成的，生成项目时会有一些自动生成的应用，自行创建的用用要添加到这里</li><li><code>MIDDLEWARE</code>：中间件，Django自带的一些工具集</li><li><code>ROOT_URLCONF</code>：URL的根文件，这里指向<code>urls.py</code></li><li><code>TEMPLATES</code>：模板的一些配置</li><li><code>WSGI_APPLICATION</code>：<code>wsgi.py</code>相关，暂时不管</li><li><code>DATABASES</code>：数据库配置</li><li><code>AUTH_PASSWORD_VALIDATORS</code>：与密码认证有关，暂时不管</li><li><code>LANGUAGE_CODE = &#39;en-us&#39;</code>、<code>TIME_ZONE = &#39;UTC&#39;</code>、<code>USE_I18N = True</code>、<code>USE_L10N = True</code>、<code>USE_TZ = True</code>：这五个是国际化相关的配置，语言、时区等</li><li><code>STATIC_URL</code>：静态文件目录</li></ul></li><li><code>__init__.py</code>：Python中声明模块的文件，内容默认为空</li></ul><h4 id="创建应用，了解应用目录下各文件的作用"><a href="#创建应用，了解应用目录下各文件的作用" class="headerlink" title="创建应用，了解应用目录下各文件的作用"></a>创建应用，了解应用目录下各文件的作用</h4><p>应用创建步骤：<br>进入<code>manage.py</code>同级目录，打开命令行输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp app_name</span><br></pre></td></tr></table></figure></p><p>如<code>python manage.py startapp blog</code>。（<strong>注意</strong>：命名不能与Python内置模块重名，会报错。）<br>添加应用名到<code>settings.py</code>中的<code>INSTALLED_APPS</code>里。<br>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├─manage.py</span><br><span class="line">├─……</span><br><span class="line">└─blog</span><br><span class="line">     ├─migrations</span><br><span class="line">          ├─__init__.py</span><br><span class="line">     ├─__init__.py</span><br><span class="line">     ├─admin.py</span><br><span class="line">     ├─apps.py</span><br><span class="line">     ├─models.py</span><br><span class="line">     ├─tests.py</span><br><span class="line">     └─views.py</span><br></pre></td></tr></table></figure></p><ul><li><code>migrations目录</code>：数据移植（迁移）模块，内容自动生成</li><li><code>admin.py</code>：该应用的后台管理系统配置</li><li><code>apps.py</code>：该应用的一些配置，Django1.9以后自动生成</li><li><code>models.py</code>：数据模块，使用ORM框架，类似于MVC结构中的Models（模型）</li><li><code>tests.py</code>：自动化测试模块，Django提供了自动化测试功能，可以在这里编写测试脚本（语句）</li><li><code>views.py</code>：执行响应的代码所在的模块，代码逻辑处理的主要地点，项目中的<strong>大部分</strong>代码均在这里编写</li></ul><h4 id="创建第一个页面响应"><a href="#创建第一个页面响应" class="headerlink" title="创建第一个页面响应"></a>创建第一个页面响应</h4><p>编辑<code>blog目录</code>下的<code>views.py</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return HttpResponse(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure></p><ul><li>每个响应对应一个函数，函数必须返回一个响应</li><li>函数必须存在一个参数，一般约定为<code>request</code></li><li>每一个响应（函数）对应一个URL</li></ul><p>然后修改<code>urls.py</code>配置URL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import blog.views as bv</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^admin/&apos;, admin.site.urls),</span><br><span class="line">    url(r&apos;^index/&apos;, bv.index),  # 增加这一行</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><ul><li>每个URL都一url的形式写出来</li><li>url函数放在<code>urlpatterns</code>列表中</li><li>url函数三个参数：URL（正则）、对应方法、名称</li></ul><p>然后<code>python manage.py runserver</code>启动服务器，浏览器访问<code>http://localhost:8000/index/</code>就会出现经典的<code>Hello, World!</code>了。</p><h3 id="第一个Template"><a href="#第一个Template" class="headerlink" title="第一个Template"></a>第一个Template</h3><h4 id="配置URL的第二种方法（包含其他URL配置）"><a href="#配置URL的第二种方法（包含其他URL配置）" class="headerlink" title="配置URL的第二种方法（包含其他URL配置）"></a>配置URL的第二种方法（包含其他URL配置）</h4><p>修改根<code>urls.py</code>，引入<code>include</code>，url函数第二个参数改为<code>include(&#39;blog.urls&#39;)</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url, include</span><br><span class="line">from django.contrib import admin</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^admin/&apos;, admin.site.urls),</span><br><span class="line">    url(r&apos;^blog/&apos;, include(&apos;blog.urls&apos;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>在应用目录<code>blog目录</code>下创建<code>urls.py</code>文件，格式与根<code>urls.py</code>相同：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from django.conf.urls import url</span><br><span class="line">from . import views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^index/$&apos;, views.index),  # 限制index，注意加一个‘/’，否则访问“http://localhost:8000/blog/index/”会出现404</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>注意事项：</p><ul><li>根<code>urls.py</code>针对APP配置的URL名称，是该APP所有URL的总路径，即在<code>blog.urls</code>配置的URL前都要加上根<code>urls.py</code>配置的URL</li><li>配置URL为空时不要直接<code>r&#39;&#39;</code>，因为这样为空时可以访问，输入任意字符也可以访问，要使用<code>r&#39;^$&#39;</code></li><li>配置URL时注意正则表达式结尾符号<code>$</code>和<code>/</code></li></ul><h4 id="开发第一个Template"><a href="#开发第一个Template" class="headerlink" title="开发第一个Template"></a>开发第一个Template</h4><ul><li>Django里的Templates其实就是HTML文件</li><li>Templates是用来Django模版语言（Django Template Language, DTL）</li><li>也可以使用第三方模版（如Jinja2）</li></ul><p>要修改模版引擎，在<code>settings.py</code>文件中找到<code>TEMPLATES</code>修改键值对<code>&#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,</code>改为要使用的模版引擎就可以了。</p><p>步骤：</p><ul><li>在APP的根目录下创建名叫templates的目录，如<code>myblog/blog/templates</code></li><li>在templates目录下创建HTML文件,如<code>index.html</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Blog&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Hello, Blog!&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>在<code>views.py</code>中返回<code>render()</code>：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return render(request, &apos;index.html&apos;)</span><br></pre></td></tr></table></figure><p>然后访问<code>http://localhost:8000/blog/index/</code>就会出现<code>index.html</code>页面了。</p><p>DTL初步使用：</p><ul><li><code>render()</code>函数中支持一个<strong>dict</strong>类型参数</li><li>该字典是后台传递到模版的参数，<strong>键</strong>为<strong>参数名</strong></li><li>在模版中用<code></code>来直接使用</li></ul><p>所以，上面的<code>views.py</code>可以改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.shortcuts import render</span><br><span class="line"></span><br><span class="line">def index(request):</span><br><span class="line">    return render(request, &apos;index.html&apos;, &#123;&apos;hello&apos;: &apos;Hello, Blog!&apos;&#125;)</span><br></pre></td></tr></table></figure></p><p>然后，<code>index.html</code>中的<code>&lt;h1&gt;</code>可以改成:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; hello &#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：<br>Django按照<code>INSTALLED_APPS</code>中的添加顺序查找templates，<strong>不同APP</strong>下templs目录中的<strong>同名HTML</strong>文件会造成<strong>冲突</strong></p><p>解决templates冲突方案：<br>在<strong>APP</strong>的templates目录下创建以<strong>APP名</strong>为名称的目录，将<strong>html文件</strong>放入新创建的目录下。所以，新建templates目录时都在该目录下新建一个与应用名同名的目录。</p><h3 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h3><p>Django中的Models：</p><ul><li>通常，<strong>一个Model</strong>对应数据库的<strong>一张表</strong></li><li>Django中的Models以<strong>类</strong>的形式表现</li><li>它包含了一些<strong>基本字段</strong>以及数据的<strong>一些行为</strong></li></ul><p><strong>ORM</strong>：</p><ul><li>对象关系映射（Object Relation Mapping）</li><li>实现了<strong>对象</strong>和<strong>数据库</strong>之间的<strong>映射</strong></li><li>隐藏了数据访问的细节，不需要编写<strong>SQL语句</strong></li></ul><h4 id="编写Models"><a href="#编写Models" class="headerlink" title="编写Models"></a>编写Models</h4><ul><li>在应用根目录下创建<code>models.py</code>，并引入<code>models</code>模块</li><li>创建类，继承<code>models.Model</code>，该类即是一张数据表</li><li>在类中创建字段</li></ul><p>字段即类里面的<strong>属性</strong>（变量）,字段创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attr = models.CharField(max_length=64)</span><br></pre></td></tr></table></figure></p><p>关于类的字段及可选参数等设置可以<a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/" target="_blank" rel="noopener">点击官网</a>查看</p><h4 id="生成数据表"><a href="#生成数据表" class="headerlink" title="生成数据表"></a>生成数据表</h4><p>命令行中进入<code>manage.py</code>同级目录执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations app_name（可选）</span><br></pre></td></tr></table></figure></p><p>不写应用名<code>app_name</code>默认该项目下所有应用都生成数据迁移。<br>执行之后可以看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Migrations for &apos;blog&apos;:</span><br><span class="line">  blog\migrations\0001_initial.py</span><br><span class="line">    - Create model Arcticle</span><br></pre></td></tr></table></figure></p><p>之后，再执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></p><p>可以看到结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, blog, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying blog.0001_initial... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure></p><p>上面那些<code>auth</code>、<code>admin</code>等是<code>settings</code>里<code>INSTALLED_APPS</code>自带应用的数据迁移。</p><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><p>Django会自动在<code>app_name/migrations/</code>目录下生成移植文件。<br>可以看到在<code>blog\migrations\0001_initial.py</code>文件里的<code>fields</code>有多一个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;id&apos;, models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name=&apos;ID&apos;)),</span><br></pre></td></tr></table></figure></p><p>这是因为在创建模型时我们没有人为添加<strong>主键</strong>，所以Django为数据表创建了这个主键，如果人为添加主键就不会有这个id了。</p><p>执行以下命令查看SQL语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py sqlmigrate 应用名 文件id</span><br></pre></td></tr></table></figure></p><p>如：<code>python manage.py sqlmigrate blog 0001</code>可以看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">--</span><br><span class="line">-- Create model Arcticle</span><br><span class="line">--</span><br><span class="line">CREATE TABLE &quot;blog_arcticle&quot; (&quot;id&quot; integer NOT NULL PRIMARY KEY AUTOINCREMENT, &quot;title&quot; varchar(32) NOT NULL, &quot;content&quot; text NULL);</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure></p><p>默认<strong>sqllite3</strong>的数据库在项目根目录下<code>db.sqlite3</code></p><p>查看并编辑<code>db.sqlite3</code>使用轻量级第三方免费软件：<a href="http://www.sqliteexpert.com/download.html" target="_blank" rel="noopener">SQLite Expert Personal</a><br>就可以在<code>blog_article</code>表中增加一条测试数据。</p><h4 id="页面呈现数据"><a href="#页面呈现数据" class="headerlink" title="页面呈现数据"></a>页面呈现数据</h4><p>后台步骤：<br><code>views.py</code>中<code>import models</code><br>获取模型累的一个具体对象:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">article = models.Article.objects.get(pk=1)</span><br></pre></td></tr></table></figure></p><p><code>get()</code>的参数就是要指定的数据的标识，除了<code>pk</code>也可以用<code>title</code>或<code>content</code>。其实就相当于<code>SELECT</code>语句。<br>之后使用<code>render()</code>把<strong>对象</strong>传递到前端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render(request, page, &#123;&apos;article&apos;: article&#125;)</span><br></pre></td></tr></table></figure></p><p>前端步骤：<br>模版可直接使用对象以及对象的“.”操作，如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; article.title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123; article.content &#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure></p><h3 id="Admin"><a href="#Admin" class="headerlink" title="Admin"></a>Admin</h3><ul><li>Admin是Django自带的一个功能强大的<strong>自动化数据管理界面</strong></li><li>被授权的用户可直接在Admin中管理数据库</li><li>Django提供了许多针对Admin的定制功能</li></ul><h4 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h4><p>执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></p><p>然后输入用户名、密码，邮箱可以留空。</p><p>通过<code>http://localhost:8000/admin</code>访问管理系统，系统默认是英文的，要改成中文可以修改<code>settings.py</code>中的<code>LANGUAGE_CODE</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = &apos;zh-Hans&apos;</span><br></pre></td></tr></table></figure></p><h4 id="配置应用"><a href="#配置应用" class="headerlink" title="配置应用"></a>配置应用</h4><p>在应用下<code>admin.py</code>中引入<strong>自身的models</strong>模块（或里面的模型类），然后编辑<code>admin.py</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.site.register(models.Article)</span><br></pre></td></tr></table></figure></p><p>然后Admin管理系统里就会出现Blog管理，包括Article的增删改查操作。</p><h4 id="修改数据默认显示名称"><a href="#修改数据默认显示名称" class="headerlink" title="修改数据默认显示名称"></a>修改数据默认显示名称</h4><p>可以看到在Article管理界面，数据默认显示名称是<code>Arcticle object</code>，要修改成显示文章title：</p><ul><li>在<code>Article</code>类下添加一个方法</li><li>方法名：Python3：<code>__str__(self)</code>、Python2：<code>__unicode__(self)</code></li><li><code>return self.title</code></li></ul><h3 id="完善博客"><a href="#完善博客" class="headerlink" title="完善博客"></a>完善博客</h3><p>页面概要：</p><ul><li>博客主页面</li><li>博客文章内容页面</li><li>博客撰写页面</li></ul><h4 id="博客页面开发"><a href="#博客页面开发" class="headerlink" title="博客页面开发"></a>博客页面开发</h4><p>博客主页面：</p><ul><li>文章标题列表，超链接</li><li>发表博客按钮（超链接）</li></ul><p>文章标题列表编写思路：</p><ul><li>取出数据库中所有文章对象</li><li>将文章对象打包成列表，传递到前端</li><li>前端页面把文章以标题超链接的形式逐个排列，模版for循环（<strong>注意这里不是两个花括号！</strong>）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for xx in xxs %&#125;</span><br><span class="line">HTML语句</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>views.py</code>的<code>index()</code>函数改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def index(request):</span><br><span class="line">    articles = models.Arcticle.objects.all()  # 获取所有文章</span><br><span class="line">    return render(request, &apos;blog/index.html&apos;, &#123;&apos;articles&apos;: articles&#125;)</span><br></pre></td></tr></table></figure></p><p><code>index.html</code>页面内容改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line">    &lt;a href=&quot;&quot;&gt;新增文章&lt;/a&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&#123;% for article in articles %&#125;</span><br><span class="line">    &lt;a href=&quot;&quot;&gt;&#123;&#123; article.title &#125;&#125;&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h4 id="博客文章页面开发"><a href="#博客文章页面开发" class="headerlink" title="博客文章页面开发"></a>博客文章页面开发</h4><p>页面内容：</p><ul><li>标题</li><li>文章内容</li><li>修改文章按钮（超链接）</li></ul><p><code>views.py</code>新增函数<code>article_page()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def article_page(request, article_id):</span><br><span class="line">    article = models.Arcticle.objects.get(pk=article_id)</span><br><span class="line">    return render(request, &apos;blog/article_page.html&apos;, &#123;&apos;article&apos;: article&#125;)</span><br></pre></td></tr></table></figure></p><p>新增一个<code>templates/blog/article_page.html</code>填如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123; article.title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123; article.content &#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;a href=&quot;&quot;&gt;修改文章&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>修改<code>blog/urls.py</code><strong>是应用里自行新建的<code>urls.py</code></strong>增加文章的URL配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^index/$&apos;, views.index),</span><br><span class="line">    url(r&apos;^article/(?P&lt;article_id&gt;[0-9]+)/$&apos;, views.article_page),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><strong>注意写法</strong>：把匹配到的数字以<code>article_id</code>作为组名，<strong>组名</strong>必须和<strong>响应函数</strong>的<strong>参数名</strong>一致，否则会报错。</p><h4 id="Django模版中的超链接配置"><a href="#Django模版中的超链接配置" class="headerlink" title="Django模版中的超链接配置"></a>Django模版中的超链接配置</h4><p>超链接目标地址：</p><ul><li><code>href</code>后面是目标地址</li><li><p>template中可以用以下语句配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% url &apos;app_name:url_name&apos; param %&#125;</span><br></pre></td></tr></table></figure></li><li><p>其中<code>app_name</code>和<code>url_name</code>都在url中配置</p></li></ul><p><code>url()</code>函数的名称参数：</p><ul><li>根<code>urls.py</code>，写在<code>include()</code>的第二个参数位置，<code>namespace=&#39;blog&#39;</code></li><li>应用下则写在<code>url()</code>的第三个参数位置，<code>name=&#39;article&#39;</code></li><li>主要取决于是否使用<code>include</code>引用了另一个URL配置文件</li></ul><p>所以我们先修改根<code>urls.py</code>,<code>include()</code>的第二个参数写上<code>namespace</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^admin/&apos;, admin.site.urls),</span><br><span class="line">    url(r&apos;^blog/&apos;, include(&apos;blog.urls&apos;, namespace=&apos;blog&apos;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>然后修改应用blog下的<code>urls,py</code>，在<code>url()</code>的第三个参数位置，写上<code>name</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(r&apos;^index/$&apos;, views.index),</span><br><span class="line">    url(r&apos;^article/(?P&lt;article_id&gt;[0-9]+)/$&apos;, views.article_page, name=&apos;article_page&apos;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p><code>index.html</code>页面for循环里的<code>&lt;a&gt;</code>标签做些修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line">    &lt;a href=&quot;&quot;&gt;新增文章&lt;/a&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line">&#123;% for article in articles %&#125;</span><br><span class="line">    &lt;a href=&quot;&#123;% url &apos;blog:article_page&apos; article.id %&#125;&quot;&gt;&#123;&#123; article.title &#125;&#125;&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></p><h4 id="博客撰写页面"><a href="#博客撰写页面" class="headerlink" title="博客撰写页面"></a>博客撰写页面</h4><p>页面内容：</p><ul><li>标题编辑栏</li><li>文章内容编辑区域</li><li>提交按钮</li></ul><p>编辑响应函数</p><ul><li>使用<code>request.POST[&#39;参数名&#39;]</code>获取表单数据，或者<code>request.POST.get(&#39;title&#39;, &#39;TITLE&#39;)</code>，<code>TITLE</code>为设置的默认值</li><li>使用以下语句创建对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">models.Article.objects.create(title,content)</span><br></pre></td></tr></table></figure></li></ul><p>修改<code>views.py</code>添加<code>edit_page()</code>函数用于显示一个<code>edit_page.html</code>修改页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def edit_page(request):</span><br><span class="line">    return render(request, &apos;blog/edit_page.html&apos;)</span><br></pre></td></tr></table></figure></p><p>修改<code>views.py</code>添加<code>edit_action()</code>函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def edit_action(request):</span><br><span class="line">    title = request.POST.get(&apos;title&apos;, &apos;TITLE&apos;)</span><br><span class="line">    content = request.POST.get(&apos;content&apos;, &apos;CONTENT&apos;)</span><br><span class="line">    models.Arcticle.objects.create(title=title, content=content)</span><br><span class="line">    articles = models.Arcticle.objects.all()</span><br><span class="line">    return render(request, &apos;blog/index.html&apos;, &#123;&apos;articles&apos;: articles&#125;)</span><br></pre></td></tr></table></figure></p><p>修改<code>blog/urls.py</code>的URL配置新增修改页面的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^edit/$&apos;, views.edit_page, name=&apos;edit_page&apos;),</span><br><span class="line">url(r&apos;^edit/action/$&apos;, views.edit_action, name=&apos;edit_action&apos;),</span><br></pre></td></tr></table></figure></p><p>新建一个<code>templates/blog/edit_page.html</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;&#123;% url &apos;blog:edit_action&apos; %&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;label&gt;文章标题：</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;title&quot;/&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;label&gt;文章内容：</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;content&quot;/&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>出于安全性，POST请求都需要加以下语句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure></p><p>否则会报错403。</p><p>我们在新建博客成功之后，会跳转到首页，可以发现浏览器里地址还是指向刚才的提交表单地址，这时候刷新页面，会多添加一条数据。将<code>edit_action()</code>函数的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">articles = models.Arcticle.objects.all()</span><br><span class="line">return render(request, &apos;blog/index.html&apos;, &#123;&apos;articles&apos;: articles&#125;)</span><br></pre></td></tr></table></figure></p><p>改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return HttpResponseRedirect(&apos;/blog/index&apos;)</span><br></pre></td></tr></table></figure></p><p>防止这种情况。</p><p>接下来看修改文章链接的完善，它与新文章编辑页面的区别：</p><ul><li>新文章为空，修改文章有内容</li><li>修改文章页面有文章对象</li><li>这个文章对象通过文章ID指定</li></ul><p>修改数据：</p><ul><li><code>article.title = title</code></li><li><code>article.content = content</code></li><li><code>article().save()</code></li></ul><p>修改<code>views.py</code>的<code>edit_page()</code>函数，主键ID是从1开始的，所以新建文章时传入参数<code>0</code>，返回空的新建文章页面，而修改时则传入文章ID，找到这篇文章并将该对象返回前端页面显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def edit_page(request, article_id):</span><br><span class="line">    if str(article_id) == &apos;0&apos;:  </span><br><span class="line">        return render(request, &apos;blog/edit_page.html&apos;)</span><br><span class="line">    article = models.Arcticle.objects.get(pk=article_id)</span><br><span class="line">    return render(request, &apos;blog/edit_page.html&apos;, &#123;&apos;article&apos;: article&#125;)</span><br></pre></td></tr></table></figure></p><p>修改<code>views.py</code>的<code>edit_action()</code>函数实现<code>article_id</code>为<code>0</code>则新建文章，为已有文章ID则修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def edit_action(request):</span><br><span class="line">    title = request.POST.get(&apos;title&apos;, &apos;TITLE&apos;)  # 也可以用request.POST[&apos;title&apos;]，这里的TITLE为默认值</span><br><span class="line">    content = request.POST.get(&apos;content&apos;, &apos;CONTENT&apos;)</span><br><span class="line">    article_id = request.POST.get(&apos;article_id&apos;, &apos;0&apos;)</span><br><span class="line"></span><br><span class="line">    if article_id == &apos;0&apos;:</span><br><span class="line">        models.Arcticle.objects.create(title=title, content=content)</span><br><span class="line">        return HttpResponseRedirect(&apos;/blog/index&apos;)</span><br><span class="line">    article = models.Arcticle.objects.get(pk=article_id)</span><br><span class="line">    article.title = title</span><br><span class="line">    article.content = content</span><br><span class="line">    article.save()</span><br><span class="line">    return render(request, &apos;blog/article_page.html&apos;, &#123;&apos;article&apos;: article&#125;)</span><br></pre></td></tr></table></figure></p><p>修改<code>blog/urls.py</code>的URL配置<code>url(r&#39;^edit/$&#39;, views.edit_page, name=&#39;edit_page&#39;),</code>改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(r&apos;^edit/(?P&lt;article_id&gt;[0-9]+)/$&apos;, views.edit_page, name=&apos;edit_page&apos;),</span><br></pre></td></tr></table></figure></p><p>修改<code>article_page.html</code>里的<code>&lt;a&gt;</code>标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;% url &apos;blog:edit_page&apos; article.id %&#125;&quot;&gt;修改文章&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>修改<code>edit_page.html</code>的form表单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;&#123;% url &apos;blog:edit_action&apos; %&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;!--出于安全性，POST请求都需要加这句话，否则会报错403--&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;% if article %&#125;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;article_id&quot; value=&quot;&#123;&#123; article.id &#125;&#125;&quot;/&gt;</span><br><span class="line">        &lt;label&gt;文章标题：</span><br><span class="line">            &lt;input type=&quot;text&quot; name=&quot;title&quot; value=&quot;&#123;&#123; article.title &#125;&#125;&quot;/&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;label&gt;文章内容：</span><br><span class="line">            &lt;input type=&quot;text&quot; name=&quot;content&quot; value=&quot;&#123;&#123; article.content &#125;&#125;&quot;/&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        &lt;input type=&quot;hidden&quot; name=&quot;article_id&quot; value=&quot;0&quot;/&gt;</span><br><span class="line">        &lt;label&gt;文章标题：</span><br><span class="line">            &lt;input type=&quot;text&quot; name=&quot;title&quot;/&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">        &lt;label&gt;文章内容：</span><br><span class="line">            &lt;input type=&quot;text&quot; name=&quot;content&quot;/&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>也可以写的比较简洁：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;&#123;% url &apos;blog:edit_action&apos; %&#125;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;!--出于安全性，POST请求都需要加这句话，否则会报错403--&gt;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &lt;input type=&quot;hidden&quot; name=&quot;article_id&quot; value=&quot;&#123;% if article %&#125;&#123;&#123; article.id &#125;&#125;&#123;% else %&#125;0&#123;% endif %&#125;&quot;/&gt;</span><br><span class="line">    &lt;label&gt;文章标题：</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;title&quot; value=&quot;&#123;% if article %&#125;&#123;&#123; article.title &#125;&#125;&#123;% endif %&#125;&quot;/&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;label&gt;文章内容：</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;content&quot; value=&quot;&#123;% if article %&#125;&#123;&#123; article.content &#125;&#125;&#123;% endif %&#125;&quot;/&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p><p>要稍微注意的就是<strong>第一个</strong>用于传递<code>article_id</code>的<code>&lt;input&gt;</code>标签里<code>0</code>左右<strong>不要有空格</strong>，否则会一起传值到后台产生错误。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="Templates过滤器"><a href="#Templates过滤器" class="headerlink" title="Templates过滤器"></a>Templates过滤器</h4><p>过滤器：</p><ul><li>写在模版中，属于Django模版语言</li><li>可以修改模版中的变量，从而显示不同的内容</li></ul><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value | filter &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; list_nums | length &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>过滤器可叠加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; value | filter1 | filter2 |...&#125;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong>如果模版中出现了不存在的变量，Django不会报错，只会给一个空值（空字符串）。</p><p>使用过滤器，前面<code>edit_page.html</code>的form表单可以更简单地改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;article_id&quot; value=&quot;&#123;&#123; article.id | default:&apos;0&apos; &#125;&#125;&quot;/&gt;</span><br><span class="line">    &lt;label&gt;文章标题：</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;title&quot; value=&quot;&#123;&#123; article.title &#125;&#125;&quot;/&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;label&gt;文章内容：</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;content&quot; value=&quot;&#123;&#123; article.content &#125;&#125;&quot;/&gt;</span><br><span class="line">    &lt;/label&gt;</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>更多Django内建过滤器<a href="https://docs.djangoproject.com/en/1.11/ref/templates/builtins/#ref-templates-builtins-filters" target="_blank" rel="noopener">访问官方文档</a></p><h4 id="Django-Shell"><a href="#Django-Shell" class="headerlink" title="Django Shell"></a>Django Shell</h4><p>Django Shell：</p><ul><li>它是一个Python的交互式命令行程序</li><li>它自动引入了我们的项目环境</li><li>我们可以使用它与我们的项目进行交互</li></ul><p>使用：<br>运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure></p><p>如果安装了ipython，这个命令就会加载ipython解释器，否则会加载Python自带解释器。</p><p>然后可以在该环境中直接与项目交互：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from blog.models import Article</span><br><span class="line">Article.objects.all()</span><br></pre></td></tr></table></figure></p><p>以上命令会得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [1]: from blog.models import Article</span><br><span class="line"></span><br><span class="line">In [2]: Article.objects.all()</span><br><span class="line">Out[2]: &lt;QuerySet [&lt;Article: 我的第一篇文章&gt;, &lt;Article: Title&gt;]&gt;</span><br></pre></td></tr></table></figure></p><p>以title是因为我们之前在<code>models.py</code>写了<code>__str__(self)</code>方法设置显示title。</p><p>用途：</p><ul><li>可以使用Django Shell进行一些调试工作</li><li>测试未知的（文档或网上得知的）方法或函数</li></ul><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [3]: Article.objects.all().values()</span><br><span class="line">Out[3]: &lt;QuerySet [&#123;&apos;id&apos;: 1, &apos;title&apos;: &apos;我的第一篇文章&apos;, &apos;content&apos;: &apos;太阳当空照，花儿对我笑，小鸟说早早早，你为什么背上炸药包？……&apos;&#125;, &#123;&apos;id&apos;: 2, &apos;title&apos;: &apos;Title&apos;, &apos;content&apos;: &apos;哈哈哈哈wwww&apos;&#125;]&gt;</span><br></pre></td></tr></table></figure></p><h4 id="Admin增强"><a href="#Admin增强" class="headerlink" title="Admin增强"></a>Admin增强</h4><p>我们可以自行修改Admin管理系统中的显示内容，比如除了显示文章的title，把内容等也在之后的列显示。方法如下：</p><p>创建admin配置类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class ArticleAdmin(admin.ModelAdmin)</span><br></pre></td></tr></table></figure></p><p>改变注册：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.site.register(Article, ArticleAdmin)</span><br></pre></td></tr></table></figure></p><p>修改<code>admin.py</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from blog.models import Article</span><br><span class="line"></span><br><span class="line">class ArticleAdmin(admin.ModelAdmin):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">admin.site.register(Article, ArticleAdmin)</span><br></pre></td></tr></table></figure></p><p>这时候浏览器打开Admin管理系统，没报错就可以开始实现功能了。</p><p>显示其他字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_display = (&apos;title&apos;, &apos;content&apos;)</span><br></pre></td></tr></table></figure></p><p><code>list_display</code>属性的值是一个包含<strong>字符串</strong>格式的<strong>字段名</strong>的<strong>tuple</strong>或<strong>list</strong>。建议使用tuple，因为tuple不可变，比较安全。</p><p><strong>注意</strong>：字段名必须是<strong>字符串！</strong>而且要与Model一致不要写错。</p><p>过滤器：<br>和Templates过滤器没有关系。这是用于筛选数据方便管理的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list_filter = (&apos;pub_time&apos;, )  # tuple只有一个元素时记得加个逗号</span><br></pre></td></tr></table></figure></p><p>更多关于Admin的功能可以查看<a href="https://docs.djangoproject.com/en/1.11/ref/contrib/admin/" target="_blank" rel="noopener">官方文档</a></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>教程到这里就结束了，代码可以点击<a href="https://github.com/JianFengY/myblog" target="_blank" rel="noopener">我的GitHub</a>查看。</p>]]></content>
    
    <summary type="html">
    
      Python的Web框架Django入门
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="Django" scheme="http://jeffyang.top/categories/Python/Django/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="Django" scheme="http://jeffyang.top/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫常用库pyquery详解</title>
    <link href="http://jeffyang.top/Python/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB%E5%B8%B8%E7%94%A8%E5%BA%93pyquery%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jeffyang.top/Python/爬虫/Python爬虫常用库pyquery详解/</id>
    <published>2018-02-22T06:29:43.000Z</published>
    <updated>2018-02-26T17:52:10.133Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>pyquery是一个强大的网页解析库。如果熟悉jquery，那么pyquery用起来也会很简单。</p><p>官方的说法是：</p><blockquote><p>pyquery allows you to make jquery queries on xml documents. The API is as much as possible the similar to jquery. pyquery uses lxml for fast xml and html manipulation.</p></blockquote><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="通过字符串初始化"><a href="#通过字符串初始化" class="headerlink" title="通过字符串初始化"></a>通过字符串初始化</h4><p>导入一般都这样写：<code>from pyquery import PyQuery as pq</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [1]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [2]: html = &apos;&apos;&apos;</span><br><span class="line">   ...: &lt;div&gt;</span><br><span class="line">   ...:     &lt;ul&gt;</span><br><span class="line">   ...:          &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">   ...:          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">   ...:          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">   ...:          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">   ...:          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">   ...:      &lt;/ul&gt;</span><br><span class="line">   ...:  &lt;/div&gt;</span><br><span class="line">   ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [3]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [4]: print(doc(&apos;li&apos;))</span><br><span class="line">&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>使用<code>pq(html)</code>初始化对象后就可以像jquery一样使用选择器了。</p><h4 id="通过URL初始化"><a href="#通过URL初始化" class="headerlink" title="通过URL初始化"></a>通过URL初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [5]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [6]: doc = pq(url=&apos;http://www.baidu.com&apos;)</span><br><span class="line"></span><br><span class="line">In [7]: print(doc(&apos;head&apos;))</span><br><span class="line">&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;/&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;/&gt;&lt;meta content=&quot;always&quot; name=&quot;referrer&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&quot;/&gt;&lt;title&gt;ç¾åº¦ä¸ä¸ï¼ä½ å°±ç¥é&lt;/title&gt;&lt;/head&gt;</span><br></pre></td></tr></table></figure><h4 id="通过文件初始化"><a href="#通过文件初始化" class="headerlink" title="通过文件初始化"></a>通过文件初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [8]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [9]: doc = pq(filename=&apos;demo.html&apos;)</span><br><span class="line"></span><br><span class="line">In [10]: print(doc(&apos;li&apos;))</span><br><span class="line">&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>当然，这需要在当前目录下有一个<code>demo.html</code>文件。</p><h3 id="基本CSS选择器"><a href="#基本CSS选择器" class="headerlink" title="基本CSS选择器"></a>基本CSS选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [11]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [12]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:     &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:      &lt;/ul&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [13]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [14]: print(doc(&apos;#container .list li&apos;))</span><br><span class="line">&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p><code>doc(&#39;#container .list li&#39;)</code>选择<code>id</code>为<code>container</code>的元素的下层元素里<code>class</code>为<code>list</code>的元素里查找<code>li</code>标签。这些元素不需要是直接的父与子元素，只要是有层级关系就可以就可以。</p><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><h4 id="子元素"><a href="#子元素" class="headerlink" title="子元素"></a>子元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">In [15]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [16]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:     &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:      &lt;/ul&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [17]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [18]: items = doc(&apos;.list&apos;)</span><br><span class="line"></span><br><span class="line">In [19]: print(type(items))</span><br><span class="line">&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [20]: print(items)</span><br><span class="line">&lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [21]: lis = items.find(&apos;li&apos;)</span><br><span class="line"></span><br><span class="line">In [22]: print(type(lis))</span><br><span class="line">&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [23]: print(lis)</span><br><span class="line">&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p><code>find()</code>找出所有符合条件的下层元素。可以看到，结果都是<code>PyQuery</code>对象。</p><p>此外，还有一个<code>chilren()</code>，它是找出直接子元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [24]: lis = items.children()</span><br><span class="line"></span><br><span class="line">In [25]: print(type(lis))</span><br><span class="line">&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [26]: print(lis)</span><br><span class="line">&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>当然，这里输出的结果和上面一样。<br><code>children()</code>也可以传入参数，如查找<code>class</code>为<code>active</code>的子标签：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [27]: lis = items.children(&apos;.active&apos;)</span><br><span class="line"></span><br><span class="line">In [28]: print(lis)</span><br><span class="line">&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><h4 id="父元素"><a href="#父元素" class="headerlink" title="父元素"></a>父元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">In [29]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [30]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:     &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:      &lt;/ul&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [31]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [32]: items = doc(&apos;.list&apos;)</span><br><span class="line"></span><br><span class="line">In [33]: container = items.parent()</span><br><span class="line"></span><br><span class="line">In [34]: print(type(container))</span><br><span class="line">&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [35]: print(container)</span><br><span class="line">&lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p><code>parent()</code>找出父元素，父元素只有一个，此外，还有<code>parents()</code>，它找出所有祖先元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">In [36]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [37]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    ...:     &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:         &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;/ul&gt;</span><br><span class="line">    ...:      &lt;/div&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [38]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [39]: items = doc(&apos;.list&apos;)</span><br><span class="line"></span><br><span class="line">In [40]: parents = items.parents()</span><br><span class="line"></span><br><span class="line">In [41]: print(type(parents))</span><br><span class="line">&lt;class &apos;pyquery.pyquery.PyQuery&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [42]: print(parents)</span><br><span class="line">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">             &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;/ul&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;&lt;div id=&quot;container&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">             &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;/ul&gt;</span><br><span class="line">     &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><code>parents()</code>还可以传入一个css选择器进行筛选：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [43]: parent = items.parents(&apos;.wrap&apos;)</span><br><span class="line"></span><br><span class="line">In [44]: print(parent)</span><br><span class="line">&lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">        &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">             &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">         &lt;/ul&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h4 id="兄弟元素"><a href="#兄弟元素" class="headerlink" title="兄弟元素"></a>兄弟元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [45]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [46]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    ...:     &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:         &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;/ul&gt;</span><br><span class="line">    ...:      &lt;/div&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [47]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [48]: li = doc(&apos;.list .item-0.active&apos;)</span><br><span class="line"></span><br><span class="line">In [49]: print(li.siblings())</span><br><span class="line">&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>这里<code>doc(&#39;.list .item-0.active&#39;)</code>在<code>class</code>为<code>list</code>的元素里筛选<code>class</code>包含<code>item-0</code>和<code>active</code>的元素。<strong>注意</strong>：这里<code>.item-0.active</code>中间没有空格，中间的<code>.</code>表示并列。结果只会有<code>&lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</code>这一条，然后<code>siblings()</code>找出兄弟节点。</p><p>当然，<code>siblings()</code>也可以传入选择器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [50]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [51]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    ...:     &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:         &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;/ul&gt;</span><br><span class="line">    ...:      &lt;/div&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [52]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [53]: li = doc(&apos;.list .item-0.active&apos;)</span><br><span class="line"></span><br><span class="line">In [54]: print(li.siblings(&apos;.active&apos;))</span><br><span class="line">&lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">In [55]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [56]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    ...:     &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:         &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;/ul&gt;</span><br><span class="line">    ...:      &lt;/div&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [57]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [58]: lis = doc(&apos;li&apos;).items()</span><br><span class="line"></span><br><span class="line">In [59]: print(type(lis))</span><br><span class="line">&lt;class &apos;generator&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [60]: for li in lis:</span><br><span class="line">    ...:     print(li)</span><br><span class="line">    ...:</span><br><span class="line">&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">&lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>使用<code>.items()</code>把结果变成一个生成器。然后就可以用for循环遍历。</p><h3 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h3><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">In [61]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [62]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    ...:     &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:         &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;/ul&gt;</span><br><span class="line">    ...:      &lt;/div&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [63]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [64]: a = doc(&apos;.item-0.active a&apos;)</span><br><span class="line"></span><br><span class="line">In [65]: print(a)</span><br><span class="line">&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">In [66]: print(a.attr(&apos;href&apos;))</span><br><span class="line">link3.html</span><br><span class="line"></span><br><span class="line">In [67]: print(a.attr.href)</span><br><span class="line">link3.html</span><br></pre></td></tr></table></figure><p>使用<code>.attr(&#39;href&#39;)</code>或者直接使用<code>.</code>都可以访问属性。</p><h4 id="获取文本"><a href="#获取文本" class="headerlink" title="获取文本"></a>获取文本</h4><p>直接使用<code>.text()</code>就可以获取文本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [68]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [69]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    ...:     &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:         &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;/ul&gt;</span><br><span class="line">    ...:      &lt;/div&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [70]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [71]: a = doc(&apos;.item-0.active a&apos;)</span><br><span class="line"></span><br><span class="line">In [72]: print(a)</span><br><span class="line">&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">In [73]: print(a.text())</span><br><span class="line">third item</span><br></pre></td></tr></table></figure></p><h4 id="获取HTML"><a href="#获取HTML" class="headerlink" title="获取HTML"></a>获取HTML</h4><p><code>.html()</code>获取选中标签包含的HTML代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">In [74]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [75]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    ...:     &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:         &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;/ul&gt;</span><br><span class="line">    ...:      &lt;/div&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [76]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [77]: li = doc(&apos;.item-0.active&apos;)</span><br><span class="line"></span><br><span class="line">In [78]: print(li)</span><br><span class="line">&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [79]: print(li.html())</span><br><span class="line">&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><h3 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h3><h4 id="addClass-、removeClass"><a href="#addClass-、removeClass" class="headerlink" title="addClass()、removeClass()"></a>addClass()、removeClass()</h4><p>添加或删除<code>class</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [80]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [81]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    ...:     &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:         &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;/ul&gt;</span><br><span class="line">    ...:      &lt;/div&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [82]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [83]: li = doc(&apos;.item-0.active&apos;)</span><br><span class="line"></span><br><span class="line">In [84]: print(li)</span><br><span class="line">&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [85]: li.removeClass(&apos;active&apos;)</span><br><span class="line">Out[85]: [&lt;li.item-0&gt;]</span><br><span class="line"></span><br><span class="line">In [86]: print(li)</span><br><span class="line">&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [87]: li.addClass(&apos;active&apos;)</span><br><span class="line">Out[87]: [&lt;li.item-0.active&gt;]</span><br><span class="line"></span><br><span class="line">In [88]: print(li)</span><br><span class="line">&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><h4 id="attr-、css"><a href="#attr-、css" class="headerlink" title="attr()、css()"></a>attr()、css()</h4><p>修改属性或css：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">In [89]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [90]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    ...:     &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">    ...:         &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:              &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    ...:          &lt;/ul&gt;</span><br><span class="line">    ...:      &lt;/div&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [91]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [92]: li = doc(&apos;.item-0.active&apos;)</span><br><span class="line"></span><br><span class="line">In [93]: print(li)</span><br><span class="line">&lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [94]: li.attr(&apos;name&apos;, &apos;link&apos;)</span><br><span class="line">Out[94]: [&lt;li.item-0.active&gt;]</span><br><span class="line"></span><br><span class="line">In [95]: print(li)</span><br><span class="line">&lt;li class=&quot;item-0 active&quot; name=&quot;link&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [96]: li.css(&apos;font-size&apos;, &apos;14px&apos;)</span><br><span class="line">Out[96]: [&lt;li.item-0.active&gt;]</span><br><span class="line"></span><br><span class="line">In [97]: print(li)</span><br><span class="line">&lt;li class=&quot;item-0 active&quot; name=&quot;link&quot; style=&quot;font-size: 14px&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>删除指定元素：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [98]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [99]: html = &apos;&apos;&apos;</span><br><span class="line">    ...: &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">    ...:     Hello, World</span><br><span class="line">    ...:     &lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line">    ...:  &lt;/div&gt;</span><br><span class="line">    ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [100]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [101]: wrap = doc(&apos;.wrap&apos;)</span><br><span class="line"></span><br><span class="line">In [102]: print(wrap.text())</span><br><span class="line">Hello, World</span><br><span class="line">This is a paragraph.</span><br><span class="line"></span><br><span class="line">In [103]: wrap.find(&apos;p&apos;).remove()</span><br><span class="line">Out[103]: [&lt;p&gt;]</span><br><span class="line"></span><br><span class="line">In [104]: print(wrap.text())</span><br><span class="line">Hello, World</span><br></pre></td></tr></table></figure></p><h4 id="其他DOM方法"><a href="#其他DOM方法" class="headerlink" title="其他DOM方法"></a>其他DOM方法</h4><p>其他DOM方法可以<a href="http://pyquery.readthedocs.io/en/latest/api.html" target="_blank" rel="noopener">参考文档</a>。</p><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">In [105]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [106]: html = &apos;&apos;&apos;</span><br><span class="line">     ...: &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">     ...:     &lt;div id=&quot;container&quot;&gt;</span><br><span class="line">     ...:         &lt;ul class=&quot;list&quot;&gt;</span><br><span class="line">     ...:              &lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line">     ...:              &lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">     ...:              &lt;li class=&quot;item-0 active&quot;&gt;&lt;a href=&quot;link3.html&quot;&gt;&lt;span class=&quot;bold&quot;&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">     ...:              &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">     ...:              &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">     ...:          &lt;/ul&gt;</span><br><span class="line">     ...:      &lt;/div&gt;</span><br><span class="line">     ...:  &lt;/div&gt;</span><br><span class="line">     ...: &apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">In [107]: doc = pq(html)</span><br><span class="line"></span><br><span class="line">In [108]: li = doc(&apos;li:first-child&apos;)</span><br><span class="line"></span><br><span class="line">In [109]: print(li)</span><br><span class="line">&lt;li class=&quot;item-0&quot;&gt;first item&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [110]: li = doc(&apos;li:last-child&apos;)</span><br><span class="line"></span><br><span class="line">In [111]: print(li)</span><br><span class="line">&lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [112]: li = doc(&apos;li:nth-child(2)&apos;)</span><br><span class="line"></span><br><span class="line">In [113]: print(li)</span><br><span class="line">&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [114]: li = doc(&apos;li:gt(2)&apos;)</span><br><span class="line"></span><br><span class="line">In [115]: print(li)</span><br><span class="line">&lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-0&quot;&gt;&lt;a href=&quot;link5.html&quot;&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [116]: li = doc(&apos;li:nth-child(2n)&apos;)</span><br><span class="line"></span><br><span class="line">In [117]: print(li)</span><br><span class="line">&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">             &lt;li class=&quot;item-1 active&quot;&gt;&lt;a href=&quot;link4.html&quot;&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [118]: li = doc(&apos;li:contains(second)&apos;)</span><br><span class="line"></span><br><span class="line">In [119]: print(li)</span><br><span class="line">&lt;li class=&quot;item-1&quot;&gt;&lt;a href=&quot;link2.html&quot;&gt;second item&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>更多有关css选择器的内容可以<a href="http://www.w3school.com.cn/css/css_selector_type.asp" target="_blank" rel="noopener">参考w3school</a>，更多有关pyquery的内容可以<a href="http://pyquery.readthedocs.io/en/latest/" target="_blank" rel="noopener">参考官方文档</a>。</p>]]></content>
    
    <summary type="html">
    
      Python爬虫常用库pyquery的使用方法介绍
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python2和3版本共存</title>
    <link href="http://jeffyang.top/Python/Python2%E5%92%8C3%E7%89%88%E6%9C%AC%E5%85%B1%E5%AD%98/"/>
    <id>http://jeffyang.top/Python/Python2和3版本共存/</id>
    <published>2018-02-22T04:08:00.000Z</published>
    <updated>2018-02-24T15:35:46.936Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>尽管Python官方也说Python2是遗留语言，Python3才是未来:</p><blockquote><p>Python 2.x is legacy, Python 3.x is the present and future of the language</p></blockquote><p>但是有些时候因为一些特殊需求我们可能还是需要用到另一个版本，这时候就需要配置让两个版本共存了。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>首先我们要先知道<strong>环境变量</strong>，主要是里面的<code>Path</code>变量。它的意思是，你需要系统运行一个程序但是没有指定程序所在的路径时，系统出了在当前的路径中寻找这个程序之外，还应该道<code>Path</code>中指定的路径去找。</p><p>比如，当我们安装了Java、maven或Python之类的程序后，如果没有配置好环境变量，那么打开命令行的位置不是安装路径的<code>bin</code>目录的话，运行相应命令时就会出现:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;xxx&apos; 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure></p><p>而配置好环境变量之后就可以在非安装目录下运行程序，这就是环境变量<code>Path</code>的用处。</p><h3 id="配置Python共存"><a href="#配置Python共存" class="headerlink" title="配置Python共存"></a>配置Python共存</h3><p>我电脑上安装了：</p><ul><li>Python3.6.1（<code>D:\Program Files\Python3.6.1</code>）</li><li>Python2.7.14（<code>D:\Program Files\Python2.7.14</code>）</li></ul><p>首先，我们把它们的路径都配置到环境变量<code>Path</code>里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files\Python3.6.1\Scripts\;D:\Program Files\Python3.6.1\;D:\Program Files\Python2.7.14\Scripts\;D:\Program Files\Python2.7.14\;</span><br></pre></td></tr></table></figure></p><p>另外，我电脑上还安装了一个Anaconda3，这个在安装时选择了<code>Add Anaconda to my PATH environment variable</code>，就不用自己配置环境变量了。</p><p>然后我们打开cmd命令行执行<code>where python</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;where python</span><br><span class="line">D:\Program Files\Python3.6.1\python.exe</span><br><span class="line">D:\Program Files\Python2.7.14\python.exe</span><br><span class="line">D:\ProgramFiles\Anaconda3\python.exe</span><br></pre></td></tr></table></figure></p><p>出现了我们现在安装了的几个Python。</p><p>然后，执行<code>python</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;python</span><br><span class="line">Python 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 17:54:52) [MSC v.1900 32 bit (Intel)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到默认执行的是环境变量里配置的<strong>第一个版本</strong>。</p><p>所以，我们只需要给可执行文件取个名字用于区分版本就可以了。具体做法：</p><ul><li>在Python3的文件夹里找到<code>python.exe</code>把它<code>ctrl + C</code>然后<code>ctrl + V</code>复制一份，重命名<code>python3.exe</code></li><li>同理，Python2文件夹也复制一份<code>python.exe</code>重命名<code>python2.exe</code></li><li>同样，Anaconda文件夹里的<code>python.exe</code>重命名<code>python-conda.exe</code></li></ul><p>然后测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;where python</span><br><span class="line">D:\Program Files\Python3.6.1\python.exe</span><br><span class="line">D:\Program Files\Python2.7.14\python.exe</span><br><span class="line">D:\ProgramFiles\Anaconda3\python.exe</span><br><span class="line"></span><br><span class="line">C:\Users\ASUS&gt;where python3</span><br><span class="line">D:\Program Files\Python3.6.1\python3.exe</span><br><span class="line"></span><br><span class="line">C:\Users\ASUS&gt;python-conda</span><br><span class="line">Python 3.6.4 |Anaconda, Inc.| (default, Jan 16 2018, 10:21:59) [MSC v.1900 32 bit (Intel)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>但是，输入<code>python</code>进入的还是默认在环境变量里配置在<strong>最前面</strong>的版本，我的是Python3.6.1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;python</span><br><span class="line">Python 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 17:54:52) [MSC v.1900 32 bit (Intel)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="配置pip共存"><a href="#配置pip共存" class="headerlink" title="配置pip共存"></a>配置pip共存</h3><p>对于pip的配置也是同样的方法，只是可以看到在Python2和Python3的<code>Scripts</code>目录下除了<code>pip.exe</code>以外还都已经自带了<code>pip2.exe</code>或<code>pip3.exe</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;where pip</span><br><span class="line">D:\Program Files\Python3.6.1\Scripts\pip.exe</span><br><span class="line">D:\Program Files\Python2.7.14\Scripts\pip.exe</span><br><span class="line">D:\ProgramFiles\Anaconda3\Scripts\pip.exe</span><br><span class="line"></span><br><span class="line">C:\Users\ASUS&gt;where pip2</span><br><span class="line">D:\Program Files\Python2.7.14\Scripts\pip2.exe</span><br><span class="line"></span><br><span class="line">C:\Users\ASUS&gt;where pip3</span><br><span class="line">D:\Program Files\Python3.6.1\Scripts\pip3.exe</span><br></pre></td></tr></table></figure><p>pip有个查看版本的命令<code>pip -V</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;pip -V</span><br><span class="line">pip 9.0.1 from d:\program files\python3.6.1\lib\site-packages (python 3.6)</span><br><span class="line"></span><br><span class="line">C:\Users\ASUS&gt;pip2 -V</span><br><span class="line">pip 9.0.1 from d:\program files\python2.7.14\lib\site-packages (python 2.7)</span><br><span class="line"></span><br><span class="line">C:\Users\ASUS&gt;pip3 -V</span><br><span class="line">pip 9.0.1 from d:\program files\python3.6.1\lib\site-packages (python 3.6)</span><br></pre></td></tr></table></figure></p><p>虽然Anaconda有<code>conda</code>命令，不过还是配置一下Anaconda的<code>pip</code>吧。</p><p>找到Anaconda安装目录的<code>Scripts</code>目录，复制一份<code>pip.exe</code>重命名为<code>pip-conda.exe</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;where pip-conda</span><br><span class="line">D:\ProgramFiles\Anaconda3\Scripts\pip-conda.exe</span><br></pre></td></tr></table></figure></p><p>但是，运行<code>pip-conda -V</code>会发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;pip-conda -V</span><br><span class="line">Script file &apos;D:\ProgramFiles\Anaconda3\Scripts\pip-conda-script.py&apos; is not present.</span><br></pre></td></tr></table></figure></p><p>有点不一样的是：Anaconda的pip需要查找一份<code>pip-script.py</code>，所以我们还需要复制一份这个重命名为<code>pip-conda-script.py</code>，这时候再运行<code>pip-conda -V</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;pip-conda -V</span><br><span class="line">pip 9.0.1 from D:\ProgramFiles\Anaconda3\lib\site-packages (python 3.6)</span><br></pre></td></tr></table></figure></p><p>使用<code>pip</code>默认的也是环境变量里<strong>最前面</strong>配置的版本。</p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>这样，Windows下Python版本共存的配置就完成了。</p><p>在Linux下配置的方法也是一样的，使用创建软链接的命令<code>ln -s</code>实现。</p>]]></content>
    
    <summary type="html">
    
      Windows下Python2和Python3版本共存的设置
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>scrapy选择器详解</title>
    <link href="http://jeffyang.top/Python/%E7%88%AC%E8%99%AB/scrapy%E9%80%89%E6%8B%A9%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jeffyang.top/Python/爬虫/scrapy选择器详解/</id>
    <published>2018-02-20T08:48:46.000Z</published>
    <updated>2018-03-02T02:38:27.501Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Scrapy提取数据的一套机制称作选择器(seletors)，它们通过特定的<strong>XPath</strong>或者<strong>CSS</strong>表达式来“选择” HTML文件中的某个部分。详细的选择器说明<a href="https://docs.scrapy.org/en/latest/topics/selectors.html" target="_blank" rel="noopener">点击这里</a>参考文档。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Scrapy提供了一个样例页面<a href="https://doc.scrapy.org/en/latest/_static/selectors-sample1.html" target="_blank" rel="noopener">https://doc.scrapy.org/en/latest/_static/selectors-sample1.html</a>用于测试，页面源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;base href=&apos;http://example.com/&apos; /&gt;</span><br><span class="line">  &lt;title&gt;Example website&lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line">  &lt;div id=&apos;images&apos;&gt;</span><br><span class="line">   &lt;a href=&apos;image1.html&apos;&gt;Name: My image 1 &lt;br /&gt;&lt;img src=&apos;image1_thumb.jpg&apos; /&gt;&lt;/a&gt;</span><br><span class="line">   &lt;a href=&apos;image2.html&apos;&gt;Name: My image 2 &lt;br /&gt;&lt;img src=&apos;image2_thumb.jpg&apos; /&gt;&lt;/a&gt;</span><br><span class="line">   &lt;a href=&apos;image3.html&apos;&gt;Name: My image 3 &lt;br /&gt;&lt;img src=&apos;image3_thumb.jpg&apos; /&gt;&lt;/a&gt;</span><br><span class="line">   &lt;a href=&apos;image4.html&apos;&gt;Name: My image 4 &lt;br /&gt;&lt;img src=&apos;image4_thumb.jpg&apos; /&gt;&lt;/a&gt;</span><br><span class="line">   &lt;a href=&apos;image5.html&apos;&gt;Name: My image 5 &lt;br /&gt;&lt;img src=&apos;image5_thumb.jpg&apos; /&gt;&lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>打开命令行，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell http://doc.scrapy.org/en/latest/_static/selectors-sample1.html</span><br></pre></td></tr></table></figure></p><p>接着就可以获得<code>response</code>变量了，可以用它在终端做一些测试，如<code>response.selector.xpath()</code>或<code>response.selector.css()</code>，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [3]: response.selector.xpath(&apos;//*[@id=&quot;images&quot;]/a[2]&apos;)</span><br><span class="line">Out[3]: [&lt;Selector xpath=&apos;//*[@id=&quot;images&quot;]/a[2]&apos; data=&apos;&lt;a href=&quot;image2.html&quot;&gt;Name: My image 2 &lt;&apos;&gt;]</span><br><span class="line"></span><br><span class="line">In [4]: response.selector.xpath(&apos;//*[@id=&quot;images&quot;]/a[2]/text()&apos;)</span><br><span class="line">Out[4]: [&lt;Selector xpath=&apos;//*[@id=&quot;images&quot;]/a[2]/text()&apos; data=&apos;Name: My image 2 &apos;&gt;]</span><br><span class="line"></span><br><span class="line">In [5]: response.selector.xpath(&apos;//*[@id=&quot;images&quot;]/a[2]/text()&apos;).extract()</span><br><span class="line">Out[5]: [&apos;Name: My image 2 &apos;]</span><br><span class="line"></span><br><span class="line">In [6]: response.selector.css(&apos;title::text&apos;).extract()</span><br><span class="line">Out[6]: [&apos;Example website&apos;]</span><br></pre></td></tr></table></figure></p><p><code>extract()</code>返回结果文本的一个列表，<code>extract_first()</code>返回第一个结果。</p><p>为了方便，Scrapy还提供了简化的使用方法<code>response.xpath()</code>和<code>response.css()</code>，另外，两种选择器返回相同的选择器列表，因此可以嵌套使用，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [7]: response.selector.xpath(&apos;//div[@id=&quot;images&quot;]&apos;).css(&apos;img::attr(src)&apos;).extract()</span><br><span class="line">Out[7]:</span><br><span class="line">[&apos;image1_thumb.jpg&apos;,</span><br><span class="line"> &apos;image2_thumb.jpg&apos;,</span><br><span class="line"> &apos;image3_thumb.jpg&apos;,</span><br><span class="line"> &apos;image4_thumb.jpg&apos;,</span><br><span class="line"> &apos;image5_thumb.jpg&apos;]</span><br><span class="line"></span><br><span class="line">In [8]: response.selector.xpath(&apos;//div[@id=&quot;images&quot;]&apos;).css(&apos;img::attr(src)&apos;).extract_first()</span><br><span class="line">Out[8]: &apos;image1_thumb.jpg&apos;</span><br></pre></td></tr></table></figure></p><p><code>extract_first()</code>还可以传递一个参数·<code>default</code>表示默认值，如果找不到，就使用这个默认值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [11]: response.selector.xpath(&apos;//div[@id=&quot;images&quot;]&apos;).css(&apos;img::attr(src2)&apos;).extract_first(default=&apos;test&apos;)</span><br><span class="line">Out[11]: &apos;test&apos;</span><br></pre></td></tr></table></figure></p><p>选择属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [14]: response.xpath(&apos;//a/@href&apos;).extract()</span><br><span class="line">Out[14]: [&apos;image1.html&apos;, &apos;image2.html&apos;, &apos;image3.html&apos;, &apos;image4.html&apos;, &apos;image5.html&apos;]</span><br><span class="line"></span><br><span class="line">In [15]: response.xpath(&apos;//a/@href&apos;)</span><br><span class="line">Out[15]:</span><br><span class="line">[&lt;Selector xpath=&apos;//a/@href&apos; data=&apos;image1.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a/@href&apos; data=&apos;image2.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a/@href&apos; data=&apos;image3.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a/@href&apos; data=&apos;image4.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a/@href&apos; data=&apos;image5.html&apos;&gt;]</span><br><span class="line"></span><br><span class="line">In [16]: response.xpath(&apos;//a/@href&apos;).extract()</span><br><span class="line">Out[16]: [&apos;image1.html&apos;, &apos;image2.html&apos;, &apos;image3.html&apos;, &apos;image4.html&apos;, &apos;image5.html&apos;]</span><br><span class="line"></span><br><span class="line">In [17]: response.css(&apos;a::attr(href)&apos;)</span><br><span class="line">Out[17]:</span><br><span class="line">[&lt;Selector xpath=&apos;descendant-or-self::a/@href&apos; data=&apos;image1.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;descendant-or-self::a/@href&apos; data=&apos;image2.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;descendant-or-self::a/@href&apos; data=&apos;image3.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;descendant-or-self::a/@href&apos; data=&apos;image4.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;descendant-or-self::a/@href&apos; data=&apos;image5.html&apos;&gt;]</span><br><span class="line"></span><br><span class="line">In [18]: response.css(&apos;a::attr(href)&apos;).extract()</span><br><span class="line">Out[18]: [&apos;image1.html&apos;, &apos;image2.html&apos;, &apos;image3.html&apos;, &apos;image4.html&apos;, &apos;image5.html&apos;]</span><br></pre></td></tr></table></figure></p><p>选择文本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [22]: response.xpath(&apos;//a/text()&apos;)</span><br><span class="line">Out[22]:</span><br><span class="line">[&lt;Selector xpath=&apos;//a/text()&apos; data=&apos;Name: My image 1 &apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a/text()&apos; data=&apos;Name: My image 2 &apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a/text()&apos; data=&apos;Name: My image 3 &apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a/text()&apos; data=&apos;Name: My image 4 &apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a/text()&apos; data=&apos;Name: My image 5 &apos;&gt;]</span><br><span class="line"></span><br><span class="line">In [23]: response.xpath(&apos;//a/text()&apos;).extract()</span><br><span class="line">Out[23]:</span><br><span class="line">[&apos;Name: My image 1 &apos;,</span><br><span class="line"> &apos;Name: My image 2 &apos;,</span><br><span class="line"> &apos;Name: My image 3 &apos;,</span><br><span class="line"> &apos;Name: My image 4 &apos;,</span><br><span class="line"> &apos;Name: My image 5 &apos;]</span><br><span class="line"></span><br><span class="line">In [24]: response.css(&apos;a::text&apos;)</span><br><span class="line">Out[24]:</span><br><span class="line">[&lt;Selector xpath=&apos;descendant-or-self::a/text()&apos; data=&apos;Name: My image 1 &apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;descendant-or-self::a/text()&apos; data=&apos;Name: My image 2 &apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;descendant-or-self::a/text()&apos; data=&apos;Name: My image 3 &apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;descendant-or-self::a/text()&apos; data=&apos;Name: My image 4 &apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;descendant-or-self::a/text()&apos; data=&apos;Name: My image 5 &apos;&gt;]</span><br><span class="line"></span><br><span class="line">In [25]: response.css(&apos;a::text&apos;).extract()</span><br><span class="line">Out[25]:</span><br><span class="line">[&apos;Name: My image 1 &apos;,</span><br><span class="line"> &apos;Name: My image 2 &apos;,</span><br><span class="line"> &apos;Name: My image 3 &apos;,</span><br><span class="line"> &apos;Name: My image 4 &apos;,</span><br><span class="line"> &apos;Name: My image 5 &apos;]</span><br></pre></td></tr></table></figure></p><p>选择属性名称包含<code>image</code>的链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [27]: response.xpath(&apos;//a[contains(@href, &quot;image&quot;)]/@href&apos;)</span><br><span class="line">Out[27]:</span><br><span class="line">[&lt;Selector xpath=&apos;//a[contains(@href, &quot;image&quot;)]/@href&apos; data=&apos;image1.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a[contains(@href, &quot;image&quot;)]/@href&apos; data=&apos;image2.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a[contains(@href, &quot;image&quot;)]/@href&apos; data=&apos;image3.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a[contains(@href, &quot;image&quot;)]/@href&apos; data=&apos;image4.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&apos;//a[contains(@href, &quot;image&quot;)]/@href&apos; data=&apos;image5.html&apos;&gt;]</span><br><span class="line"></span><br><span class="line">In [28]: response.xpath(&apos;//a[contains(@href, &quot;image&quot;)]/@href&apos;).extract()</span><br><span class="line">Out[28]: [&apos;image1.html&apos;, &apos;image2.html&apos;, &apos;image3.html&apos;, &apos;image4.html&apos;, &apos;image5.html&apos;]</span><br><span class="line"></span><br><span class="line">In [29]: response.css(&apos;a[href*=image]::attr(href)&apos;)</span><br><span class="line">Out[29]:</span><br><span class="line">[&lt;Selector xpath=&quot;descendant-or-self::a[@href and contains(@href, &apos;image&apos;)]/@href&quot; data=&apos;image1.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&quot;descendant-or-self::a[@href and contains(@href, &apos;image&apos;)]/@href&quot; data=&apos;image2.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&quot;descendant-or-self::a[@href and contains(@href, &apos;image&apos;)]/@href&quot; data=&apos;image3.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&quot;descendant-or-self::a[@href and contains(@href, &apos;image&apos;)]/@href&quot; data=&apos;image4.html&apos;&gt;,</span><br><span class="line"> &lt;Selector xpath=&quot;descendant-or-self::a[@href and contains(@href, &apos;image&apos;)]/@href&quot; data=&apos;image5.html&apos;&gt;]</span><br><span class="line"></span><br><span class="line">In [30]: response.css(&apos;a[href*=image]::attr(href)&apos;).extract()</span><br><span class="line">Out[30]: [&apos;image1.html&apos;, &apos;image2.html&apos;, &apos;image3.html&apos;, &apos;image4.html&apos;, &apos;image5.html&apos;]</span><br></pre></td></tr></table></figure></p><p>选择属性名称包含<code>image</code>的<code>&lt;a&gt;</code>里<code>&lt;img&gt;</code>的<code>src</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [31]: response.xpath(&apos;//a[contains(@href, &quot;image&quot;)]/img/@src&apos;).extract()</span><br><span class="line">Out[31]:</span><br><span class="line">[&apos;image1_thumb.jpg&apos;,</span><br><span class="line"> &apos;image2_thumb.jpg&apos;,</span><br><span class="line"> &apos;image3_thumb.jpg&apos;,</span><br><span class="line"> &apos;image4_thumb.jpg&apos;,</span><br><span class="line"> &apos;image5_thumb.jpg&apos;]</span><br><span class="line"></span><br><span class="line">In [32]: response.css(&apos;a[href*=image] img::attr(src)&apos;).extract()</span><br><span class="line">Out[32]:</span><br><span class="line">[&apos;image1_thumb.jpg&apos;,</span><br><span class="line"> &apos;image2_thumb.jpg&apos;,</span><br><span class="line"> &apos;image3_thumb.jpg&apos;,</span><br><span class="line"> &apos;image4_thumb.jpg&apos;,</span><br><span class="line"> &apos;image5_thumb.jpg&apos;]</span><br></pre></td></tr></table></figure></p><p>选择器还可以使用<code>re()</code>结合正则表达式使用，但是<code>re()</code>返回的不是选择器对象而是<strong>字符串列表</strong>；还有一个类似<code>extract_first()</code>的方法<code>re_first()</code>选择第一个匹配内容。</p><p>如获取<code>&lt;a&gt;</code>文本里<code>Name:</code>后面的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [33]: response.css(&apos;a::text&apos;).extract()</span><br><span class="line">Out[33]:</span><br><span class="line">[&apos;Name: My image 1 &apos;,</span><br><span class="line"> &apos;Name: My image 2 &apos;,</span><br><span class="line"> &apos;Name: My image 3 &apos;,</span><br><span class="line"> &apos;Name: My image 4 &apos;,</span><br><span class="line"> &apos;Name: My image 5 &apos;]</span><br><span class="line"></span><br><span class="line">In [34]: response.css(&apos;a::text&apos;).re(&apos;Name\:(.*)&apos;)</span><br><span class="line">Out[34]:</span><br><span class="line">[&apos; My image 1 &apos;,</span><br><span class="line"> &apos; My image 2 &apos;,</span><br><span class="line"> &apos; My image 3 &apos;,</span><br><span class="line"> &apos; My image 4 &apos;,</span><br><span class="line"> &apos; My image 5 &apos;]</span><br><span class="line"></span><br><span class="line">In [35]: response.css(&apos;a::text&apos;).re_first(&apos;Name\:(.*)&apos;)</span><br><span class="line">Out[35]: &apos; My image 1 &apos;</span><br><span class="line"></span><br><span class="line">In [36]: response.css(&apos;a::text&apos;).re_first(&apos;Name\:(.*)&apos;).strip()</span><br><span class="line">Out[36]: &apos;My image 1&apos;</span><br></pre></td></tr></table></figure></p><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>Chrome浏览器的开发者工具的<code>console</code>界面除了可以调试js，还可以调试xpath和css，所以我们的选择器也可以在这里测试，可以结合页面查看比较方便。只是要<strong>注意</strong>，Scrapy的<code>a::text</code>这种语法就不支持了。</p><p>xpath选择器使用方法<code>$x()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$x(&apos;//*[@id=&quot;images&quot;]/a[1]&apos;)</span><br></pre></td></tr></table></figure></p><p>css使用方法<code>$$()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$(&apos;#images &gt; a:nth-child(1)&apos;)</span><br></pre></td></tr></table></figure></p><p>另外，<code>elements</code>界面按<code>esc</code>键可以直接在<code>elements</code>界面打开<code>console</code>，还可以直接在<code>elements</code>界面右键<strong>Copy</strong> –&gt; <strong>Copy Xpath</strong>或<strong>Copy Selector</strong>把选中元素的选择器复制下来。</p>]]></content>
    
    <summary type="html">
    
      Python爬虫框架Scrapy的命令行的使用方法介绍
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>scrapy命令行详解</title>
    <link href="http://jeffyang.top/Python/%E7%88%AC%E8%99%AB/scrapy%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jeffyang.top/Python/爬虫/scrapy命令行详解/</id>
    <published>2018-02-20T07:38:12.000Z</published>
    <updated>2018-03-01T15:56:52.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Scrapy是通过<code>scrapy</code>命令行工具进行控制的。详细的命令行工具说明<a href="https://docs.scrapy.org/en/latest/topics/commands.html" target="_blank" rel="noopener">点击这里</a>参考文档。</p><p>一般来说，使用 scrapy 工具的第一件事就是创建您的Scrapy项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject project_name</span><br></pre></td></tr></table></figure></p><p>该命令将会在<code>project_name</code>目录中创建一个Scrapy项目。接下来，进入到项目目录中:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd project_name</span><br></pre></td></tr></table></figure></p><p>一个Scrapy项目的目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scrapy.cfg</span><br><span class="line">project_name/</span><br><span class="line">    __init__.py</span><br><span class="line">    items.py</span><br><span class="line">    middlewares.py</span><br><span class="line">    pipelines.py</span><br><span class="line">    settings.py</span><br><span class="line">    spiders/</span><br><span class="line">        __init__.py</span><br><span class="line">        spider1.py</span><br><span class="line">        spider2.py</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>其中，<code>scrapy.cfg</code>存放的目录被认为是项目的根目录。这时候就可以在项目中使用<code>scrapy</code>工具来对其进行控制和管理。比如，创建一个新的spider:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider mydomain mydomain.com</span><br></pre></td></tr></table></figure></p><p>这个命令会在<code>spiders/</code>目录下创建一个<code>mydomain.py</code>文件，就可以修改编写爬虫了。</p><p>Scrapy提供了两种类型的命令。一种必须在<strong>Scrapy项目中</strong>运行(项目命令)，另外一种则不需要(全局命令)。</p><h3 id="全局命令"><a href="#全局命令" class="headerlink" title="全局命令"></a>全局命令</h3><p>全局命令就是不需要在项目中使用的命令。</p><h4 id="startproject"><a href="#startproject" class="headerlink" title="startproject"></a>startproject</h4><p>在<code>project_name</code>文件夹下创建一个名为<code>project_name</code>的Scrapy项目。用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject &lt;project_name&gt; [project_dir]</span><br></pre></td></tr></table></figure></p><p>如果没有指定<code>project_dir</code>，将与<code>project_name</code>使用相同名字。</p><h4 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h4><p>这个命令在项目中运行时会输出项目的设定值，否则输出Scrapy默认设定。用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy settings [options]</span><br></pre></td></tr></table></figure></p><h4 id="runspider"><a href="#runspider" class="headerlink" title="runspider"></a>runspider</h4><p>可以在未创建项目的情况下，运行一个编写在Python文件中的spider。用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy runspider &lt;spider_file.py&gt;</span><br></pre></td></tr></table></figure></p><h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><p>是一个交互终端，可以在未启动spider的情况下尝试及调试爬取代码。以给定的URL(如果给出)或者空(没有给出URL)启动Scrapy shell。<br>这个终端可以用来测试XPath或CSS表达式，也可以作为正常Python终端。如果安装了IPython，Scrapy终端将使用IPython替代标准Python终端。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell [url]</span><br></pre></td></tr></table></figure></p><p>Scrapy终端根据下载的页面会自动创建一些方便使用的对象:</p><ul><li><code>crawler</code> - 当前 Crawler 对象.</li><li><code>spider</code> - 处理URL的spider。 对当前URL没有处理的Spider时则为一个 Spider 对象。</li><li><code>request</code> - 最近获取到的页面的 Request 对象。 可以使用<code>replace()</code>修改该request。或者 使用<code>fetch</code>快捷方式来获取新的request。</li><li><code>response</code> - 包含最近获取到的页面的 Response 对象。</li><li><code>sel</code> - 根据最近获取到的response构建的 Selector 对象。</li><li><code>settings</code> - 当前的 Scrapy settings</li></ul><p>更多关于shell的内容，可以参考<a href="https://docs.scrapy.org/en/latest/topics/shell.html#topics-shell" target="_blank" rel="noopener">文档</a>。</p><h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h4><p>使用Scrapy下载器下载给定的URL，并将获取到的内容输出，用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy fetch &lt;url&gt;</span><br></pre></td></tr></table></figure></p><p>还可以加一些其他参数，<code>--nolog</code>不输出日志，<code>--headers</code>输出<code>headers</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy fetch --nolog --headers http://www.example.com/</span><br></pre></td></tr></table></figure></p><h4 id="view"><a href="#view" class="headerlink" title="view"></a>view</h4><p>在浏览器中打开给定的URL，并以Scrapy spider获取到的形式展现。相当于保存获取的源码到本地，有些时候因为页面使用Ajax+js渲染页面，spider获取到的页面和用户浏览器看到的并不相同，可以用来检查spider所获取到的页面。用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy view &lt;url&gt;</span><br></pre></td></tr></table></figure></p><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><p>输出Scrapy版本。配合<code>-v</code>运行时，该命令同时输出Python, Twisted以及平台的信息。用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy version [-v]</span><br></pre></td></tr></table></figure></p><h3 id="项目命令"><a href="#项目命令" class="headerlink" title="项目命令"></a>项目命令</h3><p>项目命令就是必须依赖于项目，要在项目里运行的命令。</p><h4 id="crawl"><a href="#crawl" class="headerlink" title="crawl"></a>crawl</h4><p>使用spider进行爬取。用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl spider_name</span><br></pre></td></tr></table></figure></p><h4 id="check"><a href="#check" class="headerlink" title="check"></a>check</h4><p>运行contract检查代码是否有错误，用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy check</span><br></pre></td></tr></table></figure></p><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>列出当前项目中所有可用的spider。用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy list</span><br></pre></td></tr></table></figure></p><h4 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h4><p>使用<code>EDITOR</code>中设定的编辑器编辑给定的spider，用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy edit spider_name</span><br></pre></td></tr></table></figure></p><p>用的不多，直接使用IDE比较好。</p><h4 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h4><p>获取给定的URL并使用相应的spider分析处理。如果提供<code>--callback</code>选项，则使用spider的该方法处理，否则使用<code>parse</code>。用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy parse &lt;url&gt; [options]</span><br></pre></td></tr></table></figure></p><p>支持的选项：</p><ul><li><code>--spider=SPIDER</code>: 跳过自动检测spider并强制使用特定的spider</li><li><code>--a NAME=VALUE</code>: 设置spider的参数(可能被重复)</li><li><code>--callback</code> or <code>-c</code>: spider中用于解析返回(response)的回调函数</li><li><code>--pipelines</code>: 在pipeline中处理item</li><li><code>--rules</code> or <code>-r</code>: 使用 CrawlSpider 规则来发现用来解析返回(response)的回调函数</li><li><code>--noitems</code>: 不显示爬取到的item</li><li><code>--nolinks</code>: 不显示提取到的链接</li><li><code>--nocolour</code>: 避免使用pygments对输出着色</li><li><code>--depth</code> or <code>-d</code>: 指定跟进链接请求的层次数(默认: 1)</li><li><code>--verbose</code> or <code>-v</code>: 显示每个请求的详细信息</li></ul><h4 id="genspider"><a href="#genspider" class="headerlink" title="genspider"></a>genspider</h4><p>该方法可以使用提前定义好的模板来生成spider，使用<code>scrapy genspider -l</code>可以查看可用模版，<code>scrapy genspider -d [template]</code>可以查看模版具体内容。使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider [-t template] &lt;name&gt; &lt;domain&gt;</span><br></pre></td></tr></table></figure></p><h4 id="bench"><a href="#bench" class="headerlink" title="bench"></a>bench</h4><p>运行benchmark测试，用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy bench</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      Python爬虫框架Scrapy的命令行的使用方法介绍
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫常用库requests详解</title>
    <link href="http://jeffyang.top/Python/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB%E5%B8%B8%E7%94%A8%E5%BA%93requests%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jeffyang.top/Python/爬虫/Python爬虫常用库requests详解/</id>
    <published>2018-02-20T04:23:43.000Z</published>
    <updated>2018-02-26T12:11:34.588Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>官方的说法是：</p><blockquote><p>Requests: 让 HTTP 服务人类<br>Requests 唯一的一个非转基因的 Python HTTP 库，人类可以安全享用。</p><p>警告：非专业使用其他 HTTP 库会导致危险的副作用，包括：安全缺陷症、冗余代码症、重新发明轮子症、啃文档症、抑郁、头疼、甚至死亡。</p><p>Requests 是以 PEP 20 的箴言为中心开发的：</p><ul><li>Beautiful is better than ugly.(美丽优于丑陋)</li><li>Explicit is better than implicit.(直白优于含蓄)</li><li>Simple is better than complex.(简单优于复杂)</li><li>Complex is better than complicated.(复杂优于繁琐)</li><li>Readability counts.(可读性很重要)</li></ul></blockquote><p>总之，这是一个Python实现的简单方便的HTTP库。</p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import requests</span><br><span class="line"></span><br><span class="line">In [2]: response = requests.get(&apos;https://www.baidu.com/&apos;)</span><br><span class="line"></span><br><span class="line">In [3]: print(type(response))</span><br><span class="line">&lt;class &apos;requests.models.Response&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [4]: print(response.status_code)</span><br><span class="line">200</span><br><span class="line"></span><br><span class="line">In [5]: print(type(response.text))</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [6]: print(response.cookies)</span><br><span class="line">&lt;RequestsCookieJar[&lt;Cookie BDORZ=27315 for .baidu.com/&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [7]: print(response.text)</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;/body&gt; &lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>response.status_code</code>获取状态码，<code>response.text</code>获取网页源码，相当于<code>urllib</code>里的<code>read()</code>方法，也不用使用<code>decode()</code>转码。<br><code>response.cookies</code>可以直接获取cookie不用引入额外的模块。</p><p>带参数的<code>GET</code>请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [14]: import requests</span><br><span class="line"></span><br><span class="line">In [15]: response = requests.get(&quot;http://httpbin.org/get?name=jeff&amp;age=21&quot;)</span><br><span class="line"></span><br><span class="line">In [16]: print(response.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &quot;21&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;jeff&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*/*&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;close&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests/2.18.4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;origin&quot;: &quot;183.21.190.87&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/get?name=jeff&amp;age=21&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以使用一个参数<code>params</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">In [17]: import requests</span><br><span class="line"></span><br><span class="line">In [18]: data = &#123;</span><br><span class="line">    ...:     &apos;name&apos;: &apos;jeff&apos;,</span><br><span class="line">    ...:     &apos;age&apos;: 21</span><br><span class="line">    ...: &#125;</span><br><span class="line"></span><br><span class="line">In [19]: response = requests.get(&quot;http://httpbin.org/get&quot;, params=data)</span><br><span class="line"></span><br><span class="line">In [20]: print(response.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &quot;21&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;jeff&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*/*&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;close&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests/2.18.4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;origin&quot;: &quot;183.21.190.87&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/get?name=jeff&amp;age=21&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="解析json"><a href="#解析json" class="headerlink" title="解析json"></a>解析json</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [21]: import requests</span><br><span class="line"></span><br><span class="line">In [22]: response = requests.get(&quot;http://httpbin.org/get&quot;)</span><br><span class="line"></span><br><span class="line">In [23]: print(type(response.text))</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [24]: print(response.json())</span><br><span class="line">&#123;&apos;args&apos;: &#123;&#125;, &apos;headers&apos;: &#123;&apos;Accept&apos;: &apos;*/*&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Connection&apos;: &apos;close&apos;, &apos;Host&apos;: &apos;httpbin.org&apos;, &apos;User-Agent&apos;: &apos;python-requests/2.18.4&apos;&#125;, &apos;origin&apos;: &apos;183.21.190.87&apos;, &apos;url&apos;: &apos;http://httpbin.org/get&apos;&#125;</span><br><span class="line"></span><br><span class="line">In [25]: print(type(response.json()))</span><br><span class="line">&lt;class &apos;dict&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [26]: import json</span><br><span class="line"></span><br><span class="line">In [27]: print(json.loads(response.text))</span><br><span class="line">&#123;&apos;args&apos;: &#123;&#125;, &apos;headers&apos;: &#123;&apos;Accept&apos;: &apos;*/*&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Connection&apos;: &apos;close&apos;, &apos;Host&apos;: &apos;httpbin.org&apos;, &apos;User-Agent&apos;: &apos;python-requests/2.18.4&apos;&#125;, &apos;origin&apos;: &apos;183.21.190.87&apos;, &apos;url&apos;: &apos;http://httpbin.org/get&apos;&#125;</span><br></pre></td></tr></table></figure><p>可以看到直接使用<code>response.json()</code>和使用<code>json.loads(response.text)</code>结果是一样的。</p><h4 id="获取二进制数据"><a href="#获取二进制数据" class="headerlink" title="获取二进制数据"></a>获取二进制数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [33]: import requests</span><br><span class="line"></span><br><span class="line">In [34]: response = requests.get(&quot;https://github.com/favicon.ico&quot;)</span><br><span class="line"></span><br><span class="line">In [35]: print(type(response.text), type(response.content))</span><br><span class="line">&lt;class &apos;str&apos;&gt; &lt;class &apos;bytes&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [36]: print(response.content)</span><br><span class="line">b&apos;\x00\x00\x01\x00\x02\x00\x10\x10\x00\x00\x01\x00 \x00(\x05\x00\x00&amp;\x00\x00\x00  \x00\x00\x01\x00 \x00(\x14\x00\x00N\x05\x00\x00(\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\x01\x00 \x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x11\x13v\x13\x13\x13\xc5\x0e\x0e\x0e\x12\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x0f\x0f\x11\x11\x11\x14\xb1\x13\x13\x13i\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x14\x14\x96\x13\x13\x14\xfc\x13\x13\x14\xed\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18\x15\x15\x17\xff\x15\x15\x17\xff\x11\x11\x13\x85\x00\x00\x00</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>保存：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [37]: import requests</span><br><span class="line"></span><br><span class="line">In [38]: response = requests.get(&quot;https://github.com/favicon.ico&quot;)</span><br><span class="line"></span><br><span class="line">In [39]: with open(&apos;favicon.ico&apos;, &apos;wb&apos;) as f:</span><br><span class="line">    ...:     f.write(response.content)</span><br><span class="line">    ...:</span><br></pre></td></tr></table></figure></p><h4 id="添加headers"><a href="#添加headers" class="headerlink" title="添加headers"></a>添加headers</h4><p>例如知乎，没有添加headers请求会返回<code>500</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [40]: import requests</span><br><span class="line"></span><br><span class="line">In [41]: response = requests.get(&quot;https://www.zhihu.com&quot;)</span><br><span class="line"></span><br><span class="line">In [42]: print(response.text)</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;h1&gt;500 Server Error&lt;/h1&gt;</span><br><span class="line">An internal server error occured.</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>使用<code>headers</code>参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [45]: import requests</span><br><span class="line"></span><br><span class="line">In [46]: headers = &#123;</span><br><span class="line">    ...:     &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.</span><br><span class="line">    ...: 0.3239.132 Safari/537.36&apos;</span><br><span class="line">    ...: &#125;</span><br><span class="line"></span><br><span class="line">In [47]: response = requests.get(&quot;https://www.zhihu.com&quot;, headers=headers)</span><br><span class="line"></span><br><span class="line">In [48]: print(response.text)</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;zh&quot; data-hairline=&quot;true&quot; data-theme=&quot;light&quot;&gt;&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;/&gt;&lt;title data-react-helmet=&quot;true&quot;&gt;知 乎 - 发现更大的世界&lt;/title&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1&quot;/&gt;&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;/&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">In [50]: import requests</span><br><span class="line"></span><br><span class="line">In [51]: ata = &#123;&apos;name&apos;: &apos;jeff&apos;, &apos;age&apos;: &apos;21&apos;&#125;</span><br><span class="line"></span><br><span class="line">In [52]: import requests</span><br><span class="line"></span><br><span class="line">In [53]: data = &#123;&apos;name&apos;: &apos;jeff&apos;, &apos;age&apos;: &apos;21&apos;&#125;</span><br><span class="line"></span><br><span class="line">In [54]: response = requests.post(&quot;http://httpbin.org/post&quot;, data=data)</span><br><span class="line"></span><br><span class="line">In [55]: print(response.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;data&quot;: &quot;&quot;,</span><br><span class="line">  &quot;files&quot;: &#123;&#125;,</span><br><span class="line">  &quot;form&quot;: &#123;</span><br><span class="line">    &quot;age&quot;: &quot;21&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;jeff&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*/*&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;close&quot;,</span><br><span class="line">    &quot;Content-Length&quot;: &quot;16&quot;,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests/2.18.4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;json&quot;: null,</span><br><span class="line">  &quot;origin&quot;: &quot;183.21.190.87&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加<code>headers</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [56]: import requests</span><br><span class="line"></span><br><span class="line">In [57]: data = &#123;&apos;name&apos;: &apos;jeff&apos;, &apos;age&apos;: &apos;21&apos;&#125;</span><br><span class="line"></span><br><span class="line">In [58]: headers = &#123;</span><br><span class="line">    ...:     &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.</span><br><span class="line">    ...: 0.3239.132 Safari/537.36&apos;</span><br><span class="line">    ...: &#125;</span><br><span class="line"></span><br><span class="line">In [59]: response = requests.post(&quot;http://httpbin.org/post&quot;, data=data, headers=headers)</span><br><span class="line"></span><br><span class="line">In [60]: print(response.json())</span><br><span class="line">&#123;&apos;args&apos;: &#123;&#125;, &apos;data&apos;: &apos;&apos;, &apos;files&apos;: &#123;&#125;, &apos;form&apos;: &#123;&apos;age&apos;: &apos;21&apos;, &apos;name&apos;: &apos;jeff&apos;&#125;, &apos;headers&apos;: &#123;&apos;Accept&apos;: &apos;*/*&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Connection&apos;: &apos;close&apos;, &apos;Content-Length&apos;: &apos;16&apos;, &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;, &apos;Host&apos;: &apos;httpbin.org&apos;, &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&apos;&#125;, &apos;json&apos;: None, &apos;origin&apos;: &apos;183.21.190.87&apos;, &apos;url&apos;: &apos;http://httpbin.org/post&apos;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="各种类型请求"><a href="#各种类型请求" class="headerlink" title="各种类型请求"></a>各种类型请求</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">requests.get(&apos;http://httpbin.org/get&apos;)</span><br><span class="line">requests.post(&apos;http://httpbin.org/post&apos;)</span><br><span class="line">requests.put(&apos;http://httpbin.org/put&apos;)</span><br><span class="line">requests.delete(&apos;http://httpbin.org/delete&apos;)</span><br><span class="line">requests.head(&apos;http://httpbin.org/get&apos;)</span><br><span class="line">requests.options(&apos;http://httpbin.org/get&apos;)</span><br></pre></td></tr></table></figure><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h4 id="Response信息"><a href="#Response信息" class="headerlink" title="Response信息"></a>Response信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [62]: import requests</span><br><span class="line"></span><br><span class="line">In [63]: response = requests.get(&apos;http://jeffyang.top/&apos;)</span><br><span class="line"></span><br><span class="line">In [64]: print(type(response.status_code), response.status_code)</span><br><span class="line">&lt;class &apos;int&apos;&gt; 200</span><br><span class="line"></span><br><span class="line">In [65]: print(type(response.headers), response.headers)</span><br><span class="line">&lt;class &apos;requests.structures.CaseInsensitiveDict&apos;&gt; &#123;&apos;Server&apos;: &apos;GitHub.com&apos;, &apos;Content-Type&apos;: &apos;text/html; charset=utf-8&apos;, &apos;Last-Modified&apos;: &apos;Sat, 24 Feb 2018 12:56:30 GMT&apos;, &apos;Access-Control-Allow-Origin&apos;: &apos;*&apos;, &apos;Expires&apos;: &apos;Mon, 26 Feb 2018 09:14:14 GMT&apos;, &apos;Cache-Control&apos;: &apos;max-age=600&apos;, &apos;Content-Encoding&apos;: &apos;gzip&apos;, &apos;X-GitHub-Request-Id&apos;: &apos;BB66:6BA9:E59020:F12729:5A93CD8D&apos;, &apos;Content-Length&apos;: &apos;12829&apos;, &apos;Accept-Ranges&apos;: &apos;bytes&apos;, &apos;Date&apos;: &apos;Mon, 26 Feb 2018 09:58:00 GMT&apos;, &apos;Via&apos;: &apos;1.1 varnish&apos;, &apos;Age&apos;: &apos;14&apos;, &apos;Connection&apos;: &apos;keep-alive&apos;, &apos;X-Served-By&apos;: &apos;cache-hnd18737-HND&apos;, &apos;X-Cache&apos;: &apos;HIT&apos;, &apos;X-Cache-Hits&apos;: &apos;1&apos;, &apos;X-Timer&apos;: &apos;S1519639081.677214,VS0,VE0&apos;, &apos;Vary&apos;: &apos;Accept-Encoding&apos;, &apos;X-Fastly-Request-ID&apos;: &apos;38d73d44dc2f717cdb15f5a317f4ae28b5761489&apos;&#125;</span><br><span class="line"></span><br><span class="line">In [66]: print(type(response.cookies), response.cookies)</span><br><span class="line">&lt;class &apos;requests.cookies.RequestsCookieJar&apos;&gt; &lt;RequestsCookieJar[]&gt;</span><br><span class="line"></span><br><span class="line">In [67]: print(type(response.url), response.url)</span><br><span class="line">&lt;class &apos;str&apos;&gt; http://jeffyang.top/</span><br><span class="line"></span><br><span class="line">In [68]: print(type(response.history), response.history)</span><br><span class="line">&lt;class &apos;list&apos;&gt; []</span><br></pre></td></tr></table></figure><h4 id="状态码判断"><a href="#状态码判断" class="headerlink" title="状态码判断"></a>状态码判断</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [69]: import requests</span><br><span class="line"></span><br><span class="line">In [70]: response = requests.get(&apos;http://jeffyang.top/&apos;)</span><br><span class="line"></span><br><span class="line">In [71]: exit() if not response.status_code == 200 else print(&apos;Request Successfully&apos;)</span><br><span class="line">Request Successfully</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [72]: import requests</span><br><span class="line"></span><br><span class="line">In [73]: response = requests.get(&apos;http://jeffyang.top/404.html&apos;)</span><br><span class="line"></span><br><span class="line">In [74]: exit() if not response.status_code == requests.codes.not_found else print(&apos;404 Not Found&apos;)</span><br><span class="line">404 Not Found</span><br></pre></td></tr></table></figure><p>可以看到，我们既能使用数字判断，也可以使用状态码对应的状态判断，如<code>response.status_code == 200</code>或<code>response.status_code == requests.codes.not_found</code><br>状态码及对应状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">100: (&apos;continue&apos;,),</span><br><span class="line">101: (&apos;switching_protocols&apos;,),</span><br><span class="line">102: (&apos;processing&apos;,),</span><br><span class="line">103: (&apos;checkpoint&apos;,),</span><br><span class="line">122: (&apos;uri_too_long&apos;, &apos;request_uri_too_long&apos;),</span><br><span class="line">200: (&apos;ok&apos;, &apos;okay&apos;, &apos;all_ok&apos;, &apos;all_okay&apos;, &apos;all_good&apos;, &apos;\\o/&apos;, &apos;✓&apos;),</span><br><span class="line">201: (&apos;created&apos;,),</span><br><span class="line">202: (&apos;accepted&apos;,),</span><br><span class="line">203: (&apos;non_authoritative_info&apos;, &apos;non_authoritative_information&apos;),</span><br><span class="line">204: (&apos;no_content&apos;,),</span><br><span class="line">205: (&apos;reset_content&apos;, &apos;reset&apos;),</span><br><span class="line">206: (&apos;partial_content&apos;, &apos;partial&apos;),</span><br><span class="line">207: (&apos;multi_status&apos;, &apos;multiple_status&apos;, &apos;multi_stati&apos;, &apos;multiple_stati&apos;),</span><br><span class="line">208: (&apos;already_reported&apos;,),</span><br><span class="line">226: (&apos;im_used&apos;,),</span><br><span class="line"></span><br><span class="line"># Redirection.</span><br><span class="line">300: (&apos;multiple_choices&apos;,),</span><br><span class="line">301: (&apos;moved_permanently&apos;, &apos;moved&apos;, &apos;\\o-&apos;),</span><br><span class="line">302: (&apos;found&apos;,),</span><br><span class="line">303: (&apos;see_other&apos;, &apos;other&apos;),</span><br><span class="line">304: (&apos;not_modified&apos;,),</span><br><span class="line">305: (&apos;use_proxy&apos;,),</span><br><span class="line">306: (&apos;switch_proxy&apos;,),</span><br><span class="line">307: (&apos;temporary_redirect&apos;, &apos;temporary_moved&apos;, &apos;temporary&apos;),</span><br><span class="line">308: (&apos;permanent_redirect&apos;,</span><br><span class="line">      &apos;resume_incomplete&apos;, &apos;resume&apos;,), # These 2 to be removed in 3.0</span><br><span class="line"></span><br><span class="line"># Client Error.</span><br><span class="line">400: (&apos;bad_request&apos;, &apos;bad&apos;),</span><br><span class="line">401: (&apos;unauthorized&apos;,),</span><br><span class="line">402: (&apos;payment_required&apos;, &apos;payment&apos;),</span><br><span class="line">403: (&apos;forbidden&apos;,),</span><br><span class="line">404: (&apos;not_found&apos;, &apos;-o-&apos;),</span><br><span class="line">405: (&apos;method_not_allowed&apos;, &apos;not_allowed&apos;),</span><br><span class="line">406: (&apos;not_acceptable&apos;,),</span><br><span class="line">407: (&apos;proxy_authentication_required&apos;, &apos;proxy_auth&apos;, &apos;proxy_authentication&apos;),</span><br><span class="line">408: (&apos;request_timeout&apos;, &apos;timeout&apos;),</span><br><span class="line">409: (&apos;conflict&apos;,),</span><br><span class="line">410: (&apos;gone&apos;,),</span><br><span class="line">411: (&apos;length_required&apos;,),</span><br><span class="line">412: (&apos;precondition_failed&apos;, &apos;precondition&apos;),</span><br><span class="line">413: (&apos;request_entity_too_large&apos;,),</span><br><span class="line">414: (&apos;request_uri_too_large&apos;,),</span><br><span class="line">415: (&apos;unsupported_media_type&apos;, &apos;unsupported_media&apos;, &apos;media_type&apos;),</span><br><span class="line">416: (&apos;requested_range_not_satisfiable&apos;, &apos;requested_range&apos;, &apos;range_not_satisfiable&apos;),</span><br><span class="line">417: (&apos;expectation_failed&apos;,),</span><br><span class="line">418: (&apos;im_a_teapot&apos;, &apos;teapot&apos;, &apos;i_am_a_teapot&apos;),</span><br><span class="line">421: (&apos;misdirected_request&apos;,),</span><br><span class="line">422: (&apos;unprocessable_entity&apos;, &apos;unprocessable&apos;),</span><br><span class="line">423: (&apos;locked&apos;,),</span><br><span class="line">424: (&apos;failed_dependency&apos;, &apos;dependency&apos;),</span><br><span class="line">425: (&apos;unordered_collection&apos;, &apos;unordered&apos;),</span><br><span class="line">426: (&apos;upgrade_required&apos;, &apos;upgrade&apos;),</span><br><span class="line">428: (&apos;precondition_required&apos;, &apos;precondition&apos;),</span><br><span class="line">429: (&apos;too_many_requests&apos;, &apos;too_many&apos;),</span><br><span class="line">431: (&apos;header_fields_too_large&apos;, &apos;fields_too_large&apos;),</span><br><span class="line">444: (&apos;no_response&apos;, &apos;none&apos;),</span><br><span class="line">449: (&apos;retry_with&apos;, &apos;retry&apos;),</span><br><span class="line">450: (&apos;blocked_by_windows_parental_controls&apos;, &apos;parental_controls&apos;),</span><br><span class="line">451: (&apos;unavailable_for_legal_reasons&apos;, &apos;legal_reasons&apos;),</span><br><span class="line">499: (&apos;client_closed_request&apos;,),</span><br><span class="line"></span><br><span class="line"># Server Error.</span><br><span class="line">500: (&apos;internal_server_error&apos;, &apos;server_error&apos;, &apos;/o\\&apos;, &apos;✗&apos;),</span><br><span class="line">501: (&apos;not_implemented&apos;,),</span><br><span class="line">502: (&apos;bad_gateway&apos;,),</span><br><span class="line">503: (&apos;service_unavailable&apos;, &apos;unavailable&apos;),</span><br><span class="line">504: (&apos;gateway_timeout&apos;,),</span><br><span class="line">505: (&apos;http_version_not_supported&apos;, &apos;http_version&apos;),</span><br><span class="line">506: (&apos;variant_also_negotiates&apos;,),</span><br><span class="line">507: (&apos;insufficient_storage&apos;,),</span><br><span class="line">509: (&apos;bandwidth_limit_exceeded&apos;, &apos;bandwidth&apos;),</span><br><span class="line">510: (&apos;not_extended&apos;,),</span><br><span class="line">511: (&apos;network_authentication_required&apos;, &apos;network_auth&apos;, &apos;network_authentication&apos;),</span><br></pre></td></tr></table></figure></p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">In [75]: import requests</span><br><span class="line"></span><br><span class="line">In [76]: files = &#123;&apos;ico&apos;: open(&apos;favicon.ico&apos;, &apos;rb&apos;)&#125;</span><br><span class="line"></span><br><span class="line">In [77]: response = requests.post(&quot;http://httpbin.org/post&quot;, files=files)</span><br><span class="line"></span><br><span class="line">In [78]: print(response.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;data&quot;: &quot;&quot;,</span><br><span class="line">  &quot;files&quot;: &#123;</span><br><span class="line">    &quot;ico&quot;: &quot;data:application/octet-stream;base64,AAABAAIAEB... ...AAAAAAAA=&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;form&quot;: &#123;&#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*/*&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;close&quot;,</span><br><span class="line">    &quot;Content-Length&quot;: &quot;6664&quot;,</span><br><span class="line">    &quot;Content-Type&quot;: &quot;multipart/form-data; boundary=e98882dde92244bf8e7fdaa6f03255fc&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests/2.18.4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;json&quot;: null,</span><br><span class="line">  &quot;origin&quot;: &quot;183.21.190.87&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>&#39;ico&#39;</code>可以自己随便起名。</p><h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [79]: import requests</span><br><span class="line"></span><br><span class="line">In [80]: response = requests.get(&quot;https://www.baidu.com&quot;)</span><br><span class="line"></span><br><span class="line">In [81]: print(response.cookies)</span><br><span class="line">&lt;RequestsCookieJar[&lt;Cookie BDORZ=27315 for .baidu.com/&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [82]: for key, value in response.cookies.items():</span><br><span class="line">    ...:     print(key + &apos;=&apos; + value)</span><br><span class="line">    ...:</span><br><span class="line">BDORZ=27315</span><br></pre></td></tr></table></figure><p>使用requests就不用像urllib一样经过<code>CookieJar</code>、<code>handler</code>和<code>opener</code>了。</p><h4 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h4><p>用于模拟登陆：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [83]: import requests</span><br><span class="line"></span><br><span class="line">In [84]: requests.get(&apos;http://httpbin.org/cookies/set/number/123456789&apos;)</span><br><span class="line">Out[84]: &lt;Response [200]&gt;</span><br><span class="line"></span><br><span class="line">In [85]: response = requests.get(&apos;http://httpbin.org/cookies&apos;)</span><br><span class="line"></span><br><span class="line">In [86]: print(response.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;cookies&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>http://httpbin.org/cookies</code>是用于测试cookie的链接。这里设置了<code>number</code>但是下面输出是空的是因为我们使用的两次get是两个独立的操作，没有任何关联。对于这种问题，requests提供了<code>Session</code>对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [87]: import requests</span><br><span class="line"></span><br><span class="line">In [88]: s = requests.Session()</span><br><span class="line"></span><br><span class="line">In [89]: s.get(&apos;http://httpbin.org/cookies/set/number/123456789&apos;)</span><br><span class="line">Out[89]: &lt;Response [200]&gt;</span><br><span class="line"></span><br><span class="line">In [90]: response = s.get(&apos;http://httpbin.org/cookies&apos;)</span><br><span class="line"></span><br><span class="line">In [91]: print(response.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;cookies&quot;: &#123;</span><br><span class="line">    &quot;number&quot;: &quot;123456789&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h4><p>Requests 可以为 HTTPS 请求验证 SSL 证书，就像 web 浏览器一样。SSL 验证默认是开启的，如果证书验证失败，Requests 会抛出 SSLError。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [92]: import requests</span><br><span class="line"></span><br><span class="line">In [93]: response = requests.get(&apos;https://www.12306.cn&apos;)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">Error                                     Traceback (most recent call last)</span><br><span class="line">d:\program files\python3.6.1\lib\site-packages\urllib3\contrib\pyopenssl.py in wrap_socket(self, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">SSLError: HTTPSConnectionPool(host=&apos;www.12306.cn&apos;, port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(&quot;bad handshake: Error([(&apos;SSL routines&apos;, &apos;tls_process_server_certificate&apos;, &apos;certificate verify failed&apos;)],)&quot;,),))</span><br></pre></td></tr></table></figure></p><p>可以通过设置<code>verify=False</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [94]: import requests</span><br><span class="line"></span><br><span class="line">In [95]: response = requests.get(&apos;https://www.12306.cn&apos;, verify=False)</span><br><span class="line">d:\program files\python3.6.1\lib\site-packages\urllib3\connectionpool.py:858: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</span><br><span class="line">  InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">In [96]: print(response.status_code)</span><br><span class="line">200</span><br></pre></td></tr></table></figure></p><p>这里虽然状态码<code>200</code>，但还是有警告，提醒<code>Adding certificate verification is strongly advised.</code>可以通过设置<code>urllib3.disable_warnings()</code>去掉：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [97]: import requests</span><br><span class="line"></span><br><span class="line">In [98]: from requests.packages import urllib3</span><br><span class="line"></span><br><span class="line">In [99]: urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">In [100]: response = requests.get(&apos;https://www.12306.cn&apos;, verify=False)</span><br><span class="line"></span><br><span class="line">In [101]: print(response.status_code)</span><br><span class="line">200</span><br></pre></td></tr></table></figure></p><p>也可以指定一个本地证书用作客户端证书，可以是单个文件（包含密钥和证书）或一个包含两个文件路径的元组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(&apos;https://www.12306.cn&apos;, cert=(&apos;/path/server.crt&apos;, &apos;/path/key&apos;))</span><br></pre></td></tr></table></figure></p><p>文档还提到其他用法：</p><blockquote><p>你可以为 verify 传入 CA_BUNDLE 文件的路径，或者包含可信任 CA 证书文件的文件夹路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;requests.get(&apos;https://github.com&apos;, verify=&apos;/path/to/certfile&apos;)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>或者将其保持在会话中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;s = requests.Session()</span><br><span class="line">&gt;s.verify = &apos;/path/to/certfile&apos;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>更多使用方法请<a href="http://docs.python-requests.org/zh_CN/latest/user/advanced.html#ssl" target="_blank" rel="noopener">参考文档</a></p><h4 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [105]: import requests</span><br><span class="line"></span><br><span class="line">In [106]: proxies = &#123;</span><br><span class="line">     ...:   &quot;http&quot;: &quot;http://183.145.201.137:28500&quot;,</span><br><span class="line">     ...:   &quot;https&quot;: &quot;https://183.145.201.137:28500&quot;,</span><br><span class="line">     ...: &#125;</span><br><span class="line"></span><br><span class="line">In [107]: response = requests.get(&quot;http://httpbin.org/get&quot;, proxies=proxies)</span><br><span class="line"></span><br><span class="line">In [108]: print(response.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*/*&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Cache-Control&quot;: &quot;max-age=259200&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;close&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests/2.18.4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;origin&quot;: &quot;183.145.201.137&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/get&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果代理是需要用户名和密码的可以这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [109]: import requests</span><br><span class="line"></span><br><span class="line">In [110]: proxies = &#123;</span><br><span class="line">     ...:     &quot;http&quot;: &quot;http://user:password@183.145.201.137:28500/&quot;,</span><br><span class="line">     ...: &#125;</span><br><span class="line"></span><br><span class="line">In [111]: response = requests.get(&quot;http://httpbin.org/get&quot;, proxies=proxies)</span><br><span class="line"></span><br><span class="line">In [112]: print(response.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;*/*&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Cache-Control&quot;: &quot;max-age=259200&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;close&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;python-requests/2.18.4&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;origin&quot;: &quot;183.145.201.137&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/get&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了基本的HTTP代理Requests还支持SOCKS协议的代理。这是一个可选功能，使用需要安装第三方库:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests[socks]</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line">    &apos;http&apos;: &apos;socks5://user:pass@host:port&apos;,</span><br><span class="line">    &apos;https&apos;: &apos;socks5://user:pass@host:port&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [133]: import requests</span><br><span class="line"></span><br><span class="line">In [134]: from requests.exceptions import ConnectTimeout</span><br><span class="line"></span><br><span class="line">In [135]: try:</span><br><span class="line">     ...:     response = requests.get(&quot;http://httpbin.org/get&quot;, timeout = 0.2)</span><br><span class="line">     ...:     print(response.status_code)</span><br><span class="line">     ...: except ConnectTimeout:</span><br><span class="line">     ...:     print(&apos;ConnectTimeout&apos;)</span><br><span class="line">     ...:</span><br><span class="line">ConnectTimeout</span><br></pre></td></tr></table></figure><p>这个<code>timeout</code>值将会用作<code>connect</code>和<code>read</code>二者的<code>timeout</code>。如果要分别制定，就传入一个元组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(&apos;https://github.com&apos;, timeout=(3, 2))</span><br></pre></td></tr></table></figure></p><p>如果传入<code>timeout=None</code>就会让requests永远等待。</p><h4 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [145]: import requests</span><br><span class="line"></span><br><span class="line">In [146]: from requests.auth import HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">In [147]: response = requests.get(&apos;https://httpbin.org/basic-auth/user/passwd&apos;, auth=HTTPBasicAuth(&apos;user&apos;, &apos;w&apos;))</span><br><span class="line"></span><br><span class="line">In [148]: print(response.status_code)</span><br><span class="line">401</span><br></pre></td></tr></table></figure><p>上面是使用错误密码，下面是使用正确的密码请求的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [150]: import requests</span><br><span class="line"></span><br><span class="line">In [151]: from requests.auth import HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">In [152]: response = requests.get(&apos;https://httpbin.org/basic-auth/user/passwd&apos;, auth=HTTPBasicAuth(&apos;user&apos;, &apos;passwd&apos;))</span><br><span class="line"></span><br><span class="line">In [153]: print(response.status_code)</span><br><span class="line">200</span><br><span class="line"></span><br><span class="line">In [154]: print(response.text)</span><br><span class="line">&#123;</span><br><span class="line">  &quot;authenticated&quot;: true,</span><br><span class="line">  &quot;user&quot;: &quot;user&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>异常处理时，我们可以先捕获子类异常，再捕获父类异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [155]: import requests</span><br><span class="line"></span><br><span class="line">In [156]: from requests.exceptions import ReadTimeout, ConnectionError, RequestException</span><br><span class="line"></span><br><span class="line">In [157]: try:</span><br><span class="line">     ...:     response = requests.get(&quot;http://httpbin.org/get&quot;, timeout = 0.5)</span><br><span class="line">     ...:     print(response.status_code)</span><br><span class="line">     ...: except ReadTimeout:</span><br><span class="line">     ...:     print(&apos;Timeout&apos;)</span><br><span class="line">     ...: except ConnectionError:</span><br><span class="line">     ...:     print(&apos;Connection error&apos;)</span><br><span class="line">     ...: except RequestException:</span><br><span class="line">     ...:     print(&apos;Error&apos;)</span><br><span class="line">     ...:</span><br><span class="line">200</span><br></pre></td></tr></table></figure></p><p>更多有关异常的内容可以<a href="http://cn.python-requests.org/zh_CN/latest/api.html#id3" target="_blank" rel="noopener">参考文档</a>。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>详细的说明和使用可以<a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">点击这里</a>查看文档。</p>]]></content>
    
    <summary type="html">
    
      Python爬虫常用库requests的使用方法介绍
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫常用库urllib详解</title>
    <link href="http://jeffyang.top/Python/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB%E5%B8%B8%E7%94%A8%E5%BA%93urllib%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jeffyang.top/Python/爬虫/Python爬虫常用库urllib详解/</id>
    <published>2018-02-19T10:26:33.000Z</published>
    <updated>2018-02-26T19:24:27.271Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>urllib库是Python内置的HTTP请求库，官方文档里说的很清楚：</p><blockquote><p>urllib is a package that collects several modules for working with URLs:</p><ul><li><code>urllib.request</code> for opening and reading URLs</li><li><code>urllib.error</code> containing the exceptions raised by urllib.request</li><li><code>urllib.parse</code> for parsing URLs</li><li><code>urllib.robotparser</code> for parsing robots.txt files</li></ul></blockquote><p>这个库的使用在Python2里有一些区别，具体差异可以参考：</p><table><thead><tr><th style="text-align:center">Python 2</th><th style="text-align:center">Python 3</th></tr></thead><tbody><tr><td style="text-align:center"><code>urllib.urlretrieve()</code></td><td style="text-align:center"><code>urllib.request.urlretrieve()</code></td></tr><tr><td style="text-align:center"><code>urllib.urlcleanup()</code></td><td style="text-align:center"><code>urllib.request.urlcleanup()</code></td></tr><tr><td style="text-align:center"><code>urllib.quote()</code></td><td style="text-align:center"><code>urllib.parse.quote()</code></td></tr><tr><td style="text-align:center"><code>urllib.quote_plus()</code></td><td style="text-align:center"><code>urllib.parse.quote_plus()</code></td></tr><tr><td style="text-align:center"><code>urllib.unquote()</code></td><td style="text-align:center"><code>urllib.parse.unquote()</code></td></tr><tr><td style="text-align:center"><code>urllib.unquote_plus()</code></td><td style="text-align:center"><code>urllib.parse.unquote_plus()</code></td></tr><tr><td style="text-align:center"><code>urllib.urlencode()</code></td><td style="text-align:center"><code>urllib.parse.urlencode()</code></td></tr><tr><td style="text-align:center"><code>urllib.pathname2url()</code></td><td style="text-align:center"><code>urllib.request.pathname2url()</code></td></tr><tr><td style="text-align:center"><code>urllib.url2pathname()</code></td><td style="text-align:center"><code>urllib.request.url2pathname()</code></td></tr><tr><td style="text-align:center"><code>urllib.getproxies()</code></td><td style="text-align:center"><code>urllib.request.getproxies()</code></td></tr><tr><td style="text-align:center"><code>urllib.URLopener</code></td><td style="text-align:center"><code>urllib.request.URLopener</code></td></tr><tr><td style="text-align:center"><code>urllib.FancyURLopener</code></td><td style="text-align:center"><code>urllib.request.FancyURLopener</code></td></tr><tr><td style="text-align:center"><code>urllib.ContentTooShortError</code></td><td style="text-align:center"><code>urllib.error.ContentTooShortError</code></td></tr><tr><td style="text-align:center"><code>urllib2.urlopen()</code></td><td style="text-align:center"><code>urllib.request.urlopen()</code></td></tr><tr><td style="text-align:center"><code>urllib2.install_opener()</code></td><td style="text-align:center"><code>urllib.request.install_opener()</code></td></tr><tr><td style="text-align:center"><code>urllib2.build_opener()</code></td><td style="text-align:center"><code>urllib.request.build_opener()</code></td></tr><tr><td style="text-align:center"><code>urllib2.URLError</code></td><td style="text-align:center"><code>urllib.error.URLError</code></td></tr><tr><td style="text-align:center"><code>urllib2.HTTPError</code></td><td style="text-align:center"><code>urllib.error.HTTPError</code></td></tr><tr><td style="text-align:center"><code>urllib2.Request</code></td><td style="text-align:center"><code>urllib.request.Request</code></td></tr><tr><td style="text-align:center"><code>urllib2.OpenerDirector</code></td><td style="text-align:center"><code>urllib.request.OpenerDirector</code></td></tr><tr><td style="text-align:center"><code>urllib2.BaseHandler</code></td><td style="text-align:center"><code>urllib.request.BaseHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.HTTPDefaultErrorHandler</code></td><td style="text-align:center"><code>urllib.request.HTTPDefaultErrorHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.HTTPRedirectHandler</code></td><td style="text-align:center"><code>urllib.request.HTTPRedirectHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.HTTPCookieProcessor</code></td><td style="text-align:center"><code>urllib.request.HTTPCookieProcessor</code></td></tr><tr><td style="text-align:center"><code>urllib2.ProxyHandler</code></td><td style="text-align:center"><code>urllib.request.ProxyHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.HTTPPasswordMgr</code></td><td style="text-align:center"><code>urllib.request.HTTPPasswordMgr</code></td></tr><tr><td style="text-align:center"><code>urllib2.HTTPPasswordMgrWithDefaultRealm</code></td><td style="text-align:center"><code>urllib.request.HTTPPasswordMgrWithDefaultRealm</code></td></tr><tr><td style="text-align:center"><code>urllib2.AbstractBasicAuthHandler</code></td><td style="text-align:center"><code>urllib.request.AbstractBasicAuthHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.HTTPBasicAuthHandler</code></td><td style="text-align:center"><code>urllib.request.HTTPBasicAuthHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.ProxyBasicAuthHandler</code></td><td style="text-align:center"><code>urllib.request.ProxyBasicAuthHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.AbstractDigestAuthHandler</code></td><td style="text-align:center"><code>urllib.request.AbstractDigestAuthHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.HTTPDigestAuthHandler</code></td><td style="text-align:center"><code>urllib.request.HTTPDigestAuthHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.ProxyDigestAuthHandler</code></td><td style="text-align:center"><code>urllib.request.ProxyDigestAuthHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.HTTPHandler</code></td><td style="text-align:center"><code>urllib.request.HTTPHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.HTTPSHandler</code></td><td style="text-align:center"><code>urllib.request.HTTPSHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.FileHandler</code></td><td style="text-align:center"><code>urllib.request.FileHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.FTPHandler</code></td><td style="text-align:center"><code>urllib.request.FTPHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.CacheFTPHandler</code></td><td style="text-align:center"><code>urllib.request.CacheFTPHandler</code></td></tr><tr><td style="text-align:center"><code>urllib2.UnknownHandler</code></td><td style="text-align:center"><code>urllib.request.UnknownHandler</code></td></tr></tbody></table><p>我这里用的是Python3.6版本。</p><h3 id="urllib-request请求模块"><a href="#urllib-request请求模块" class="headerlink" title="urllib.request请求模块"></a>urllib.request请求模块</h3><h4 id="urlopen函数"><a href="#urlopen函数" class="headerlink" title="urlopen函数"></a>urlopen函数</h4><p>属于<code>urllib.request</code>模块，用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)</span><br></pre></td></tr></table></figure></p><p><code>url</code>为访问地址，<code>data</code>为指定要发送到服务器的附加数据，<code>timeout</code>参数设定超时，后面的是证书和SSL相关参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import urllib.request</span><br><span class="line"></span><br><span class="line">In [2]: response = urllib.request.urlopen(&apos;http://www.baidu.com&apos;)</span><br><span class="line"></span><br><span class="line">In [3]: print(response.read().decode(&apos;utf-8&apos;))</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">In [4]:</span><br></pre></td></tr></table></figure></p><p><a href="https://httpbin.org/" target="_blank" rel="noopener">https://httpbin.org/</a>是供给人们测试HTTP请求的网站。下面测试一个POST请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [10]: import urllib.parse</span><br><span class="line"></span><br><span class="line">In [11]: import urllib.request</span><br><span class="line"></span><br><span class="line">In [12]: data = bytes(urllib.parse.urlencode(&#123;&apos;name&apos;:&apos;Jeff&apos;&#125;), encoding=&apos;utf8&apos;)</span><br><span class="line"></span><br><span class="line">In [13]: response = urllib.request.urlopen(&apos;http://httpbin.org/post&apos;, data=data)</span><br><span class="line"></span><br><span class="line">In [14]: print(response.read())</span><br><span class="line">b&apos;&#123;\n  &quot;args&quot;: &#123;&#125;, \n  &quot;data&quot;: &quot;&quot;, \n  &quot;files&quot;: &#123;&#125;, \n  &quot;form&quot;: &#123;\n    &quot;name&quot;: &quot;Jeff&quot;\n  &#125;, \n  &quot;headers&quot;: &#123;\n    &quot;Accept-Encoding&quot;: &quot;identity&quot;, \n    &quot;Connection&quot;: &quot;close&quot;, \n    &quot;Content-Length&quot;: &quot;9&quot;, \n    &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, \n    &quot;Host&quot;: &quot;httpbin.org&quot;, \n    &quot;User-Agent&quot;: &quot;Python-urllib/3.6&quot;\n  &#125;, \n  &quot;json&quot;: null, \n  &quot;origin&quot;: &quot;183.21.190.87&quot;, \n  &quot;url&quot;: &quot;http://httpbin.org/post&quot;\n&#125;\n&apos;</span><br></pre></td></tr></table></figure></p><p>下面是<code>timeout</code>参数的使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [15]: import urllib.request</span><br><span class="line"></span><br><span class="line">In [16]: response = urllib.request.urlopen(&apos;http://httpbin.org/get&apos;, timeout=1)</span><br><span class="line"></span><br><span class="line">In [17]: print(response.read())</span><br><span class="line">b&apos;&#123;\n  &quot;args&quot;: &#123;&#125;, \n  &quot;headers&quot;: &#123;\n    &quot;Accept-Encoding&quot;: &quot;identity&quot;, \n    &quot;Connection&quot;: &quot;close&quot;, \n    &quot;Host&quot;: &quot;httpbin.org&quot;, \n    &quot;User-Agent&quot;: &quot;Python-urllib/3.6&quot;\n  &#125;, \n  &quot;origin&quot;: &quot;183.21.190.87&quot;, \n  &quot;url&quot;: &quot;http://httpbin.org/get&quot;\n&#125;\n&apos;</span><br><span class="line"></span><br><span class="line">In [18]: import socket</span><br><span class="line"></span><br><span class="line">In [19]: import urllib.request</span><br><span class="line"></span><br><span class="line">In [20]: import urllib.error</span><br><span class="line"></span><br><span class="line">In [21]: try:</span><br><span class="line">    ...:     response = urllib.request.urlopen(&apos;http://httpbin.org/get&apos;, timeout=0.1)</span><br><span class="line">    ...: except urllib.error.URLError as e:</span><br><span class="line">    ...:     if isinstance(e.reason, socket.timeout):</span><br><span class="line">    ...:         print(&apos;TIME OUT&apos;)</span><br><span class="line">    ...:</span><br><span class="line">TIME OUT</span><br></pre></td></tr></table></figure></p><p>超过设定的时间就会抛出异常。</p><h4 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h4><p>直接使用<code>urlopen()</code>是不可以请求时加入headers的，要加headers需要构造一个Request对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">In [33]: from urllib import request, parse</span><br><span class="line"></span><br><span class="line">In [34]: url = &apos;http://httpbin.org/post&apos;</span><br><span class="line"></span><br><span class="line">In [35]: headers = &#123;</span><br><span class="line">    ...:     &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.</span><br><span class="line">    ...: 0.3239.132 Safari/537.36&apos;,</span><br><span class="line">    ...:     &apos;Host&apos;: &apos;httpbin.org&apos;</span><br><span class="line">    ...: &#125;</span><br><span class="line"></span><br><span class="line">In [36]: dict = &#123;</span><br><span class="line">    ...:     &apos;name&apos;: &apos;Jeff&apos;</span><br><span class="line">    ...: &#125;</span><br><span class="line"></span><br><span class="line">In [37]: data = bytes(parse.urlencode(dict), encoding=&apos;utf8&apos;)</span><br><span class="line"></span><br><span class="line">In [38]: req = request.Request(url=url, headers=headers, method=&apos;POST&apos;)</span><br><span class="line"></span><br><span class="line">In [39]: response = request.urlopen(req)</span><br><span class="line"></span><br><span class="line">In [40]: print(response.read().decode(&apos;utf-8&apos;))</span><br><span class="line">&#123;</span><br><span class="line">  &quot;args&quot;: &#123;&#125;,</span><br><span class="line">  &quot;data&quot;: &quot;&quot;,</span><br><span class="line">  &quot;files&quot;: &#123;&#125;,</span><br><span class="line">  &quot;form&quot;: &#123;&#125;,</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;identity&quot;,</span><br><span class="line">    &quot;Connection&quot;: &quot;close&quot;,</span><br><span class="line">    &quot;Content-Length&quot;: &quot;0&quot;,</span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;,</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;json&quot;: null,</span><br><span class="line">  &quot;origin&quot;: &quot;183.21.190.87&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;http://httpbin.org/post&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一个方法<code>add_header</code>是用于添加headers的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">req.add_header(&apos;User-Agent&apos;, &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36&apos;)</span><br></pre></td></tr></table></figure></p><h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><p>得到Response之后可以看到响应的一些基本信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [22]: import urllib.request</span><br><span class="line"></span><br><span class="line">In [23]: response = urllib.request.urlopen(&apos;https://www.baidu.com&apos;)</span><br><span class="line"></span><br><span class="line">In [24]: print(type(response))</span><br><span class="line">&lt;class &apos;http.client.HTTPResponse&apos;&gt;</span><br><span class="line"></span><br><span class="line">In [25]: print(response.status)</span><br><span class="line">200</span><br><span class="line"></span><br><span class="line">In [26]: print(response.getheader(&apos;Server&apos;))</span><br><span class="line">BWS/1.1</span><br><span class="line"></span><br><span class="line">In [27]: print(response.getheaders())</span><br><span class="line">[(&apos;Accept-Ranges&apos;, &apos;bytes&apos;), (&apos;Cache-Control&apos;, &apos;no-cache&apos;), (&apos;Content-Length&apos;, &apos;227&apos;), (&apos;Content-Type&apos;, &apos;text/html&apos;), (&apos;Date&apos;, &apos;Sun, 25 Feb 2018 14:38:41 GMT&apos;), (&apos;Last-Modified&apos;, &apos;Sun, 11 Feb 2018 04:46:00 GMT&apos;), (&apos;P3p&apos;, &apos;CP=&quot; OTI DSP COR IVA OUR IND COM &quot;&apos;), (&apos;Pragma&apos;, &apos;no-cache&apos;), (&apos;Server&apos;, &apos;BWS/1.1&apos;), (&apos;Set-Cookie&apos;, &apos;BD_NOT_HTTPS=1; path=/; Max-Age=300&apos;), (&apos;Set-Cookie&apos;, &apos;BIDUPSID=B15F4542153F7063286F0B770AC1501D; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com&apos;), (&apos;Set-Cookie&apos;, &apos;PSTM=1519569521; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com&apos;), (&apos;Strict-Transport-Security&apos;, &apos;max-age=0&apos;), (&apos;X-Ua-Compatible&apos;, &apos;IE=Edge,chrome=1&apos;), (&apos;Connection&apos;, &apos;close&apos;)]</span><br></pre></td></tr></table></figure></p><h4 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h4><p>设置代理用于欺骗目标网站,让服务器把请求识别成来自不同地区的请求防止爬虫被封：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [68]: import urllib.request</span><br><span class="line"></span><br><span class="line">In [69]: proxy_handler = urllib.request.ProxyHandler(&#123;</span><br><span class="line">    ...:     &apos;http&apos;: &apos;http://113.121.242.122:30041&apos;,</span><br><span class="line">    ...:     &apos;https&apos;: &apos;https://113.121.242.122:30041&apos;</span><br><span class="line">    ...: &#125;)</span><br><span class="line"></span><br><span class="line">In [70]: opener = urllib.request.build_opener(proxy_handler)</span><br><span class="line"></span><br><span class="line">In [71]: response = opener.open(&apos;http://httpbin.org/get&apos;)</span><br><span class="line"></span><br><span class="line">In [72]: print(response.read())</span><br><span class="line">b&apos;&#123;\n  &quot;args&quot;: &#123;&#125;, \n  &quot;headers&quot;: &#123;\n    &quot;Accept-Encoding&quot;: &quot;identity&quot;, \n    &quot;Cache-Control&quot;: &quot;max-age=259200&quot;, \n    &quot;Connection&quot;: &quot;close&quot;, \n    &quot;Host&quot;: &quot;httpbin.org&quot;, \n    &quot;User-Agent&quot;: &quot;Python-urllib/3.6&quot;\n  &#125;, \n  &quot;origin&quot;: &quot;113.121.242.122&quot;, \n  &quot;url&quot;: &quot;http://httpbin.org/get&quot;\n&#125;\n&apos;</span><br></pre></td></tr></table></figure></p><p>可以看到<code>&quot;origin&quot;: &quot;113.121.242.122&quot;</code>是我们设置的代理。</p><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>用于保存我们的登录状态。<br>以下代码可以输出访问百度的cookie内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [73]: import http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line">In [74]: cookie = http.cookiejar.CookieJar()</span><br><span class="line"></span><br><span class="line">In [75]: handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line"></span><br><span class="line">In [76]: opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">In [77]: response = opener.open(&apos;http://www.baidu.com&apos;)</span><br><span class="line"></span><br><span class="line">In [78]: for item in cookie:</span><br><span class="line">    ...:     print(item.name + &apos;=&apos; + item.value)</span><br><span class="line">    ...:</span><br><span class="line">BAIDUID=B158E71ED10979B2873EAD4F92F69BD8:FG=1</span><br><span class="line">BIDUPSID=B158E71ED10979B2873EAD4F92F69BD8</span><br><span class="line">H_PS_PSSID=1469_21112_18559_20930</span><br><span class="line">PSTM=1519575810</span><br><span class="line">BDSVRTM=0</span><br><span class="line">BD_HOME=0</span><br></pre></td></tr></table></figure></p><p>也可以把cookie保存起来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [79]: import http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line">In [80]: filename = &quot;cookie.txt&quot;</span><br><span class="line"></span><br><span class="line">In [81]: cookie = http.cookiejar.MozillaCookieJar(filename)</span><br><span class="line"></span><br><span class="line">In [82]: handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line"></span><br><span class="line">In [83]: opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">In [84]: response = opener.open(&apos;http://www.baidu.com&apos;)</span><br><span class="line"></span><br><span class="line">In [85]: cookie.save(ignore_discard=True, ignore_expires=True)</span><br></pre></td></tr></table></figure></p><p>这是<code>MozillaCookieJar</code>的保存格式，打开<code>cookie.txt</code>可以看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># Netscape HTTP Cookie File</span><br><span class="line"># http://curl.haxx.se/rfc/cookie_spec.html</span><br><span class="line"># This is a generated file!  Do not edit.</span><br><span class="line"></span><br><span class="line">.baidu.comTRUE/FALSE3667060046BAIDUID241959CDD6CF8465BDF2D583B828249D:FG=1</span><br><span class="line">.baidu.comTRUE/FALSE3667060046BIDUPSID241959CDD6CF8465BDF2D583B828249D</span><br><span class="line">.baidu.comTRUE/FALSEH_PS_PSSID1428_21107_17001_20930</span><br><span class="line">.baidu.comTRUE/FALSE3667060046PSTM1519576400</span><br><span class="line">www.baidu.comFALSE/FALSEBDSVRTM0</span><br><span class="line">www.baidu.comFALSE/FALSEBD_HOME0</span><br></pre></td></tr></table></figure></p><p>还有另一种保存格式<code>LWPCookieJar</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [86]: cookie.save(ignore_discard=True, ignore_expires=True)</span><br><span class="line"></span><br><span class="line">In [87]: import http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line">In [88]: filename = &quot;cookie.txt&quot;</span><br><span class="line"></span><br><span class="line">In [89]: cookie = http.cookiejar.LWPCookieJar(filename)</span><br><span class="line"></span><br><span class="line">In [90]: handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line"></span><br><span class="line">In [91]: opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">In [92]: response = opener.open(&apos;http://www.baidu.com&apos;)</span><br><span class="line"></span><br><span class="line">In [93]: cookie.save(ignore_discard=True, ignore_expires=True)</span><br></pre></td></tr></table></figure></p><p>打开<code>cookie.txt</code>可以看到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#LWP-Cookies-2.0</span><br><span class="line">Set-Cookie3: BAIDUID=&quot;04A75DA71590BD4D6D9839D727E42ABB:FG=1&quot;; path=&quot;/&quot;; domain=&quot;.baidu.com&quot;; path_spec; domain_dot; expires=&quot;2086-03-15 20:26:18Z&quot;; version=0</span><br><span class="line">Set-Cookie3: BIDUPSID=04A75DA71590BD4D6D9839D727E42ABB; path=&quot;/&quot;; domain=&quot;.baidu.com&quot;; path_spec; domain_dot; expires=&quot;2086-03-15 20:26:18Z&quot;; version=0</span><br><span class="line">Set-Cookie3: H_PS_PSSID=25641_1427_21103_22160; path=&quot;/&quot;; domain=&quot;.baidu.com&quot;; path_spec; domain_dot; discard; version=0</span><br><span class="line">Set-Cookie3: PSTM=1519578732; path=&quot;/&quot;; domain=&quot;.baidu.com&quot;; path_spec; domain_dot; expires=&quot;2086-03-15 20:26:18Z&quot;; version=0</span><br><span class="line">Set-Cookie3: BDSVRTM=0; path=&quot;/&quot;; domain=&quot;www.baidu.com&quot;; path_spec; discard; version=0</span><br><span class="line">Set-Cookie3: BD_HOME=0; path=&quot;/&quot;; domain=&quot;www.baidu.com&quot;; path_spec; discard; version=0</span><br></pre></td></tr></table></figure></p><p>读取保存的cookie：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [94]: import http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line">In [95]: cookie = http.cookiejar.LWPCookieJar()</span><br><span class="line"></span><br><span class="line">In [96]: cookie.load(&apos;cookie.txt&apos;, ignore_discard=True, ignore_expires=True)</span><br><span class="line"></span><br><span class="line">In [97]: handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line"></span><br><span class="line">In [98]: opener = urllib.request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">In [99]: response = opener.open(&apos;http://www.baidu.com&apos;)</span><br><span class="line"></span><br><span class="line">In [100]: print(response.read().decode(&apos;utf-8&apos;))</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>这个过程就是把cookie保存下来，然后在下次请求时读取保存的cookie，它适用于需要登录页面。</p><h3 id="urllib-error异常处理模块"><a href="#urllib-error异常处理模块" class="headerlink" title="urllib.error异常处理模块"></a>urllib.error异常处理模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [102]: from urllib import request, error</span><br><span class="line"></span><br><span class="line">In [103]: try:</span><br><span class="line">     ...:     response = request.urlopen(&apos;http://jeffyang.top/404.html&apos;)</span><br><span class="line">     ...: except error.URLError as e:</span><br><span class="line">     ...:     print(e.reason)</span><br><span class="line">     ...:</span><br><span class="line">Not Found</span><br></pre></td></tr></table></figure><p><code>URLError</code>只有<code>reason</code>属性，而<code>HTTPError</code>还有<code>code</code>和<code>headers</code>，具体可以查看<a href="https://docs.python.org/3/library/urllib.error.html#module-urllib.error" target="_blank" rel="noopener">官方文档</a>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">In [104]: from urllib import request, error</span><br><span class="line"></span><br><span class="line">In [105]: try:</span><br><span class="line">     ...:     response = request.urlopen(&apos;http://jeffyang.top/404.html&apos;)</span><br><span class="line">     ...: except error.HTTPError as e:</span><br><span class="line">     ...:     print(e.reason, e.code, e.headers, sep=&apos;\n&apos;)</span><br><span class="line">     ...: except error.URLError as e:</span><br><span class="line">     ...:     print(e.reason)</span><br><span class="line">     ...: else:</span><br><span class="line">     ...:     print(&apos;Qequest Successfully!&apos;)</span><br><span class="line">     ...:</span><br><span class="line">Not Found</span><br><span class="line">404</span><br><span class="line">Server: GitHub.com</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">ETag: &quot;5952c2dc-247c&quot;</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Content-Security-Policy: default-src &apos;none&apos;; style-src &apos;unsafe-inline&apos;; img-src data:; connect-src &apos;self&apos;</span><br><span class="line">X-GitHub-Request-Id: EF30:11359:B2B55C:BCEF88:5A92F18B</span><br><span class="line">Content-Length: 9340</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Date: Sun, 25 Feb 2018 17:31:09 GMT</span><br><span class="line">Via: 1.1 varnish</span><br><span class="line">Age: 338</span><br><span class="line">Connection: close</span><br><span class="line">X-Served-By: cache-hnd18736-HND</span><br><span class="line">X-Cache: HIT</span><br><span class="line">X-Cache-Hits: 1</span><br><span class="line">X-Timer: S1519579870.603620,VS0,VE0</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Fastly-Request-ID: 6603cd54ba10d110b51972d94037a3ecab5a6b17</span><br></pre></td></tr></table></figure></p><p>前面使用<code>timeout</code>时也有用到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [107]: import socket</span><br><span class="line"></span><br><span class="line">In [108]: import urllib.request</span><br><span class="line"></span><br><span class="line">In [109]: import urllib.error</span><br><span class="line"></span><br><span class="line">In [110]: try:</span><br><span class="line">     ...:     response = urllib.request.urlopen(&apos;https://www.baidu.com&apos;, timeout=0.01)</span><br><span class="line">     ...: except urllib.error.URLError as e:</span><br><span class="line">     ...:     print(type(e.reason))</span><br><span class="line">     ...:     if isinstance(e.reason, socket.timeout):</span><br><span class="line">     ...:         print(&apos;TIME OUT&apos;)</span><br><span class="line">     ...:</span><br><span class="line">&lt;class &apos;socket.timeout&apos;&gt;</span><br><span class="line">TIME OUT</span><br></pre></td></tr></table></figure></p><p>可以看到<code>e.reason</code>是一个<code>&lt;class &#39;socket.timeout&#39;&gt;</code>对象，因此可以使用<code>isinstance</code>判断。<br>ps：<code>isinstance()</code>与<code>type()</code>区别：</p><ul><li><code>type()</code>不会认为子类是一种父类类型，不考虑继承关系。</li><li><code>isinstance()</code>会认为子类是一种父类类型，考虑继承关系。</li></ul><h3 id="urllib-parse模块"><a href="#urllib-parse模块" class="headerlink" title="urllib.parse模块"></a>urllib.parse模块</h3><p><code>urlparse()</code>函数用于拆分URL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.parse.urlparse(urlstring, scheme=&apos;&apos;, allow_fragments=True)</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [111]: from urllib.parse import urlparse</span><br><span class="line"></span><br><span class="line">In [112]: result = urlparse(&apos;http://www.baidu.com/index.html;user?id=5#comment&apos;)</span><br><span class="line"></span><br><span class="line">In [113]: print(type(result), result)</span><br><span class="line">&lt;class &apos;urllib.parse.ParseResult&apos;&gt; ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5&apos;, fragment=&apos;comment&apos;)</span><br></pre></td></tr></table></figure></p><p><code>scheme</code>参数是协议类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [114]: from urllib.parse import urlparse</span><br><span class="line"></span><br><span class="line">In [115]: result = urlparse(&apos;www.baidu.com/index.html;user?id=5#comment&apos;, scheme=&apos;https&apos;)</span><br><span class="line"></span><br><span class="line">In [116]: print(result)</span><br><span class="line">ParseResult(scheme=&apos;https&apos;, netloc=&apos;&apos;, path=&apos;www.baidu.com/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5&apos;, fragment=&apos;comment&apos;)</span><br></pre></td></tr></table></figure></p><p>如果URL里已经有协议类型了，那么这个参数就不会生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [117]: from urllib.parse import urlparse</span><br><span class="line"></span><br><span class="line">In [118]: result = urlparse(&apos;http://www.baidu.com/index.html;user?id=5#comment&apos;, scheme=&apos;https&apos;)</span><br><span class="line"></span><br><span class="line">In [119]: print(result)</span><br><span class="line">ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5&apos;, fragment=&apos;comment&apos;)</span><br></pre></td></tr></table></figure></p><p><code>allow_fragments</code>参数是锚点链接的设置，为<code>False</code>则会把<code>#</code>后面的内容拼接到前面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [120]: from urllib.parse import urlparse</span><br><span class="line"></span><br><span class="line">In [121]: result = urlparse(&apos;http://www.baidu.com/index.html;user?id=5#comment&apos;, allow_fragments=False)</span><br><span class="line"></span><br><span class="line">In [122]: print(result)</span><br><span class="line">ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html&apos;, params=&apos;user&apos;, query=&apos;id=5#comment&apos;, fragment=&apos;&apos;)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [123]: from urllib.parse import urlparse</span><br><span class="line"></span><br><span class="line">In [124]: result = urlparse(&apos;http://www.baidu.com/index.html#comment&apos;, allow_fragments=False)</span><br><span class="line"></span><br><span class="line">In [125]: print(result)</span><br><span class="line">ParseResult(scheme=&apos;http&apos;, netloc=&apos;www.baidu.com&apos;, path=&apos;/index.html#comment&apos;, params=&apos;&apos;, query=&apos;&apos;, fragment=&apos;&apos;)</span><br></pre></td></tr></table></figure><p><code>urlunparse()</code>函数与<code>urlparse()</code>函数相反，用于组合URL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [126]: from urllib.parse import urlunparse</span><br><span class="line"></span><br><span class="line">In [127]: data = [&apos;http&apos;, &apos;www.baidu.com&apos;, &apos;index.html&apos;, &apos;user&apos;, &apos;a=6&apos;, &apos;comment&apos;]</span><br><span class="line"></span><br><span class="line">In [128]: print(urlunparse(data))</span><br><span class="line">http://www.baidu.com/index.html;user?a=6#comment</span><br></pre></td></tr></table></figure></p><p><code>urljoin()</code>函数用于拼接URL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [129]: from urllib.parse import urljoin</span><br><span class="line"></span><br><span class="line">In [130]: print(urljoin(&apos;http://www.baidu.com&apos;, &apos;FAQ.html&apos;))</span><br><span class="line">http://www.baidu.com/FAQ.html</span><br><span class="line"></span><br><span class="line">In [131]: print(urljoin(&apos;http://www.baidu.com&apos;, &apos;https://jeffyang.top/404.html&apos;))</span><br><span class="line">https://jeffyang.top/404.html</span><br><span class="line"></span><br><span class="line">In [132]: print(urljoin(&apos;http://www.baidu.com?wd=abc&apos;, &apos;http://jeffyang.top/index.html&apos;))</span><br><span class="line">http://jeffyang.top/index.html</span><br><span class="line"></span><br><span class="line">In [133]: print(urljoin(&apos;http://www.baidu.com&apos;, &apos;?category=2#comment&apos;))</span><br><span class="line">http://www.baidu.com?category=2#comment</span><br><span class="line"></span><br><span class="line">In [134]: print(urljoin(&apos;www.baidu.com#comment&apos;, &apos;?category=2&apos;))</span><br><span class="line">www.baidu.com?category=2</span><br></pre></td></tr></table></figure></p><p>前后的URL都可以分成六个部分，前后URL如果都有这些部分，会以后面的URL为准。</p><p><code>urlencode()</code>可以把一个字典对象转换成<code>GET</code>请求参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [136]: from urllib.parse import urlencode</span><br><span class="line"></span><br><span class="line">In [137]: params = &#123;</span><br><span class="line">     ...:     &apos;name&apos;: &apos;jeff&apos;,</span><br><span class="line">     ...:     &apos;age&apos;: 21</span><br><span class="line">     ...: &#125;</span><br><span class="line"></span><br><span class="line">In [138]: base_url = &apos;http://www.baidu.com?&apos;</span><br><span class="line"></span><br><span class="line">In [139]: url = base_url + urlencode(params)</span><br><span class="line"></span><br><span class="line">In [140]: print(url)</span><br><span class="line">http://www.baidu.com?name=jeff&amp;age=21</span><br></pre></td></tr></table></figure></p><h3 id="urllib-robotparser解析robots-txt模块"><a href="#urllib-robotparser解析robots-txt模块" class="headerlink" title="urllib.robotparser解析robots.txt模块"></a>urllib.robotparser解析robots.txt模块</h3><p>这个模块用于解析 robots.txt 规则，判断要爬取的 url 按照 robots.txt 文件是否合法。</p><p>这个模块平常使用的不是很多，具体的内容可以<a href="https://docs.python.org/3/library/urllib.robotparser.html" target="_blank" rel="noopener">查看文档</a>。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>详细的说明和使用可以<a href="https://docs.python.org/3/library/urllib.html" target="_blank" rel="noopener">点击这里</a>查看文档。</p>]]></content>
    
    <summary type="html">
    
      Python爬虫常用库urllib的使用方法介绍
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python库Numpy使用入门</title>
    <link href="http://jeffyang.top/Python/Python%E5%BA%93Numpy%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://jeffyang.top/Python/Python库Numpy使用入门/</id>
    <published>2018-02-18T13:20:00.000Z</published>
    <updated>2018-02-19T19:07:51.419Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是慕课网<a href="https://www.imooc.com/learn/943" target="_blank" rel="noopener">Python人工智能常用库Numpy使用入门</a>整理的学习笔记</p><h3 id="Anaconda介绍与安装"><a href="#Anaconda介绍与安装" class="headerlink" title="Anaconda介绍与安装"></a>Anaconda介绍与安装</h3><p>anaconda是一个开源的用于科学计算的Python发行版本，是一个包管理器、环境管理器，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。它里面预装好了conda、某个版本的python、众多packages、科学计算工具等等。</p><p><a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">访问官网</a>下载安装包直接安装，安装时把<code>Add Anaconda to my PATH environment variable</code>也勾上了。</p><h3 id="jupyter-notebook简单教程"><a href="#jupyter-notebook简单教程" class="headerlink" title="jupyter notebook简单教程"></a>jupyter notebook简单教程</h3><p>安装好anaconda之后点击<strong>开始</strong>，找到Anaconda文件夹，点击Jupyter Notebook就可以打开，这样打开的话可以看到命令行里：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[I 23:31:32.533 NotebookApp] Writing notebook server cookie secret to C:\Users\ASUS\AppData\Roaming\jupyter\runtime\notebook_cookie_secret</span><br><span class="line">[I 23:31:34.383 NotebookApp] JupyterLab beta preview extension loaded from D:\ProgramFiles\Anaconda3\lib\site-packages\jupyterlab</span><br><span class="line">[I 23:31:34.383 NotebookApp] JupyterLab application directory is D:\ProgramFiles\Anaconda3\share\jupyter\lab</span><br><span class="line">[I 23:31:34.555 NotebookApp] Serving notebooks from local directory: C:\Users\ASUS</span><br></pre></td></tr></table></figure></p><p>创建的文件都是放在<code>C:\Users\ASUS</code>目录里的。</p><p>要自行选择文件夹保存，可以cmd命令行切换到你要保存的目录下，运行<code>jupyter notebook</code>。</p><p>这里需要<strong>注意</strong>：如果前面安装时没有勾选<code>Add Anaconda to my PATH environment variable</code>就不能直接使用命令行的方式打开。</p><p>在打开的Jupyter noteb里点击右上角的New，选择Python3就可以新建一个notebook。点击<code>Untitled</code>可以给文件命名，然后可以看到文件夹里的文件了</p><p><img src="http://p3vld0dkf.bkt.clouddn.com/jupyter%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B.png" alt="jupyter notebook"></p><p>可以点击选择编写代码还是markdown笔记，旁边还有一些快捷按钮。前面几个按顺序分别是：保存、新增一行输入框、删除选中行、复制、粘贴、上移、下移。此外，最后一个键盘样的按钮可以查看快捷键。</p><p>编写好代码或者markdown都可以使用<code>alt + enter</code>快捷键查看输出。</p><h3 id="Numpy简单教程-数组"><a href="#Numpy简单教程-数组" class="headerlink" title="Numpy简单教程 - 数组"></a>Numpy简单教程 - 数组</h3><p>以下内容导出自jupyter notebook，<a href="/numpy.html">点击这里</a>可以看得比较清晰。</p><p>数组Array（rank （数组的维数））：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([1, 2, 3])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type(a)</span><br></pre></td></tr></table></figure><pre><code>numpy.ndarray</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.shape  <span class="comment"># 数组的大小</span></span><br></pre></td></tr></table></figure><pre><code>(3,)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a.reshape((<span class="number">1</span>, <span class="number">-1</span>))  <span class="comment"># 1表示数组是1行，-1是占位符，其实代表的是3列</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.shape</span><br></pre></td></tr></table></figure><pre><code>(1, 3)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.shape</span><br></pre></td></tr></table></figure><pre><code>(6,)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a.reshape((<span class="number">2</span>, <span class="number">-1</span>))  <span class="comment"># 这里的2代表2行，-1代表3列，因为6个元素变成2行</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.shape</span><br></pre></td></tr></table></figure><pre><code>(2, 3)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 3],       [4, 5, 6]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = a.reshape((<span class="number">-1</span>, <span class="number">2</span>))  <span class="comment"># -1只是占位符，可以放在任意位置，这里-1表示3行</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2],       [3, 4],       [5, 6]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><pre><code>5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>, <span class="number">0</span>] = <span class="number">55</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[ 1,  2],       [ 3,  4],       [55,  6]])</code></pre><p><strong>zeros()可以用于创建元素全为0的数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.zeros((<span class="number">3</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[0., 0.],       [0., 0.],       [0., 0.]])</code></pre><p><strong>ones()可以用于创建元素全为1的数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.ones((<span class="number">2</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[1., 1., 1.],       [1., 1., 1.]])</code></pre><p><strong>full()可以用于创建元素全为指定值的数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.full((<span class="number">2</span>, <span class="number">3</span>), <span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[3, 3, 3],       [3, 3, 3]])</code></pre><p><strong>eye()可以用于创建指定维度的单位矩阵</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.eye(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[1., 0., 0.],       [0., 1., 0.],       [0., 0., 1.]])</code></pre><p><strong>random.random()可以用于创建元素值都是0-1之间的随机数组</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.random((<span class="number">3</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[0.07850067, 0.26126437, 0.27118259, 0.99299099],       [0.74982937, 0.3804697 , 0.14492257, 0.42120364],       [0.34282385, 0.69722592, 0.06523827, 0.16707083]])</code></pre><h3 id="Numpy简单教程-索引操作"><a href="#Numpy简单教程-索引操作" class="headerlink" title="Numpy简单教程 - 索引操作"></a>Numpy简单教程 - 索引操作</h3><p>indexing索引操作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">            [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">            [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">-2</span>:, <span class="number">1</span>:<span class="number">3</span>]  <span class="comment"># -2:表示倒数第二行到最后一行，1:3表示第二列到第三列，索引从0开始</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 6,  7],       [10, 11]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">1</span>, <span class="number">-2</span>]  <span class="comment"># 第二行，倒数第二列</span></span><br></pre></td></tr></table></figure><pre><code>7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.shape</span><br></pre></td></tr></table></figure><pre><code>(3, 4)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = a[<span class="number">-2</span>:, <span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.shape  <span class="comment"># 维度变低了</span></span><br></pre></td></tr></table></figure><pre><code>(2, 2)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = a[<span class="number">2</span>, <span class="number">1</span>:<span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure><pre><code>array([10, 11])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.shape</span><br></pre></td></tr></table></figure><pre><code>(2,)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = a[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure><pre><code>7</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.shape</span><br></pre></td></tr></table></figure><pre><code>()</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[ 1,  2,  3,  4],       [ 5,  6,  7,  8],       [ 9, 10, 11, 12]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[np.arange(<span class="number">3</span>), <span class="number">1</span>] += <span class="number">10</span>  <span class="comment"># 第二列所有元素加10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[ 1, 12,  3,  4],       [ 5, 16,  7,  8],       [ 9, 20, 11, 12]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><pre><code>array([0, 1, 2])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.arange(<span class="number">3</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><pre><code>array([3, 4, 5, 6])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[ 1, 22,  3,  4],       [ 5, 26,  7,  8],       [ 9, 30, 11, 12]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[np.arange(<span class="number">3</span>), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]] += <span class="number">10</span>  <span class="comment"># 各行的第二三四列分别加10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[ 1, 32,  3,  4],       [ 5, 26, 17,  8],       [ 9, 30, 11, 22]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]] += <span class="number">10</span>  <span class="comment"># 第二列所有元素加10</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[ 1, 42,  3,  4],       [ 5, 36, 17,  8],       [ 9, 40, 11, 22]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result_index = a&gt;<span class="number">10</span>  <span class="comment"># 找出元素值大于10的索引</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result_index</span><br></pre></td></tr></table></figure><pre><code>array([[False,  True, False, False],       [False,  True,  True, False],       [False,  True,  True,  True]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[result_index]  <span class="comment"># 找出值大于10的元素</span></span><br></pre></td></tr></table></figure><pre><code>array([42, 36, 17, 40, 11, 22])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[a&gt;<span class="number">10</span>]  <span class="comment"># 找出值大于10的元素</span></span><br></pre></td></tr></table></figure><pre><code>array([42, 36, 17, 40, 11, 22])</code></pre><h3 id="Numpy简单教程-元素数据类型"><a href="#Numpy简单教程-元素数据类型" class="headerlink" title="Numpy简单教程 - 元素数据类型"></a>Numpy简单教程 - 元素数据类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>])  <span class="comment"># numpy会自动判断元素的数据类型</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&apos;int32&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1.1</span>, <span class="number">2.2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&apos;float64&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2.2</span>])  <span class="comment"># 如果既有整数又有浮点数会当成浮点数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.dtype</span><br></pre></td></tr></table></figure><pre><code>dtype(&apos;float64&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1.6</span>, <span class="number">2.2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1.6</span>, <span class="number">2.2</span>], dtype=np.int64)  <span class="comment"># 手动指定成int类型</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a  <span class="comment"># 去除小数部分，不是四舍五入！</span></span><br></pre></td></tr></table></figure><pre><code>array([1, 2], dtype=int64)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([<span class="number">1.6</span>, <span class="number">2.2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = np.array(a, dtype=np.int64)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure><pre><code>array([1, 2], dtype=int64)</code></pre><h3 id="Numpy简单教程-数组运算与常用函数"><a href="#Numpy简单教程-数组运算与常用函数" class="headerlink" title="Numpy简单教程 - 数组运算与常用函数"></a>Numpy简单教程 - 数组运算与常用函数</h3><h4 id="数组运算"><a href="#数组运算" class="headerlink" title="数组运算"></a>数组运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">            [<span class="number">3</span>, <span class="number">4</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = np.array([[<span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">            [<span class="number">6</span>, <span class="number">5</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a+b  <span class="comment"># 对应位置的元素相加</span></span><br></pre></td></tr></table></figure><pre><code>array([[6, 8],       [9, 9]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.add(a,b)  <span class="comment"># 和a+b相同</span></span><br></pre></td></tr></table></figure><pre><code>array([[6, 8],       [9, 9]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a-b  <span class="comment"># 对应位置元素相减</span></span><br></pre></td></tr></table></figure><pre><code>array([[-4, -4],       [-3, -1]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.subtract(a, b)  <span class="comment"># 和a-b相同</span></span><br></pre></td></tr></table></figure><pre><code>array([[-4, -4],       [-3, -1]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a*b  <span class="comment"># 对应位置的元素相乘，并不是矩阵的乘法</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 5, 12],       [18, 20]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.multiply(a, b)  <span class="comment"># 和a*b相同</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 5, 12],       [18, 20]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a/b  <span class="comment"># 对应位置的元素相除</span></span><br></pre></td></tr></table></figure><pre><code>array([[0.2       , 0.33333333],       [0.5       , 0.8       ]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.divide(a, b)   <span class="comment"># 和a/b相同</span></span><br></pre></td></tr></table></figure><pre><code>array([[0.2       , 0.33333333],       [0.5       , 0.8       ]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sqrt(a)  <span class="comment"># a的每个元素开方</span></span><br></pre></td></tr></table></figure><pre><code>array([[1.        , 1.41421356],       [1.73205081, 2.        ]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2],       [3, 4]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">             [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.dot(b)  <span class="comment"># 矩阵乘法，a的列数要等于b的行数</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 9, 12, 15],       [19, 26, 33]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dot(a, b)  <span class="comment"># 矩阵乘法</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 9, 12, 15],       [19, 26, 33]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.dot(b, a)  <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure><pre><code>---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-97-f65bf4b3a481&gt; in &lt;module&gt;()----&gt; 1 np.dot(b, a)  # 报错ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)</code></pre><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p><strong>sum</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2],       [3, 4]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(a)  <span class="comment"># 对数组的所有元素求和</span></span><br></pre></td></tr></table></figure><pre><code>10</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(a, axis=<span class="number">0</span>)  <span class="comment"># 对数组的每一列元素求和</span></span><br></pre></td></tr></table></figure><pre><code>array([4, 6])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.sum(a, axis=<span class="number">1</span>)  <span class="comment"># 对数组的每一行元素求和</span></span><br></pre></td></tr></table></figure><pre><code>array([3, 7])</code></pre><p><strong>mean</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(a)  <span class="comment"># 求a中元素的平均值</span></span><br></pre></td></tr></table></figure><pre><code>2.5</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(a, axis=<span class="number">0</span>)  <span class="comment"># 求a中每一列元素的平均值， axis=0是对列进行操作</span></span><br></pre></td></tr></table></figure><pre><code>array([2., 3.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(a, axis=<span class="number">1</span>)  <span class="comment"># 求a中每一行元素的平均值， axis=1是对行进行操作</span></span><br></pre></td></tr></table></figure><pre><code>array([1.5, 3.5])</code></pre><p><strong>uniform</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.uniform(<span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># 产生指定范围内的随机小数</span></span><br></pre></td></tr></table></figure><pre><code>3.079329791701754</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.uniform(<span class="number">1</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><pre><code>34.39661009456285</code></pre><p><strong>tile</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[1, 2],       [3, 4]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.tile(a, (<span class="number">1</span>, <span class="number">2</span>))  <span class="comment"># 将a当成一个元素生成一行两列的数组</span></span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 1, 2],       [3, 4, 3, 4]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.tile(a, (<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 两行三列的a数组</span></span><br></pre></td></tr></table></figure><pre><code>array([[1, 2, 1, 2, 1, 2],       [3, 4, 3, 4, 3, 4],       [1, 2, 1, 2, 1, 2],       [3, 4, 3, 4, 3, 4]])</code></pre><p><strong>argsort</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">11</span>],</span><br><span class="line">             [<span class="number">5</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.argsort()  <span class="comment"># 对每一行元素从小到大排序，返回的是每个元素排序后的下标</span></span><br></pre></td></tr></table></figure><pre><code>array([[0, 2, 1, 3],       [2, 3, 0, 1]], dtype=int32)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.argsort(axis=<span class="number">0</span>)  <span class="comment"># 对每一列元素从小到大排序</span></span><br></pre></td></tr></table></figure><pre><code>array([[0, 0, 1, 1],       [1, 1, 0, 0]], dtype=int32)</code></pre><p><strong>矩阵转置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[ 3,  6,  4, 11],       [ 5, 10,  1,  3]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.T  <span class="comment"># 转置</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 3,  5],       [ 6, 10],       [ 4,  1],       [11,  3]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.transpose(a)  <span class="comment"># 和a.T相同</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 3,  5],       [ 6, 10],       [ 4,  1],       [11,  3]])</code></pre><h3 id="Numpy简单教程-广播"><a href="#Numpy简单教程-广播" class="headerlink" title="Numpy简单教程 - 广播"></a>Numpy简单教程 - 广播</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">             [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">             [<span class="number">12</span>, <span class="number">31</span>, <span class="number">22</span>],</span><br><span class="line">             [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):  <span class="comment"># 数据量比较大的时候，循环会比较低效，比较慢</span></span><br><span class="line">    a[i,:] += b</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure><pre><code>array([[ 2,  4,  6],       [ 3,  5,  7],       [13, 33, 25],       [ 3,  4,  5]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a + np.tile(b, (<span class="number">4</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[ 3,  6,  9],       [ 4,  7, 10],       [14, 35, 28],       [ 4,  6,  8]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a + b  <span class="comment"># 广播，自动将相加的数组转化为相同维度</span></span><br></pre></td></tr></table></figure><pre><code>array([[ 3,  6,  9],       [ 4,  7, 10],       [14, 35, 28],       [ 4,  6,  8]])</code></pre><p>上面的内容都是从jupyter notebook导出的，<a href="/numpy.html">点击这里</a>可以看得比较清晰。</p>]]></content>
    
    <summary type="html">
    
      Python库Numpy使用入门
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="Numpy" scheme="http://jeffyang.top/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>Python操作MySql数据库</title>
    <link href="http://jeffyang.top/Python/Python%E6%93%8D%E4%BD%9CMySql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://jeffyang.top/Python/Python操作MySql数据库/</id>
    <published>2018-02-18T07:10:00.000Z</published>
    <updated>2018-02-18T13:00:14.220Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是慕课网课程<a href="https://www.imooc.com/learn/475" target="_blank" rel="noopener">Python操作MySql数据库</a>的笔记</p><h3 id="Python-DB-API"><a href="#Python-DB-API" class="headerlink" title="Python DB API"></a>Python DB API</h3><p>Python DB API：<a href="https://www.python.org/dev/peps/pep-0249/" target="_blank" rel="noopener">Python访问数据库的统一接口规范</a></p><p>包括的内容：</p><ul><li>数据库连接对象connection</li><li>数据库交互对象cursor</li><li>数据库异常类exceptions</li></ul><p>使用Python DB API访问数据库流程：</p><p><strong>开始</strong> –&gt; <strong>创建connection</strong> –&gt; <strong>获取cursor</strong> –&gt; <strong>执行查询、执行命令、获取数据、处理数据</strong> –&gt; <strong>关闭cursor</strong> –&gt; <strong>关闭connection</strong> –&gt; <strong>结束</strong></p><h3 id="Python-MySQL开发环境"><a href="#Python-MySQL开发环境" class="headerlink" title="Python MySQL开发环境"></a>Python MySQL开发环境</h3><ul><li>教程里是Python2.7，而我的是<strong>Python3.6</strong></li><li>MySQL，我的是5.7</li><li>教程里开发工具是Eclipse+Pydev，我用的是Pycharm</li><li><code>PyMySQL</code><strong>（Python2.x里是<code>MySQLdb</code>）</strong>可以通过<code>pip</code>安装：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyMySQL</span><br></pre></td></tr></table></figure></li></ul><p>因为Python统一了数据库连接的接口，所以<code>pymysql</code>和<code>MySQLdb</code>的使用方式是类似的</p><h3 id="数据库连接对象connection"><a href="#数据库连接对象connection" class="headerlink" title="数据库连接对象connection"></a>数据库连接对象connection</h3><p>连接对象connection：建立Python客户端与数据库的网络连接</p><p>创建方法：<code>pymysql.Connect(参数)</code></p><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:center">类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">host</td><td style="text-align:center">字符串</td><td style="text-align:center">MySQL服务器地址</td></tr><tr><td style="text-align:center">post</td><td style="text-align:center">数字</td><td style="text-align:center">MySQL服务器端口号</td></tr><tr><td style="text-align:center">user</td><td style="text-align:center">字符串</td><td style="text-align:center">用户名</td></tr><tr><td style="text-align:center">passwd</td><td style="text-align:center">字符串</td><td style="text-align:center">密码</td></tr><tr><td style="text-align:center">db</td><td style="text-align:center">字符串</td><td style="text-align:center">数据库名称</td></tr><tr><td style="text-align:center">charset</td><td style="text-align:center">字符串</td><td style="text-align:center">连接编码</td></tr></tbody></table><p>connection对象支持的方法：</p><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">cursor()</td><td style="text-align:center">使用该连接创建并返回游标</td></tr><tr><td style="text-align:center">commit()</td><td style="text-align:center">提交当前事务</td></tr><tr><td style="text-align:center">rollback()</td><td style="text-align:center">回滚当前事务</td></tr><tr><td style="text-align:center">close()</td><td style="text-align:center">关闭连接</td></tr></tbody></table><h3 id="数据库的游标对象cursor"><a href="#数据库的游标对象cursor" class="headerlink" title="数据库的游标对象cursor"></a>数据库的游标对象cursor</h3><p>游标对象cursor：用于执行查询和获取结果</p><p>cursor对象支持的方法：</p><table><thead><tr><th style="text-align:center">方法名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">execute(op[,args])</td><td style="text-align:center">执行一个数据库查询和命令(CRUD)</td></tr><tr><td style="text-align:center">fetchone()</td><td style="text-align:center">取得结果集的下一行</td></tr><tr><td style="text-align:center">fetchmany(size)</td><td style="text-align:center">获取结果集的下几行</td></tr><tr><td style="text-align:center">fetchall()</td><td style="text-align:center">获取结果集中剩下的所有行（没有被遍历的所有行）</td></tr><tr><td style="text-align:center">rowcount</td><td style="text-align:center">最近一次execute返回数据的行数或影响行数<strong>（不是方法）</strong></td></tr><tr><td style="text-align:center">close()</td><td style="text-align:center">关闭游标对象</td></tr></tbody></table><ul><li>execute方法：执行SQL、将结果从数据库获取到客户端</li><li>fetch*方法：移动rownumber（它相当于一个指针），返回数据</li></ul><h3 id="select查询数据"><a href="#select查询数据" class="headerlink" title="select查询数据"></a>select查询数据</h3><p>过程：</p><p><strong>开始</strong> –&gt; <strong>创建connection</strong> –&gt; <strong>获取cursor</strong> –&gt; <strong>使用<code>cursor.execute()</code>执行<code>SELECT</code>语句</strong> –&gt; <strong>使用<code>cursor.fetch*()</code>获取并处理数据</strong> –&gt; <strong>关闭cursor</strong> –&gt; <strong>关闭connection</strong> –&gt; <strong>结束</strong></p><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">conn = pymysql.Connect(</span><br><span class="line">    host=&apos;localhost&apos;,</span><br><span class="line">    port=3306,</span><br><span class="line">    user=&apos;root&apos;,</span><br><span class="line">    passwd=&apos;123456&apos;,</span><br><span class="line">    db=&apos;pymysql&apos;,</span><br><span class="line">    charset=&apos;utf8&apos;  # 注意不是utf-8!</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">sql = &quot;SELECT * FROM user&quot;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line">rs = cursor.fetchall()</span><br><span class="line">for row in rs:</span><br><span class="line">    print(&quot;userid = %s, username = %s&quot; % row)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure></p><h3 id="Insert-Update-Delete数据"><a href="#Insert-Update-Delete数据" class="headerlink" title="Insert/Update/Delete数据"></a>Insert/Update/Delete数据</h3><p>过程：</p><p><strong>开始</strong> –&gt; <strong>创建connection</strong> –&gt; <strong>获取cursor</strong> –&gt; <strong>使用<code>cursor.execute()</code>执行<code>INSERT/UPDATE/DELETE</code>语句</strong> –&gt; <strong>出现异常？（否：使用<code>conn.commit()</code>提交事务/是：使用<code>conn.rollback()</code>回滚事务）</strong> –&gt; <strong>关闭cursor</strong> –&gt; <strong>关闭connection</strong> –&gt; <strong>结束</strong></p><p>这里就要使用<code>try...except...</code>语句判断是否出现异常</p><p>事务：访问和更新数据库的一个程序执行单元</p><ul><li>原子性：事务中包括的诸操作要么都做，要么都不做</li><li>一致性：事务必须使数据库从一致性状态变到另一个一致性状态</li><li>隔离性：一个事务的执行不能被其他事务干扰</li><li>持久性：食物一旦提交，它对数据库的改变就是永久性的</li></ul><p><strong>注意：MySQL引擎不能设置为<code>MyISAM</code>，因为它不支持事务</strong></p><p>开发中怎样使用事务？</p><ul><li>关闭自动commit：设置<code>conn.autocommit(FALSE)</code></li><li>正常结束事务：<code>conn.commit()</code></li><li>异常结束事务：<code>conn.rollback()</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sql_insert = &quot;INSERT INTO user (userid, username) VALUES (10, &apos;name10&apos;)&quot;</span><br><span class="line">sql_update = &quot;UPDATE user SET username=&apos;name99&apos; WHERE userid=9&quot;</span><br><span class="line">sql_delete = &quot;DELETE FROM user WHERE userid&lt;3&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql_insert)</span><br><span class="line">    print(cursor.rowcount)</span><br><span class="line">    cursor.execute(sql_update)</span><br><span class="line">    print(cursor.rowcount)</span><br><span class="line">    cursor.execute(sql_delete)</span><br><span class="line">    print(cursor.rowcount)</span><br><span class="line"></span><br><span class="line">    conn.commit()  # 上面三条语句就是一个事务，成功执行就可以commit</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(e)</span><br><span class="line">    conn.rollback()  # 出现异常就rollback回滚</span><br></pre></td></tr></table></figure><h3 id="银行转账实例（账户A给账户B转账100元）"><a href="#银行转账实例（账户A给账户B转账100元）" class="headerlink" title="银行转账实例（账户A给账户B转账100元）"></a>银行转账实例（账户A给账户B转账100元）</h3><p>过程：</p><p><strong>开始事务</strong> –&gt; <strong>检查账户A和账户B是否可用</strong> –&gt; <strong>检查账户A是否有100元</strong> –&gt; <strong>账户A减去100元，账户B加上100元</strong> –&gt; <strong>出现异常则回滚事务，否则提交事务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TransferMoney():</span><br><span class="line">    def __init__(self, conn):</span><br><span class="line">        self.conn = conn</span><br><span class="line"></span><br><span class="line">    def transfer(self, source_acctid, target_acctid, money):</span><br><span class="line">        try:</span><br><span class="line">            self.check_acct_available(source_acctid)</span><br><span class="line">            self.check_acct_available(target_acctid)</span><br><span class="line">            self.has_enough_money(source_acctid, money)</span><br><span class="line">            self.reduce_money(source_acctid, money)</span><br><span class="line">            self.add_money(target_acctid, money)</span><br><span class="line">            self.conn.commit()</span><br><span class="line">        except Exception as e:</span><br><span class="line">            self.conn.rollback()</span><br><span class="line">            raise e</span><br><span class="line"></span><br><span class="line">    def check_acct_available(self, acctid):</span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        try:</span><br><span class="line">            sql = &quot;SELECT * FROM account WHERE acctid=%s&quot; % acctid</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            print(&quot;check_acct_available: &quot; + sql)</span><br><span class="line">            rs = cursor.fetchall()</span><br><span class="line">            if len(rs) != 1:</span><br><span class="line">                raise Exception(&quot;账号%s不存在&quot; % acctid)</span><br><span class="line">        finally:</span><br><span class="line">            cursor.close()</span><br><span class="line"></span><br><span class="line">    def has_enough_money(self, acctid, money):</span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        try:</span><br><span class="line">            sql = &quot;SELECT * FROM account WHERE acctid=%s AND money&gt;%s&quot; % (acctid, money)</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            print(&quot;has_enough_money: &quot; + sql)</span><br><span class="line">            rs = cursor.fetchall()</span><br><span class="line">            if len(rs) != 1:</span><br><span class="line">                raise Exception(&quot;账号%s没有足够的金额&quot; % acctid)</span><br><span class="line">        finally:</span><br><span class="line">            cursor.close()</span><br><span class="line"></span><br><span class="line">    def reduce_money(self, acctid, money):</span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        try:</span><br><span class="line">            sql = &quot;UPDATE account SET money=money-%s WHERE acctid=%s&quot; % (money, acctid)</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            print(&quot;reduce_money: &quot; + sql)</span><br><span class="line">            rs = cursor.fetchall()</span><br><span class="line">            if cursor.rowcount != 1:  # SQL语句影响的行数不是1</span><br><span class="line">                raise Exception(&quot;账号%s减款失败&quot; % acctid)</span><br><span class="line">        finally:</span><br><span class="line">            cursor.close()</span><br><span class="line"></span><br><span class="line">    def add_money(self, acctid, money):</span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        try:</span><br><span class="line">            sql = &quot;UPDATE account SET money=money+%s WHERE acctid=%s&quot; % (money, acctid)</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            print(&quot;add_money: &quot; + sql)</span><br><span class="line">            rs = cursor.fetchall()</span><br><span class="line">            if cursor.rowcount != 1:  # SQL语句影响的行数不是1</span><br><span class="line">                raise Exception(&quot;账号%s加款失败&quot; % acctid)</span><br><span class="line">        finally:</span><br><span class="line">            cursor.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    source_acctid = sys.argv[1]  # 这些参数在run configuration里找到parameters设置</span><br><span class="line">    target_acctid = sys.argv[2]</span><br><span class="line">    money = sys.argv[3]</span><br><span class="line"></span><br><span class="line">    conn = pymysql.Connect(</span><br><span class="line">        host=&apos;localhost&apos;,</span><br><span class="line">        port=3306,</span><br><span class="line">        user=&apos;root&apos;,</span><br><span class="line">        passwd=&apos;123456&apos;,</span><br><span class="line">        db=&apos;pymysql&apos;,</span><br><span class="line">        charset=&apos;utf8&apos;  # 注意不是utf-8!</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    tr_money = TransferMoney(conn)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        tr_money.transfer(source_acctid, target_acctid, money)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;出现异常：&quot; + str(e))</span><br><span class="line">    finally:</span><br><span class="line">        conn.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Python操作MySql数据库教程笔记
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="MySql" scheme="http://jeffyang.top/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>爬虫基本原理</title>
    <link href="http://jeffyang.top/Python/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <id>http://jeffyang.top/Python/爬虫/爬虫基本原理/</id>
    <published>2018-02-17T04:46:00.000Z</published>
    <updated>2018-02-25T08:49:12.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><p>爬虫就是一个请求网站并提取指定数据的程序，相当于代替手动操作浏览器访问网址并获取需要信息的过程。</p><h3 id="上网基本流程"><a href="#上网基本流程" class="headerlink" title="上网基本流程"></a>上网基本流程</h3><p>浏览器输入网址 –&gt; 回车（<strong>向目标URL发送一个HTTP请求</strong>） –&gt; 看到网页（<strong>服务器响应请求，把代码返回给浏览器解析成看到的页面</strong>）</p><ul><li>本质是<strong>网络通信</strong>，即通过网络进行数据传递</li><li>浏览器经过通信后获取到该页面的<strong>源代码文档（HTML等）</strong></li><li>浏览器<strong>解析文档</strong>后以适当的形式展现给用户</li></ul><h3 id="爬虫基本流程"><a href="#爬虫基本流程" class="headerlink" title="爬虫基本流程"></a>爬虫基本流程</h3><p>前面说爬虫相当于代替手动操作浏览器访问网址，所以，爬虫的过程也相当于一个上网的过程。</p><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><p>通过HTTP向目标站点发送一个Request请求，请求可以包含额外的headers等信息。</p><h4 id="获取响应内容"><a href="#获取响应内容" class="headerlink" title="获取响应内容"></a>获取响应内容</h4><p>服务器正常响应后，会得到一个Response，响应包括目标页面的内容，如HTML文档、Json字符串或二进制数据（如图片、视频）等</p><h4 id="处理内容"><a href="#处理内容" class="headerlink" title="处理内容"></a>处理内容</h4><p>可以通过正则表达式或其他网页解析库进行网页解析，然后提取出自己需要的内容进行保存，如保存到Excel、数据库等。</p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p>浏览器访问一个网址，就是向服务器发送Request的过程。</p><p>Request包含：</p><ul><li><strong>请求方法及URL</strong>：主要有<code>GET</code>和<code>POST</code></li><li><strong>请求头</strong>：包含许多有关的客户端环境和请求正文的有用信息，如<code>User-Agent</code>和<code>cookies</code></li><li><strong>请求体</strong>：请求携带的额外信息，如<code>POST</code>请求发送的表单数据</li></ul><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>服务器接收Request通过后台代码进行处理，生成相应Response返回给浏览器。</p><p>Response包含：</p><ul><li><strong>响应状态</strong>：状态码及相应的状态消息。<code>200</code>表示成功，其他的还有<code>404</code>、<code>500</code>等</li><li><strong>响应头</strong>：包含一些服务器信息，内容类型等许多内容。</li><li><strong>响应体</strong>：包含了请求的资源，如HTML文档、css和其他二进制数据等</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="访问百度"><a href="#访问百度" class="headerlink" title="访问百度"></a>访问百度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import requests</span><br><span class="line"></span><br><span class="line">In [2]: headers = &#123;&apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrom</span><br><span class="line">   ...: e/63.0.3239.132 Safari/537.36&apos;&#125;</span><br><span class="line"></span><br><span class="line">In [3]: response = requests.get(&apos;http://baidu.com&apos;, headers = headers)</span><br><span class="line"></span><br><span class="line">In [4]: print(response.status_code)</span><br><span class="line">200</span><br><span class="line"></span><br><span class="line">In [5]: print(response.headers)</span><br><span class="line">&#123;&apos;Bdpagetype&apos;: &apos;1&apos;, &apos;Bdqid&apos;: &apos;0xa246c16500007bf8&apos;, &apos;Bduserid&apos;: &apos;0&apos;, &apos;Cache-Control&apos;: &apos;private&apos;, &apos;Connection&apos;: &apos;Keep-Alive&apos;, &apos;Content-Encoding&apos;: &apos;gzip&apos;, &apos;Content-Type&apos;: &apos;text/html; charset=utf-8&apos;, &apos;Cxy_all&apos;: &apos;baidu+f8cc963045aca76a5e616434e2aa01cb&apos;, &apos;Date&apos;: &apos;Sun, 25 Feb 2018 08:11:54 GMT&apos;, &apos;Expires&apos;: &apos;Sun, 25 Feb 2018 08:11:47 GMT&apos;, &apos;P3p&apos;: &apos;CP=&quot; OTI DSP COR IVA OUR IND COM &quot;&apos;, &apos;Server&apos;: &apos;BWS/1.1&apos;, &apos;Set-Cookie&apos;: &apos;BAIDUID=3F56499DC023D4234F4419B30E63B960:FG=1; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com, BIDUPSID=3F56499DC023D4234F4419B30E63B960; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com, PSTM=1519546314; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com, BDSVRTM=0; path=/, BD_HOME=0; path=/, H_PS_PSSID=25640_1441_21114_17001_22158; path=/; domain=.baidu.com&apos;, &apos;Strict-Transport-Security&apos;: &apos;max-age=172800&apos;, &apos;Vary&apos;: &apos;Accept-Encoding&apos;, &apos;X-Powered-By&apos;: &apos;HPHP&apos;, &apos;X-Ua-Compatible&apos;: &apos;IE=Edge,chrome=1&apos;, &apos;Transfer-Encoding&apos;: &apos;chunked&apos;&#125;</span><br><span class="line"></span><br><span class="line">In [6]: print(response.text)</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;!--STATUS OK--&gt;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>requests.get()</code>就是发送Request请求并把获取到服务器返回的Response赋值给<code>response</code>，接下来就可以对得到的请求进行操作了：</p><ul><li><code>response.status_code</code>打印出状态码。</li><li><code>response.headers</code>打印出响应头。</li><li><code>response.text</code>打印出源码。</li></ul><h4 id="获取其他类型数据"><a href="#获取其他类型数据" class="headerlink" title="获取其他类型数据"></a>获取其他类型数据</h4><p>除了文本数据，还可以获取到图片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [7]: response = requests.get(&apos;https://www.bing.com/az/hprichbg/rb/WoolBaySeadragon_ZH-CN13348117046_1920x1080.jpg&apos;)</span><br><span class="line"></span><br><span class="line">In [8]: print(response.content)</span><br><span class="line">b&apos;\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x01\x00\x00\x00\x00\x00\x00\xff\xdb\x00C\x00\x06\x04\x04\x04\x04\x04\x06\x04\x04\x06\x08\x05\x05\x05\x08\n\x07\x06\x06\x07\n\x0b\t\t\n\t\t\x0b\x0e\x0b\x0c\x0c\x0c\x0c\x0b\x0e\x0c\r\r\x0e\r\r\x0c\x11\x11\x12\x12\x11\x11\x19\x18\x18\x18\x19\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\xff\xdb\x00C\x01\x06\x06\x06\x0b\n\x0b\x15\x0e\x0e\x15\x17\x13\x10\x13\x17\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">In [9]: with open(&apos;E:/Notes/img.jpg&apos;, &apos;wb&apos;) as f:</span><br><span class="line">   ...:     f.write(response.content)</span><br><span class="line">   ...:</span><br><span class="line"></span><br><span class="line">In [10]:</span><br></pre></td></tr></table></figure></p><p>可以看到<code>response.content</code>就是图片的<strong>二进制流数据</strong>，可以通过操作文件的方法保存图片。</p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><p>有时候，我们通过上面的方法获取的内容和我们在浏览器看到的内容是不一样的，这是因为我们看到的内容是js渲染过以后的内容，是通过Ajax获取后台数据在前端显示的。</p><p>这时候常用的方法就是：</p><ul><li><strong>分析Ajax请求</strong>。可以借助浏览器开发者工具或者Fiddler等抓包工具。</li><li>使用<strong>selenium</strong>：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [7]: import selenium</span><br><span class="line"></span><br><span class="line">In [8]: from selenium import webdriver</span><br><span class="line"></span><br><span class="line">In [10]: driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">DevTools listening on ws://127.0.0.1:12591/devtools/browser/518f43b6-3307-43df-83da-547e126a7d65</span><br><span class="line"></span><br><span class="line">In [11]: driver.get(&quot;http://www.baidu.com&quot;)</span><br><span class="line"></span><br><span class="line">In [12]: driver.page_source</span><br><span class="line">Out[12]: &apos;&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;\n    \n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot; /&gt;\n    &lt;meta http-equiv=&quot;X...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><p>这时候的源码就是渲染之后的了。</p>]]></content>
    
    <summary type="html">
    
      关于爬虫基本原理的简单介绍
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="http://jeffyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫常用工具</title>
    <link href="http://jeffyang.top/Python/%E7%88%AC%E8%99%AB/Python%E7%88%AC%E8%99%AB%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>http://jeffyang.top/Python/爬虫/Python爬虫常用工具/</id>
    <published>2018-02-15T04:36:00.000Z</published>
    <updated>2018-02-26T08:41:43.726Z</updated>
    
    <content type="html"><![CDATA[<p>下面是Python爬虫常用库和常用工具的简单介绍。</p><h4 id="re"><a href="#re" class="headerlink" title="re"></a>re</h4><p>Python自带，正则表达式模块，<code>import</code>不出错则可以正常使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import re</span><br><span class="line"></span><br><span class="line">In [2]:</span><br></pre></td></tr></table></figure></p><h4 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h4><p>Python自带，提供一系列用于操作URL的功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [2]: import urllib</span><br><span class="line"></span><br><span class="line">In [3]: import urllib.request</span><br><span class="line"></span><br><span class="line">In [4]: urllib.request.urlopen(&quot;http://www.baidu.com&quot;)</span><br><span class="line">Out[4]: &lt;http.client.HTTPResponse at 0x6e8abd0&gt;</span><br></pre></td></tr></table></figure></p><h4 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h4><p>用于请求的库。<br>安装：<code>pip install requests</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [5]: import requests</span><br><span class="line"></span><br><span class="line">In [6]: requests.get(&quot;http://www.baidu.com&quot;)</span><br><span class="line">Out[6]: &lt;Response [200]&gt;</span><br></pre></td></tr></table></figure></p><p>另外，使用 <code>pip show xxx</code>可以查看模块信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;pip show requests</span><br><span class="line">Name: requests</span><br><span class="line">Version: 2.18.4</span><br><span class="line">Summary: Python HTTP for Humans.</span><br><span class="line">Home-page: http://python-requests.org</span><br><span class="line">Author: Kenneth Reitz</span><br><span class="line">Author-email: me@kennethreitz.org</span><br><span class="line">License: Apache 2.0</span><br><span class="line">Location: d:\program files\python3.6.1\lib\site-packages</span><br><span class="line">Requires: chardet, certifi, idna, urllib3</span><br></pre></td></tr></table></figure></p><h4 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h4><p>驱动浏览器的库，多用于自动化测试。爬虫时遇到js渲染的话用requests就无法获取请求内容，这时就可以使用这个库。（新一点的版本似乎说不再支持下面要说的phantomjs了，所以这里可以指定版本，我的是3.3.1）<br>安装：<code>pip install selenium==3.3.1</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [7]: import selenium</span><br><span class="line"></span><br><span class="line">In [8]: from selenium import webdriver</span><br></pre></td></tr></table></figure></p><p>但是使用Chrome时，会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [9]: driver = webdriver.Chrome()</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">FileNotFoundError                         Traceback (most recent call last)</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">WebDriverException: Message: &apos;chromedriver&apos; executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home</span><br></pre></td></tr></table></figure></p><p>这里需要下载一个<code>chromedriver.exe</code>，官网需要科学上网，可以<a href="https://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">点击这里</a>下载。注意要下载支持你Chrome版本的driver。</p><p>下载之后把解压完的<code>chromedriver.exe</code>放到<strong>配置了环境变量</strong>的目录下，比如<code>Scripts</code>。</p><p>之后就可以使用了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [10]: driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">DevTools listening on ws://127.0.0.1:12591/devtools/browser/518f43b6-3307-43df-83da-547e126a7d65</span><br></pre></td></tr></table></figure></p><p>也可以使用指定路径的写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Chrome(&quot;D:\Program Files\Python3.6.1\Scripts\chromedriver.exe&quot;)</span><br></pre></td></tr></table></figure></p><p>执行完会打开一个Chrome窗口。然后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [14]: driver.get(&quot;http://www.baidu.com&quot;)</span><br></pre></td></tr></table></figure></p><p>这个Chrome浏览器就会访问该网址。</p><p>使用<code>driver.page_source</code>就会显示源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [17]: driver.page_source</span><br><span class="line">Out[17]: &apos;&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;\n    \n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot; /&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot; /&gt;\n\t&lt;meta content=&quot;always&quot; name=&quot;referrer&quot; /&gt;\n    &lt;meta name=&quot;theme-color&quot; content=&quot;#2932e1&quot; /&gt;\n    &lt;link rel=&quot;shortcut icon&quot; href=&quot;/favicon.ico&quot;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h4 id="phantomjs"><a href="#phantomjs" class="headerlink" title="phantomjs"></a>phantomjs</h4><p>这是一个无界面浏览器，也就是不会弹出浏览器窗口。<a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">点击这里</a>可以下载。</p><p>下载完成后解压到你想要的目录，然后把<code>bin</code>的路径配置到环境变量<code>Path</code>里。</p><p>打开命令行运行<code>phantomjs</code>可以执行js代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\ASUS&gt;phantomjs</span><br><span class="line">phantomjs&gt; console.log(&quot;Hello,World!&quot;)</span><br><span class="line">Hello,World!</span><br><span class="line">undefined</span><br><span class="line">phantomjs&gt;</span><br></pre></td></tr></table></figure></p><p>然后我们就可以使用了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [1]: from selenium import webdriver</span><br><span class="line"></span><br><span class="line">In [2]: driver = webdriver.PhantomJS()</span><br><span class="line"></span><br><span class="line">In [3]: driver.get(&quot;http://www.baidu.com&quot;)</span><br><span class="line"></span><br><span class="line">In [4]: driver.page_source</span><br><span class="line">Out[4]: &apos;&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;&lt;head&gt;\n    \n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;\n\t&lt;meta content=&quot;always&quot; name=&quot;referrer&quot;&gt;\n    &lt;meta name=&quot;theme-color&quot; content=&quot;</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h4 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h4><p>提供xpath用于解析网页。<br>安装：<code>pip install lxml</code><br>使用pip安装时，可能会网络等因素出现一些问题。也可以<a href="https://pypi.python.org/pypi/lxml" target="_blank" rel="noopener">访问pypi</a>下载<code>.whl</code>文件再用pip命令安装。不过你要先<code>pip install wheel</code>安装wheel。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [5]: import lxml</span><br><span class="line"></span><br><span class="line">In [6]:</span><br></pre></td></tr></table></figure></p><h4 id="beautifulsoup"><a href="#beautifulsoup" class="headerlink" title="beautifulsoup"></a>beautifulsoup</h4><p>也是一个解析网页的库，它是依赖于lxml的，所以要<strong>先安装lxml库</strong>。<br>安装：<code>pip install beautifulsoup4</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [5]: import lxml</span><br><span class="line"></span><br><span class="line">In [6]: from bs4 import BeautifulSoup</span><br><span class="line"></span><br><span class="line">In [7]: soup = BeautifulSoup(&apos;&lt;html&gt;&lt;/html&gt;&apos;, &apos;lxml&apos;)</span><br></pre></td></tr></table></figure></p><p>然后就可以使用这个<code>soup</code>对象了。</p><h4 id="pyquery"><a href="#pyquery" class="headerlink" title="pyquery"></a>pyquery</h4><p>也是一个网页解析库，语法和jquery相同。<br>安装：<code>pip install pyquery</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [8]: from pyquery import PyQuery as pq</span><br><span class="line"></span><br><span class="line">In [9]: doc = pq(&apos;&lt;html&gt;Hello,World!&lt;/html&gt;&apos;)</span><br><span class="line"></span><br><span class="line">In [10]: result = doc(&apos;html&apos;).text()</span><br><span class="line"></span><br><span class="line">In [11]: result</span><br><span class="line">Out[11]: &apos;Hello,World!&apos;</span><br></pre></td></tr></table></figure></p><h4 id="pymysql"><a href="#pymysql" class="headerlink" title="pymysql"></a>pymysql</h4><p>用于操作MySQL数据库，Python2.x里是<code>MySQLdb</code>。<br>安装：<code>pip install pymysql</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [2]: import pymysql</span><br><span class="line"></span><br><span class="line">In [3]: conn = pymysql.Connect(host=&apos;localhost&apos;, user=&apos;root&apos;, password=&apos;123456&apos;, port=3306, db=&apos;pymysql&apos;)</span><br><span class="line"></span><br><span class="line">In [4]: cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">In [5]: cursor.execute(&apos;SELECT * FROM user&apos;)</span><br><span class="line">Out[5]: 8</span><br><span class="line"></span><br><span class="line">In [6]: cursor.fetchall()</span><br><span class="line">Out[6]:</span><br><span class="line">((3, &apos;name3&apos;),</span><br><span class="line"> (4, &apos;name4&apos;),</span><br><span class="line"> (5, &apos;name5&apos;),</span><br><span class="line"> (6, &apos;name6&apos;),</span><br><span class="line"> (7, &apos;name7&apos;),</span><br><span class="line"> (8, &apos;name8&apos;),</span><br><span class="line"> (9, &apos;name99&apos;),</span><br><span class="line"> (10, &apos;name10&apos;))</span><br></pre></td></tr></table></figure></p><h4 id="pymongo"><a href="#pymongo" class="headerlink" title="pymongo"></a>pymongo</h4><p>用于操作MongoDB数据库。<br>安装：<code>pip install pymongo</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [11]: import pymongo</span><br><span class="line"></span><br><span class="line">In [12]: client = pymongo.MongoClient(&apos;localhost&apos;)</span><br><span class="line"></span><br><span class="line">In [13]: db = client[&apos;test&apos;]</span><br><span class="line"></span><br><span class="line">In [14]: db[&apos;table&apos;].insert_one(&#123;&apos;name&apos;:&apos;Jeff&apos;&#125;)</span><br><span class="line">Out[14]: &lt;pymongo.results.InsertOneResult at 0x7309828&gt;</span><br><span class="line"></span><br><span class="line">In [15]: db[&apos;table&apos;].find_one(&#123;&apos;name&apos;:&apos;Jeff&apos;&#125;)</span><br><span class="line">Out[15]: &#123;&apos;_id&apos;: ObjectId(&apos;5a92595d3c7e6c30847793dc&apos;), &apos;name&apos;: &apos;Jeff&apos;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><p>也是存储<strong>key - value</strong>的非关系型数据库，主要用于分布式爬虫。<br>安装：<code>pip install redis</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [18]: import redis</span><br><span class="line"></span><br><span class="line">In [19]: r = redis.Redis(&apos;localhost&apos;, 6379)</span><br><span class="line"></span><br><span class="line">In [20]: r.set(&apos;name&apos;, &apos;Jeff&apos;)</span><br><span class="line">Out[20]: True</span><br><span class="line"></span><br><span class="line">In [21]: r.get(&apos;name&apos;)</span><br><span class="line">Out[21]: b&apos;Jeff&apos;</span><br></pre></td></tr></table></figure></p><h4 id="jupyter"><a href="#jupyter" class="headerlink" title="jupyter"></a>jupyter</h4><p>功能强大的notebook，可以记markdown，可以调试代码。<br>安装：<code>pip install jupyter</code></p><p>cmd命令行执行<code>jupyter notebook</code>就可以在浏览器使用。</p><hr><p>也可以使用pip同时安装多个库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests selenium lxml beautifulsoup4 pyquery pymysql pymongo redis jupyter</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      Python爬虫常用库和工具的简单介绍
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Python基础语法篇（1）</title>
    <link href="http://jeffyang.top/Python/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E7%AF%87%EF%BC%881%EF%BC%89/"/>
    <id>http://jeffyang.top/Python/Python基础语法篇（1）/</id>
    <published>2018-02-14T15:55:28.000Z</published>
    <updated>2018-02-16T14:24:06.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Python是吉多·范罗苏姆在1989年的圣诞节创立的。经过二十多年的完善，已经成为了一个优秀并广泛使用的语言。</p><p>Python可以应用于数据分析、组件集成、网络服务、图像处理、数值计算和科学计算等众多领域。</p><p>诸如Youtube、Dropbox、Quora、豆瓣、知乎、Google、Yahoo!、Facebook、百度、腾讯等公司都有使用Python。</p><h3 id="编译型-amp-解释型"><a href="#编译型-amp-解释型" class="headerlink" title="编译型&amp;解释型"></a>编译型&amp;解释型</h3><p>Python是<strong>解释型语言</strong>，程序不需要编译，在运行程序的时候才翻译成机器语言，每个语句都是执行的时候才翻译。这样解释性语言每执行一次就需要逐行翻译一次，效率比较低。</p><p>而<strong>编译型语言</strong>在程序执行之前，有一个单独的编译过程，将程序翻译成机器语言，以后执行这个程序的时候，就不用再进行翻译了。典型的有C、C++。</p><p><strong>编译型语言</strong>就相当于做好一桌子菜再开吃，而<strong>编译型语言</strong>就相当于吃火锅…</p><p>我们还能从Python项目里看到<code>__pycache__</code>文件夹和里面的<code>.pyc</code>文件。在文档里是这么说的：</p><blockquote><p>To speed up loading modules, Python caches the compiled version of each module in the <strong>pycache</strong> directory under the name module.version.pyc, where the version encodes the format of the compiled file; it generally contains the Python version number.</p></blockquote><p>也就是说<code>import</code>别的<code>.py</code>文件时，那个<code>.py</code>文件会被存一份<code>.pyc</code>提升下次加载的速度。<strong>注意并不是运行的速度。</strong> 例如：</p><p>新建文件<code>a.py</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Greet():</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">    </span><br><span class="line">    def greet(self):</span><br><span class="line">        print(&quot;Hello, &quot; + self.name + &quot;!&quot;)</span><br></pre></td></tr></table></figure></p><p>新建文件<code>b.py</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from a import Greet</span><br><span class="line"></span><br><span class="line">A = Greet(&quot;Jack&quot;)</span><br><span class="line">A.greet()</span><br></pre></td></tr></table></figure></p><p>这时候，命令行运行<code>&gt;python b.py</code>，当前目录下就会生成一个<code>__pycache__</code>目录，里面有文件<code>a.cpython-36.pyc</code></p><h3 id="静态语言-amp-动态语言"><a href="#静态语言-amp-动态语言" class="headerlink" title="静态语言&amp;动态语言"></a>静态语言&amp;动态语言</h3><p>Python是一门<strong>动态语言</strong>，动态类型语言是在运行期间才去做数据类型检查的语言，也就是说，在用动态类型的语言编程时，不用给变量指定数据类型。此外，Ruby、JavaScript也是动态语言。</p><p><strong>静态语言</strong>则是在编译期间做类型判断，如C、C++等。</p><h3 id="强类型定义语言-amp-弱类型定义语言"><a href="#强类型定义语言-amp-弱类型定义语言" class="headerlink" title="强类型定义语言&amp;弱类型定义语言"></a>强类型定义语言&amp;弱类型定义语言</h3><p><strong>强类型定义语言</strong>：强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。</p><p><strong>弱类型定义语言</strong>：数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。</p><p>Python是动态语言，也是强类型定义语言（类型安全的语言）；VBScript是动态语言，是弱类型定义语言（类型不安全的语言）；JAVA是静态语言，是强类型定义语言（类型安全的语言）。</p><h3 id="Python2-x-amp-Python3-x"><a href="#Python2-x-amp-Python3-x" class="headerlink" title="Python2.x&amp;Python3.x"></a>Python2.x&amp;Python3.x</h3><p>官方有一句话：</p><blockquote><p>In summary : Python 2.x is legacy, Python 3.x is the present and future of the language</p></blockquote><p>2和3详细的区别这里就不说了，最大的改动就是Python3.x里所有文本字符串默认为Unicode编码，意味着可以直接写中文，开头不需要<code># -*- coding:utf-8 -*-</code>了。</p><h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h3><p>Windows下在<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">官网</a>下载安装程序直接安装，安装时勾上<code>Add Python 3.6 to PATH</code>。</p><p>安装好后在命令行输入<code>python</code>输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&apos;hello, world&apos;)</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure></p><p>Linux下想类似于执行shell脚本一样执行python脚本，例：<code>./hello.py</code>要在第一行加上指定解释器，<code>env</code>指里寻找python环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br></pre></td></tr></table></figure></p><p>记得执行前需给予<code>hello.py</code>执行权限，<code>chmod 755 hello.py</code></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量名只能是 字母、数字或下划线的任意组合</li><li>变量名的第一个字符不能是数字</li><li>以下<strong>关键字</strong>不能声明为变量名：<br><code>[&#39;and&#39;, &#39;as&#39;, &#39;assert&#39;, &#39;break&#39;, &#39;class&#39;, &#39;continue&#39;, &#39;def&#39;, &#39;del&#39;, &#39;elif&#39;, &#39;else&#39;, &#39;except&#39;, &#39;exec&#39;, &#39;finally&#39;, &#39;for&#39;, &#39;from&#39;, &#39;global&#39;, &#39;if&#39;, &#39;import&#39;, &#39;in&#39;, &#39;is&#39;, &#39;lambda&#39;, &#39;not&#39;, &#39;or&#39;, &#39;pass&#39;, &#39;print&#39;, &#39;raise&#39;, &#39;return&#39;, &#39;try&#39;, &#39;while&#39;, &#39;with&#39;, &#39;yield&#39;]</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = &quot;Jack&quot;</span><br><span class="line">name2 = name  # name2不是指向name而是指向name的值&quot;Jack&quot;</span><br><span class="line">print(&quot;My name is &quot;, name)  # My name is  Jack</span><br><span class="line">print(name, name2)  # Jack Jack</span><br><span class="line"></span><br><span class="line">name = &quot;Tom&quot;  # 只有name变了，name2不会变</span><br><span class="line">print(name, name2)  # Tom Jack</span><br></pre></td></tr></table></figure><h3 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h3><p><strong>ASCII</strong>（American Standard Code for Information Interchange，美国标准信息交换代码）是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言，其最多只能用 8 位来表示（一个字节），即：<code>2**8 = 256-1</code>，所以，ASCII码最多只能表示 255 个符号。</p><p>为了处理中文，程序员设计了用于简体中文的<strong>GB2312</strong>和用于繁体中文的big5。GB2312(1980年)一共收录了7445个字符，包括6763个汉字和682个其它符号。汉字区的内码范围高字节从B0-F7，低字节从A1-FE，占用的码位是72*94=6768。其中有5个空位是D7FA-D7FE。</p><p>1995年的汉字扩展规范<strong>GBK1.0</strong>收录了21886个符号，它分为汉字区和图形符号区。汉字区包括21003个字符。2000年的 <strong>GB18030</strong>是取代GBK1.0的正式国家标准。该标准收录了27484个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。<strong>现在的PC平台必须支持GB18030</strong>，对嵌入式产品暂不作要求。所以手机、MP3一般只支持GB2312。</p><p>显然ASCII码无法将世界上的各种文字和符号全部表示，所以，就需要新出一种可以代表所有字符和符号的编码，即：<br><strong>Unicode</strong>（统一码、万国码、单一码）是一种在计算机上使用的字符编码。它为每种语言中的每个字符设定了统一并且唯一的二进制编码，规定虽有的字符和符号<strong>最少</strong>由 16 位来表示（2个字节），即：<code>2 **16 = 65536</code>。</p><p><strong>UTF-8</strong>，是对Unicode编码的压缩和优化，他不再使用最少使用2个字节，而是将所有的字符和符号进行分类：<strong>ascii码</strong>中的内容用<strong>1个字节</strong>保存、<strong>欧洲的字符</strong>用<strong>2个字节</strong>保存，<strong>东亚的字符</strong>用<strong>3个字节</strong>保存。</p><h3 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># name = raw_input(&quot;What is your name?&quot;) # python 2.x</span><br><span class="line">name = input(&quot;What is your name?&quot;)</span><br><span class="line">print(&quot;Hello &quot; + name )</span><br></pre></td></tr></table></figure><ul><li>python2中用raw_input()，它接收输入转换成string返回，输入数字也会当成string</li><li>python2中input()原理上是raw_input()调用eval()函数，输入字符串要用引号引起</li><li>python3中raw_input()和input()进行了整合,仅保留了input()函数，其接收任意输入并返回字符串类型。</li><li>eval()：把字符串当成有效的python表达式求值并计算结果</li><li>repr()：把变量和表达式转换成字符串表示</li></ul>]]></content>
    
    <summary type="html">
    
      Python教程基础语法篇（1）
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>自己写一个Chrome插件</title>
    <link href="http://jeffyang.top/Chrome/%E8%87%AA%E5%B7%B1%E5%86%99%E4%B8%80%E4%B8%AAChrome%E6%8F%92%E4%BB%B6/"/>
    <id>http://jeffyang.top/Chrome/自己写一个Chrome插件/</id>
    <published>2018-02-14T14:24:00.000Z</published>
    <updated>2018-02-14T14:59:08.409Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章也是之前在公众号上发布过的，现在整理一下发上来，如果这里分析的廖雪峰老师的网站结构有改变，代码可能也要重新分析编写。</p><p>另外，很多时候，使用<a href="https://tampermonkey.net/" target="_blank" rel="noopener">Tampermonkey</a>写用户脚本会更加方便，而且也可以使用别的许多大牛写的脚本，也推荐大家使用。我这篇文章只是写一下制作插件的过程。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前段时间在看廖雪峰老师网站的JavaScript教程时，发现有很多图片广告，看得我很是不舒服。于是决定写一个Chrome插件屏蔽一下。并不是说挂广告有什么不对，只是单纯地想折腾一下……</p><p>所以这里就记录下我是怎么做的。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先当然是F12看源码了，我们可以找到图片广告的div。<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%BD%91%E7%AB%99%E5%B7%A6%E4%BE%A7%E5%B9%BF%E5%91%8A.jpg" alt="左侧广告"><br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%BD%91%E7%AB%99%E4%B8%AD%E9%97%B4%E5%B9%BF%E5%91%8A.png" alt="中间广告"><br>可以看到两个div的<code>class</code>都有<code>uk-clearfix</code>,我们用<code>hide()</code>方法就可以这些图片隐藏了。</p><h3 id="编写js代码"><a href="#编写js代码" class="headerlink" title="编写js代码"></a>编写js代码</h3><p>以下代码就可以把图片去掉了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.uk-clearfix&apos;).hide();</span><br></pre></td></tr></table></figure></p><p>然后我就想了，既然要去广告，那就再去得干净一点吧，左侧还有一个关于作者的廖雪峰老师的微博……<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%BD%91%E7%AB%99%E4%BD%9C%E8%80%85%E6%A0%8F.jpg" alt="微博"></p><p>于是找到<code>class</code>为<code>x-sidebar-left-bottom</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.x-sidebar-left-bottom&apos;).hide();</span><br></pre></td></tr></table></figure></p><p>还有下面的分享部分，可以看到这些是分开的。<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%BD%91%E7%AB%99%E5%88%86%E4%BA%AB%E5%B9%BF%E5%91%8A.jpg" alt="分享"></p><p>这里我是通过找到他们的前一个元素来去定位的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.x-wiki-content&apos;).next().next().andSelf().next().andSelf().next().andSelf().hide();</span><br></pre></td></tr></table></figure></p><p>之后评论这一部分：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BB%96%E9%9B%AA%E5%B3%B0%E7%BD%91%E7%AB%99%E8%AF%84%E8%AE%BA.jpg" alt="评论"></p><p>本来我想直接去除，但是觉得有些评论还是挺有用的，所以就做成了可以通过点击评论让评论列表隐藏或显示，还让鼠标移到“评论”上就变成手指哈哈：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.x-anchor&apos;).next().mousemove(function()&#123;</span><br><span class="line">    $(this).css(&quot;cursor&quot;,&quot;pointer&quot;);</span><br><span class="line">&#125;).on(&apos;click&apos;, function () &#123;</span><br><span class="line">    $(&apos;#x-comment-list&apos;).toggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>还有一个提示登录评论的我就直接去掉了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#x-comment-list&apos;).next().next().andSelf().hide();</span><br></pre></td></tr></table></figure></p><h3 id="制作插件"><a href="#制作插件" class="headerlink" title="制作插件"></a>制作插件</h3><p>这里先准备以下文件：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%87%86%E5%A4%87%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6%E6%96%87%E4%BB%B6.png" alt="准备文件"></p><p>icon就是安装后显示的图标，一个jQuery的js文件，另一个js就是刚才自己编写的js脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function () &#123;</span><br><span class="line">    $(&apos;.uk-clearfix&apos;).hide();</span><br><span class="line">    $(&apos;.x-anchor&apos;).next().mousemove(function()&#123;</span><br><span class="line">        $(this).css(&quot;cursor&quot;,&quot;pointer&quot;);</span><br><span class="line">    &#125;).on(&apos;click&apos;, function () &#123;</span><br><span class="line">        $(&apos;#x-comment-list&apos;).toggle();</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&apos;.x-sidebar-left-bottom&apos;).hide();</span><br><span class="line">    $(&apos;.x-wiki-content&apos;).next().next().andSelf().next().andSelf().next().andSelf().hide();</span><br><span class="line">    $(&apos;#x-comment-list&apos;).next().next().andSelf().hide();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>manifest.json就相当于这个插件的配置文件了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;manifest_version&quot;: 2,</span><br><span class="line">  &quot;name&quot;: &quot;LiaoXueFeng&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;Don&apos;t tell others!&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0&quot;,</span><br><span class="line">  &quot;permissions&quot;: [</span><br><span class="line">    &quot;https://www.liaoxuefeng.com/*&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;browser_action&quot;: &#123;</span><br><span class="line">    &quot;default_icon&quot;: &quot;icon.png&quot;,</span><br><span class="line">    &quot;default_title&quot;: &quot;Remove somthing!&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;content_scripts&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;matches&quot;: [&quot;https://www.liaoxuefeng.com/*&quot;],</span><br><span class="line">      &quot;js&quot;: [&quot;jquery-1.10.2.min.js&quot;,&quot;Liaoxuefeng.js&quot;],</span><br><span class="line">      &quot;run_at&quot;: &quot;document_start&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来就是打开Chrome的扩展程序界面，点击打包扩展程序这里选了根目录就行，密钥文件是用来更新扩展程序用的：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%87%86%E5%A4%87%E7%82%B9%E5%87%BB%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6.png" alt="点击打包"><br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%87%86%E5%A4%87%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6.png" alt="打包"></p><p>之后生成了crx文件，就完成了！pem文件就是刚才说的密钥文件了。<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%AE%8C%E6%88%90%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6.png" alt="完成打包"></p><p>然后就可以安装使用了，以后打开这个网页就变得清爽多了：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%AE%8C%E6%88%90%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6%E6%95%88%E6%9E%9C.jpg" alt="效果"></p>]]></content>
    
    <summary type="html">
    
      自己动手写一个Chrome扩展程序
    
    </summary>
    
      <category term="Chrome" scheme="http://jeffyang.top/categories/Chrome/"/>
    
    
      <category term="Chrome" scheme="http://jeffyang.top/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Python获取Bing图片做壁纸</title>
    <link href="http://jeffyang.top/Python/python%E8%8E%B7%E5%8F%96Bing%E5%9B%BE%E7%89%87%E5%81%9A%E5%A3%81%E7%BA%B8/"/>
    <id>http://jeffyang.top/Python/python获取Bing图片做壁纸/</id>
    <published>2018-02-14T08:37:00.000Z</published>
    <updated>2018-02-20T15:47:59.667Z</updated>
    
    <content type="html"><![CDATA[<p>这篇东西是之前发在微信公众号上的文章，现在整理一下发出来。</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用过Bing搜索的都知道，它首页每天都会更新一张图片，<a href="https://cn.bing.com" target="_blank" rel="noopener">点击这里</a>可以访问。</p><p>先说说结果吧，写了一个有GUI界面的小工具，可以查看和保存壁纸，有兴趣的可以在公众号回复“bing”下载玩玩。也可以点击<a href="https://github.com/JianFengY/BingSpider" target="_blank" rel="noopener">我的GitHub</a>下载<code>Main.exe</code>试试。</p><p><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BF%85%E5%BA%94%E5%A3%81%E7%BA%B8%E5%B0%8F%E5%B7%A5%E5%85%B7.jpg" alt="必应壁纸小工具"></p><p>需要注意的一些问题：</p><ul><li>工具需要联网才能打开</li><li>暂时不支持更改保存的文件夹</li><li>设为壁纸之后注销或重启之后就无效了（用保存的图片手动设置壁纸的话就没问题。我在win10用的时候是这样，其他系统不知道，可能是用的pywin32这个库的问题。）</li></ul><p>好了，不想看分析和代码的看到这里就好了。</p><h3 id="准备工作（python-3-x环境）"><a href="#准备工作（python-3-x环境）" class="headerlink" title="准备工作（python 3.x环境）"></a>准备工作（python 3.x环境）</h3><ul><li>获取网页信息的requests，urllib库</li><li>设置壁纸的pywin32，PIL库</li><li>编写GUI的pyqt5库</li></ul><h3 id="分析网页"><a href="#分析网页" class="headerlink" title="分析网页"></a>分析网页</h3><p>和以前一样，第一步就是打开网页开发者工具，发现在代码里是找不到图片的网址的，这时候就要看networks了：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BF%85%E5%BA%94networks.jpg" alt="必应networks"><br>我们可以在XHR里发现下面这个请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=0&amp;n=1&amp;nc=1510118759864&amp;pid=hp</span><br></pre></td></tr></table></figure></p><p>请求的结果格式化之后是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;images&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;startdate&quot;: &quot;20171107&quot;, </span><br><span class="line">            &quot;fullstartdate&quot;: &quot;201711071600&quot;, </span><br><span class="line">            &quot;enddate&quot;: &quot;20171108&quot;, </span><br><span class="line">            &quot;url&quot;: &quot;/az/hprichbg/rb/PointArenaLH_ZH-CN12332642727_1920x1080.jpg&quot;, </span><br><span class="line">            &quot;urlbase&quot;: &quot;/az/hprichbg/rb/PointArenaLH_ZH-CN12332642727&quot;, </span><br><span class="line">            &quot;copyright&quot;: &quot;波因特阿里纳灯塔，美国加利福尼亚州 (© plainpicture/Westend61/Spotcatch)&quot;, </span><br><span class="line">            &quot;copyrightlink&quot;: &quot;/search?q=Point+Arena+Ligh&amp;form=hpcapt&amp;mkt=zh-cn&quot;, </span><br><span class="line">            &quot;quiz&quot;: &quot;/search?q=Bing+homepage+quiz&amp;filters=WQOskey:%22HPQuiz_20171107_PointArenaLH%22&amp;FORM=HPQUIZ&quot;, </span><br><span class="line">            &quot;wp&quot;: true, </span><br><span class="line">            &quot;hsh&quot;: &quot;ea5b137418244ac63db363f7276c95bb&quot;, </span><br><span class="line">            &quot;drk&quot;: 1, </span><br><span class="line">            &quot;top&quot;: 1, </span><br><span class="line">            &quot;bot&quot;: 1, </span><br><span class="line">            &quot;hs&quot;: [ ]</span><br><span class="line">        &#125;</span><br><span class="line">    ], </span><br><span class="line">    &quot;tooltips&quot;: &#123;</span><br><span class="line">        &quot;loading&quot;: &quot;正在加载...&quot;, </span><br><span class="line">        &quot;previous&quot;: &quot;上一个图像&quot;, </span><br><span class="line">        &quot;next&quot;: &quot;下一个图像&quot;, </span><br><span class="line">        &quot;walle&quot;: &quot;此图片不能下载用作壁纸。&quot;, </span><br><span class="line">        &quot;walls&quot;: &quot;下载今日美图。仅限用作桌面壁纸。&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>没错，“url”加上域名就是图片的地址了，“enddate”的值就是当天日期，可以作为保存的文件名。另外，请求的链接里有个“idx”参数，0是今天的图片，1是昨天的，以此类推。知道这个，接下来的事就很简单了。</p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>首先先写一个获取url的函数，因为要让程序可以获取到前些天的图片，参数的默认值为0，也就是今天的图片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_url(day=0):</span><br><span class="line">    url = &quot;https://www.bing.com/HPImageArchive.aspx?format=js&amp;idx=&quot; + str(day) + &quot;&amp;n=1&amp;nc=1509675905008&amp;pid=hp&amp;video=1&quot;</span><br><span class="line">    return url</span><br></pre></td></tr></table></figure></p><p>然后，写一个保存图片的函数，用“enddate”作为文件名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def get_img(url, path=&quot;D://wallpaper/&quot;):</span><br><span class="line">    isExists = os.path.exists(path)</span><br><span class="line">    if not isExists:</span><br><span class="line">        os.makedirs(path) </span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    content = html.json()</span><br><span class="line">    src = &quot;https://www.bing.com&quot; + content[&apos;images&apos;][0][&apos;url&apos;]</span><br><span class="line">    urlretrieve(src, path + content[&apos;images&apos;][0][&apos;enddate&apos;] + &apos;.jpg&apos;)</span><br></pre></td></tr></table></figure></p><p>设置壁纸的方法来自网上，原理是通过pywin32访问注册表修改壁纸，至于为什么注销或重启之后会无效我也不是太懂……<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def set_wallpaper_from_bmp(bmp_path):  </span><br><span class="line">    reg_key = win32api.RegOpenKeyEx(win32con.HKEY_CURRENT_USER, &quot;Control Panel\\Desktop&quot;, 0, win32con.KEY_SET_VALUE)    </span><br><span class="line">    win32api.RegSetValueEx(reg_key, &quot;WallpaperStyle&quot;, 0, win32con.REG_SZ, &quot;2&quot;)  </span><br><span class="line">    win32api.RegSetValueEx(reg_key, &quot;TileWallpaper&quot;, 0, win32con.REG_SZ, &quot;0&quot;)  </span><br><span class="line">    win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER, bmp_path, win32con.SPIF_SENDWININICHANGE)  </span><br><span class="line">def set_wallpaper(img_path):  </span><br><span class="line">    isExists = os.path.exists(img_path)</span><br><span class="line">    if isExists:</span><br><span class="line">        img_dir = os.path.dirname(img_path)  </span><br><span class="line">        bmpImage = Image.open(img_path)  </span><br><span class="line">        new_bmp_path = os.path.join(img_dir, &apos;wallpaper.bmp&apos;)  </span><br><span class="line">        bmpImage.save(new_bmp_path, &quot;BMP&quot;)  </span><br><span class="line">        set_wallpaper_from_bmp(new_bmp_path)  </span><br><span class="line">        return True</span><br><span class="line">    else:</span><br><span class="line">        return False</span><br></pre></td></tr></table></figure></p><p>最后是用pyqt5写GUI界面，我也是第一次使用，所以不是太好看，代码也有点乱，大家凑和看看吧哈哈……<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">class Bing(QMainWindow):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">    def initUI(self):</span><br><span class="line">        self.setGeometry(400, 200, 500, 325)</span><br><span class="line">        self.setFixedSize(self.width(), self.height());    </span><br><span class="line">        self.setWindowTitle(&apos;Bing Wallpaper&apos;)</span><br><span class="line">        self.setWindowIcon(QIcon(&apos;Bing.ico&apos;))</span><br><span class="line">        self.add_position_layout()</span><br><span class="line">    # 添加布局部件</span><br><span class="line">    def add_position_layout(self):</span><br><span class="line">        bg_label = QLabel(self)  </span><br><span class="line">        bg_label.resize(self.width(), self.height())</span><br><span class="line">        bg_label.setScaledContents(True)</span><br><span class="line">        def set_background_image(img):</span><br><span class="line">            photo = QtGui.QPixmap()</span><br><span class="line">            photo.loadFromData(img)</span><br><span class="line">            bg_label.setPixmap(photo)</span><br><span class="line">#         img = time.strftime(&quot;%Y%m%d&quot;) + &apos;.jpg&apos;</span><br><span class="line">        img, self.filename = sp.show_img(sp.get_url())</span><br><span class="line">        set_background_image(img)</span><br><span class="line">#         label_1 = QLabel(&quot;&lt;p style=&apos;font-size:25px;text-align:center;&apos;&gt;&lt;b&gt;Path:&lt;/b&gt;&lt;/p&gt;&quot;, self)</span><br><span class="line">        label_1 = QLabel(&quot;     保存目录: &quot;, self)</span><br><span class="line">        label_1.setStyleSheet(&quot;QLabel&#123;background:rgb(255,255,255,100)&#125;&quot;)</span><br><span class="line">        path_edit = QLineEdit()</span><br><span class="line">        path_edit.setText(&apos;D:/wallpaper&apos;)</span><br><span class="line">        path_edit.setToolTip(&apos;抱歉！暂时不支持更换路径！&apos;)</span><br><span class="line">        path_edit.setReadOnly(True)</span><br><span class="line">#         def btn_change():</span><br><span class="line">#             filename = QFileDialog.getExistingDirectory(self, directory=path_edit.text())</span><br><span class="line">#             path_edit.setText(filename)</span><br><span class="line">        self.day = 0</span><br><span class="line">        def btn_previous(day):</span><br><span class="line">            img,self.filename = sp.show_img(sp.get_url(self.day + 1))</span><br><span class="line">            set_background_image(img)</span><br><span class="line">            self.day += 1</span><br><span class="line">            print(self.day)</span><br><span class="line">        def btn_next(day):</span><br><span class="line">            if self.day &gt; 0:</span><br><span class="line">                img,self.filename = sp.show_img(sp.get_url(self.day - 1))</span><br><span class="line">                set_background_image(img)</span><br><span class="line">                self.day -= 1</span><br><span class="line">                print(self.day)</span><br><span class="line">            else:</span><br><span class="line">                QMessageBox.information(self, &quot; &quot;, &quot;明天的壁纸还未更新哦！&quot;) </span><br><span class="line">        def btn_save(day):</span><br><span class="line">            img = sp.get_img(sp.get_url(self.day))</span><br><span class="line">        def btn_set_wallpaper(day):</span><br><span class="line">            flag = sw.set_wallpaper(&apos;D:/wallpaper/&apos; + self.filename)</span><br><span class="line">            if not flag:</span><br><span class="line">                QMessageBox.information(self, &quot; &quot;, &quot;请先保存此壁纸!&quot;) </span><br><span class="line">#         button_1 = QPushButton(&quot;更改路径&quot;, self)</span><br><span class="line">#         button_1.clicked.connect(btn_change)</span><br><span class="line">        button_2 = QPushButton(&quot;前一张&quot;, self)</span><br><span class="line">        button_2.setToolTip(&apos;查看前一天的必应图片！&apos;)</span><br><span class="line">        button_2.clicked.connect(btn_previous)</span><br><span class="line">        button_3 = QPushButton(&quot;设为壁纸&quot;, self)</span><br><span class="line">        button_3.setToolTip(&apos;设置壁纸要先保存哦！&apos;)</span><br><span class="line">        button_3.clicked.connect(btn_set_wallpaper)</span><br><span class="line">        button_4 = QPushButton(&quot;保存&quot;, self)</span><br><span class="line">        button_4.setToolTip(&apos;保存在该目录下！&apos;)</span><br><span class="line">        button_4.clicked.connect(btn_save)</span><br><span class="line">        button_5 = QPushButton(&quot;后一张&quot;, self)</span><br><span class="line">        button_5.setToolTip(&apos;查看后一天的必应图片！&apos;)</span><br><span class="line">        button_5.clicked.connect(btn_next)</span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        grid.setSpacing(10)</span><br><span class="line">        grid.addWidget(label_1, 2, 0)</span><br><span class="line">        grid.addWidget(path_edit, 2, 1, 1, 2)</span><br><span class="line">#         grid.addWidget(button_1, 2, 3)</span><br><span class="line">        grid.addWidget(button_2, 3, 0)</span><br><span class="line">        grid.addWidget(button_3, 3, 1, 1, 2)</span><br><span class="line">        grid.addWidget(button_4, 2, 3)</span><br><span class="line">        grid.addWidget(button_5, 3, 3)</span><br><span class="line">        grid.setAlignment(Qt.AlignTop)</span><br><span class="line">        layout_widget = QWidget()</span><br><span class="line">        layout_widget.setLayout(grid)</span><br><span class="line">        self.setCentralWidget(layout_widget)</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    sp.get_img(sp.get_url())</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    bing = Bing()</span><br><span class="line">    bing.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>简单来说，程序会先通过网络获取图片显示，所以没有联网的话就用不了，要设置壁纸的话需要先点击保存会把图片保存下来，运行结果是这样的：</p><p><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%BF%85%E5%BA%94%E5%A3%81%E7%BA%B8%E7%A8%8B%E5%BA%8F%E6%95%88%E6%9E%9C%E5%9B%BE.jpg" alt="必应壁纸程序效果"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>另外，完成之后，我用pyinstaller打包成了exe文件，打包完之后我发现左上角的那个小图标没了，不过不影响使用……大家在公众号回复“bing”就有下载地址了，或者点击<a href="https://github.com/JianFengY/BingSpider" target="_blank" rel="noopener">我的GitHub</a>，有源码也有exe程序，注意一下前面说的几个问题就好。</p>]]></content>
    
    <summary type="html">
    
      Python写一个爬取必应图片做壁纸的带GUI界面的小工具
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler分析手机App请求Scrapy爬虫</title>
    <link href="http://jeffyang.top/Python/%E7%88%AC%E8%99%AB/Fiddler%E5%88%86%E6%9E%90%E6%89%8B%E6%9C%BAApp%E8%AF%B7%E6%B1%82Scrapy%E7%88%AC%E8%99%AB/"/>
    <id>http://jeffyang.top/Python/爬虫/Fiddler分析手机App请求Scrapy爬虫/</id>
    <published>2018-02-13T05:52:00.000Z</published>
    <updated>2018-02-14T08:39:50.710Z</updated>
    
    <content type="html"><![CDATA[<p>Fiddler是一款十分强大的调试代理工具，这个工具我就不详细介绍了。简单来说，它是通过创建代理，拦截http请求用于分析或修改。</p><p>这里就演示一下用Fiddler抓取手机端Bilibili的请求并使用Scrapy编写一个爬取图片的爬虫程序。</p><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ul><li>Python，我用的是3.6，系统是win10</li><li>Scrapy框架，安装过程我之前的文章提过</li><li>Fiddler，<a href="https://www.telerik.com/download/fiddler" target="_blank" rel="noopener">点击这里</a>下载安装</li><li>手机…我的是安卓</li><li>一个安卓软件，我这里就用Bilibili示范</li></ul><h3 id="Fiddler配置"><a href="#Fiddler配置" class="headerlink" title="Fiddler配置"></a>Fiddler配置</h3><p>安装我就不说了，说说配置，<code>Tools - Connections</code>这里可以看到默认端口号是很吉利的<code>8888</code>。这里要勾上<code>Allow remote computers to connect</code>。<br><img src="http://p3vld0dkf.bkt.clouddn.com/fiddler%E9%85%8D%E7%BD%AE.png" alt="fidder配置"><br>然后要让<strong>手机和电脑</strong>连接上<strong>同一个网络</strong>，并给手机设置<strong>代理IP</strong>，设置成电脑的IP地址，cmd执行命令<code>ipconfig</code>可以查看ip：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E6%9F%A5%E7%9C%8Bip.png" alt="查看IP"><br>手机连接上wifi后，选择<code>代理设置</code>，<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%861.png" alt="代理设置1"><br>把服务器设置成刚才看到的IP地址，端口号如果没改的话就是<code>8888</code>，然后保存。<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%862.png" alt="代理设置2"><br>下面是给手机安装证书，不安装<strong>可能</strong>会出现手机设置了代理无法上网的问题。</p><p>然后手机浏览器访问<code>ip地址:8888</code>，下载证书安装：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E7%82%B9%E5%87%BB%E4%B8%8B%E8%BD%BD%E8%AF%81%E4%B9%A6.png" alt="下载证书"><br>打开<code>设置 - 安全 - 设备管理与凭证 - 从存储盘安装</code>，差不多都是这个地方，找找应该能找到…<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%AE%89%E8%A3%85%E6%AD%A4%E8%AF%81%E4%B9%A6%E5%88%B0%E6%89%8B%E6%9C%BA.png" alt="安装此证书"><br>安装完后可以在<code>用户凭证</code>可以看到：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%AE%89%E8%A3%85%E5%AE%8C%E8%AF%81%E4%B9%A6.png" alt="安装完"></p><h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p>接下来就可以打开Fiddler还有手机端的Bilibili，进行分析了。我这里选择<code>相簿</code>，准备爬取里面的图片。<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E9%80%89%E6%8B%A9%E7%9B%B8%E7%B0%BF.png" alt="选择相簿"><br>下面的精选热推就是我们的目标：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0.png" alt="下拉刷新"><br>刷新手机的时候，可以看到Fiddler界面出现了请求的链接返回的是json数据：<br><img src="http://p3vld0dkf.bkt.clouddn.com/fiddler%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C.png" alt="fiddler查看结果"><br>复制链接到浏览器打开就可以看到图片地址了：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80.png" alt="图片地址"><br>点开这个地址，可以看到刚才手机端显示的那张图片：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E7%82%B9%E5%BC%80%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80.png" alt="图片"><br>接下来手机端往下拉，在Fiddler可以看到刷出了相似的请求，可以看到请求的参数里，<code>page_num</code>参数增加，这就是表示页码的参数：<br><img src="http://p3vld0dkf.bkt.clouddn.com/%E6%8E%A7%E5%88%B6%E9%A1%B5%E7%A0%81%E7%9A%84%E5%8F%82%E6%95%B0.png" alt="页码参数"></p><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>现在，图片的网址我们已经找出来了，接下来就可以编写代码下载图片了，这里我还是使用了Scrapy框架。</p><p>首先，还是新建项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject scrapy_bilibili</span><br></pre></td></tr></table></figure></p><p>然后编写<code>items.py</code>定义存储字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ScrapyBilibiliItem(scrapy.Item):</span><br><span class="line">    # define the fields for your item here like:</span><br><span class="line">    # name = scrapy.Field()</span><br><span class="line">    image_urls = scrapy.Field()</span><br><span class="line">    images = scrapy.Field()</span><br><span class="line">    image_paths = scrapy.Field()</span><br></pre></td></tr></table></figure></p><p>然后<code>settings.py</code>把<code>ITEM_PIPELINES</code>注释取消，还有增加<code>IMAGES_STORE</code>作为存储位置，还把<code>USER_AGENT</code>改成了Fiddler看到的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    &apos;scrapy_bilibili.pipelines.ScrapyBilibiliPipeline&apos;: 300,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IMAGES_STORE = &apos;E:/scrapy_bilibili/images&apos;</span><br><span class="line"></span><br><span class="line">USER_AGENT = &apos;Mozilla/5.0 BiliDroid/5.22.1 (bbcallen@gmail.com)&apos;</span><br></pre></td></tr></table></figure></p><p>接下来是<code>pipelines.py</code>，这段代码改自官方文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import scrapy</span><br><span class="line">from scrapy.pipelines.images import ImagesPipeline</span><br><span class="line">from scrapy.exceptions import DropItem</span><br><span class="line">from scrapy.utils.project import get_project_settings</span><br><span class="line"></span><br><span class="line">class ScrapyBilibiliPipeline(ImagesPipeline):</span><br><span class="line">    IMAGES_STORE = get_project_settings().get(&apos;IMAGES_STORE&apos;)</span><br><span class="line">    </span><br><span class="line">    def get_media_requests(self, item, info):</span><br><span class="line">        image_url = item[&apos;image_urls&apos;]</span><br><span class="line">        yield scrapy.Request(image_url)</span><br><span class="line">    </span><br><span class="line">    def item_completed(self, results, item, info):</span><br><span class="line">        image_paths = [x[&apos;path&apos;] for ok, x in results if ok]</span><br><span class="line">        if not image_paths:</span><br><span class="line">            raise DropItem(&quot;Item contains no images&quot;)</span><br><span class="line">        item[&apos;image_paths&apos;] = image_paths</span><br><span class="line">        return item</span><br></pre></td></tr></table></figure></p><p>最后在<code>spiders</code>文件夹里新建<code>bilibili_spider.py</code>放置爬虫的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import scrapy</span><br><span class="line">from scrapy_bilibili.items import ScrapyBilibiliItem</span><br><span class="line"></span><br><span class="line">class BilibiliSpider(scrapy.Spider):</span><br><span class="line">    name = &apos;bilibili_spider&apos;</span><br><span class="line">    allowed_domains = [&apos;api.vc.bilibili.com&apos;]</span><br><span class="line">    page_num = 0</span><br><span class="line">    start_urls = [&apos;http://api.vc.bilibili.com/link_draw/v2/Doc/...&amp;page_num=&apos; + str(page_num) + &apos;&amp;page_size=20...&apos;]  # 链接太长我就不放完整了</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        datas = json.loads(response.text)[&apos;data&apos;][&apos;items&apos;]</span><br><span class="line">        for data in datas:</span><br><span class="line">            item = ScrapyBilibiliItem()</span><br><span class="line">            for img in data[&apos;item&apos;][&apos;pictures&apos;]:</span><br><span class="line">                item[&apos;image_urls&apos;] = img[&apos;img_src&apos;]</span><br><span class="line">                yield item</span><br><span class="line">        if self.page_num &gt;= 10:</span><br><span class="line">            return</span><br><span class="line">        self.page_num += 1</span><br><span class="line">        yield scrapy.Request(&apos;http://api.vc.bilibili.com/link_draw/v2/Doc/...&amp;page_num=&apos; + str(self.page_num) + &apos;&amp;page_size=20...&apos;, callback = self.parse)  # 链接也是不完整的</span><br></pre></td></tr></table></figure></p><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p>在项目的目录下执行以下命令，<strong>注意</strong><code>bilibili_spider</code>是<code>bilibili_spider.py</code>里<code>class</code>的<code>name</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl bilibili_spider</span><br></pre></td></tr></table></figure></p><p>然后，等到运行完，就能看到结果了，图片是使用它们URL的 SHA1 hash 作为文件名的：<br><img src="http://p3vld0dkf.bkt.clouddn.com/bilibili%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%A4%B9.png" alt="结果"></p><p>对了，这里要注意一个问题，运行的时候如果有挂代理，比如一些科学^_^上网的工具什么的就先关掉吧，不然可能会出现以下问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection to the other side was lost in a non-clean fashion: Connection lost.</span><br></pre></td></tr></table></figure></p><hr><p>到这里，我们的程序就完成了。</p>]]></content>
    
    <summary type="html">
    
      使用Fiddler分析手机端Bilibili请求，编写爬取图片的Scrapy程序
    
    </summary>
    
      <category term="Python" scheme="http://jeffyang.top/categories/Python/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/categories/Python/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="Python" scheme="http://jeffyang.top/tags/Python/"/>
    
      <category term="Scrapy" scheme="http://jeffyang.top/tags/Scrapy/"/>
    
      <category term="爬虫" scheme="http://jeffyang.top/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Fiddler" scheme="http://jeffyang.top/tags/Fiddler/"/>
    
  </entry>
  
</feed>
