<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>麻瓜码农</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-09T07:26:51.976Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jeff Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub+Hexo搭建个人博客</title>
    <link href="http://yoursite.com/2018/02/09/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/02/09/Hexo+GitHub搭建个人博客/</id>
    <published>2018-02-08T18:32:00.000Z</published>
    <updated>2018-02-09T07:26:51.976Z</updated>
    
    <content type="html"><![CDATA[<p>其实网上已经有很多这样的教程了，我这里只是把自己一步步搭建的过程做一些记录而已。闲话不多说，马上开始。</p><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ul><li>Git，先 <a href="https://gitforwindows.org/" target="_blank" rel="noopener">点击这里</a> 下载Git安装，安装过程我就不作说明了</li><li>Node.js，<a href="https://nodejs.org/en/" target="_blank" rel="noopener">点击这里</a> 下载安装，安装也很简单方便，这里也不作说明，记得安装上npm就好</li><li>GitHub账号当然不能少，这里就默认你已经有账号了…没有的 <a href="https://github.com/" target="_blank" rel="noopener">点击这里</a> 去注册吧</li></ul><h3 id="Hexo安装与搭建"><a href="#Hexo安装与搭建" class="headerlink" title="Hexo安装与搭建"></a>Hexo安装与搭建</h3><p>首先，新建一个文件夹，你的博客就要放在这里，我这里是<code>E:\hexo</code>，然后，在这个文件夹里右键<code>Git Bash Here</code>，因为要使用到这个，所以就不用cmd命令行直接用这个了。<br>执行以下命令安装Hexo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>再执行以下命令，生成建立网站所需要的所有文件并安装依赖包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>然后，以下命令生成静态页面并开启本地服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></p><p>现在，浏览器输入<code>http://localhost:4000</code>就能查看你的博客了，当然，只是本地，接下来，就是放到GitHub上让别人能访问了。</p><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>首先<code>New Repository</code>，名称是<code>username.github.io</code>，<code>username</code>要与账号对应，比如我的就是<code>JianFengY.github.io</code>，所以，我的GitHub账号本来应该全部小写字母的，这样会比较协调…</p><h4 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h4><p>执行以下命令，不出意外应该是一直回车就好。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot;</span><br></pre></td></tr></table></figure></p><p>然后，在<code>C:\Users\ASUS\.ssh</code>目录会有两个文件<strong>id_rsa</strong>和<strong>id_rsa.pub</strong>,打开<strong>id_rsa.pub</strong>，复制里面的所有内容到 <a href="https://github.com/settings/keys" target="_blank" rel="noopener">SSH keys这里</a> 的Key，Title随便填，然后<code>Add SSH key</code>就可以了</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>安装hexo-deployer-git部署发布工具:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>然后就可以使用以下命令发布你的博客了，第一次发布会让你输入Github 的邮箱和密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></p><p>这里贴一下Hexo常用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo init # 初始化目录</span><br><span class="line">hexo server 或 hexo s # 本地服务器预览</span><br><span class="line">hexo new &quot;postName&quot; 或 hexo n &quot;postName&quot; # 新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; 或 hexo n &quot;pageName&quot; # 新建页面</span><br><span class="line">hexo generate 或 hexo g # 生成网页在 public 目录有整个网站的文件</span><br><span class="line">hexo deploy 或 hexo d # 部署.deploy目录</span><br><span class="line">hexo clean # 清除缓存</span><br></pre></td></tr></table></figure></p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>现在，浏览器输入<code>https://username.github.io/</code>我的就是<code>https://jianfengy.github.io/</code>就能查看你的博客了。</p>]]></content>
    
    <summary type="html">
    
      使用Hexo和GitHub搭建个人博客的过程
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu配置JDK、MySQL和Tomcat遇到的一些坑</title>
    <link href="http://yoursite.com/2018/02/09/Ubuntu%E9%85%8D%E7%BD%AEJDK%E3%80%81MySQL%E5%92%8CTomcat%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2018/02/09/Ubuntu配置JDK、MySQL和Tomcat遇到的坑/</id>
    <published>2018-02-08T18:08:00.000Z</published>
    <updated>2018-02-09T07:27:05.724Z</updated>
    
    <content type="html"><![CDATA[<p>之前买了阿里云的Ubuntu服务器，安装JDK、MySQL和Tomcat的时候遇到了一些问题，折腾了挺长时间，这里是一些记录。</p><h3 id="安装配置JDK"><a href="#安装配置JDK" class="headerlink" title="安装配置JDK"></a>安装配置JDK</h3><p>windows上下载的<code>jdk-8u161-linux-i586.tar.gz</code>用xshell执行<code>rz</code>命令上传到阿里云的ubuntu，然后执行<code>mkdir /usr/java</code>建一个文件夹，再执行<code>tar zxvf jdk-8u161-linux-i586.tar.gz -C /usr/java</code>解压到java目录下，<br>之后执行<code>vim ~/.bashrc</code>在文件尾添加以下内容设置环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_151</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:&#123;JAVA_HOME&#125;/lib:&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=&#123;JAVA_HOME&#125;/bin:PATH</span><br></pre></td></tr></table></figure></p><p>这里遇到了报错<code>-bash: java/ jdk1.8.0_131/bin/java: cannot execute binary file</code>，是因为我下载的JDK是64位的，而ubuntu是32位的…使用<code>getconf LONG_BIT</code>命令可以查看linux位数。</p><h3 id="安装配置Mysql"><a href="#安装配置Mysql" class="headerlink" title="安装配置Mysql"></a>安装配置Mysql</h3><p>安装时有遇到<code>Err http://mirrors.aliyun.com/ubuntu 404 Not Found</code>，执行<code>sudo apt-get update</code>就可以了。</p><p>网上学到的一个技巧：如果忘记了MySQL账户的密码，文件<code>/etc/mysql/debian.cnf</code>里有个MySQL用户<code>debian-sys-maint</code>。可以<code>mysql -u debian-sys-maint -p</code>使用文件提供的密码登录MySQL修改root的密码。</p><p>修改MySQL密码时因为设置的密码过于简单会报错<code>Your password does not satisfy the current policy requirements</code>，处理如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update mysql.user set authentication_string=password(&apos;123456&apos;) where user=&apos;root&apos; and Host =&apos;localhost&apos;;</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password_policy=0;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; set global validate_password_length=4;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update mysql.user set authentication_string=password(&apos;123456&apos;) where user=&apos;root&apos; and Host =&apos;localhost&apos;;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 1</span><br></pre></td></tr></table></figure></p><h3 id="安装配置tomcat"><a href="#安装配置tomcat" class="headerlink" title="安装配置tomcat"></a>安装配置tomcat</h3><p>安装运行之后不能使用外网访问，执行<code>ufw allow 8080</code>允许外网可以访问8080端口<br>然后配置阿里云安全组，找到自己的实例，点击<strong>更多</strong>-<strong>安全组配置</strong>-<strong>配置规则</strong>-<strong>添加安全组规则</strong>配置<strong>端口范围</strong><code>8080/8080</code>，<strong>授权对象</strong><code>0.0.0.0/0</code>之后就可以了。</p>]]></content>
    
    <summary type="html">
    
      本篇是我在配置阿里云Ubuntu的时候遇到的一些问题和解决过程
    
    </summary>
    
      <category term="Ubuntu" scheme="http://yoursite.com/categories/Ubuntu/"/>
    
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
      <category term="JDK" scheme="http://yoursite.com/tags/JDK/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>MySql学习笔记</title>
    <link href="http://yoursite.com/2018/02/07/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/02/07/MySql学习笔记/</id>
    <published>2018-02-07T13:04:00.000Z</published>
    <updated>2018-02-09T07:26:59.067Z</updated>
    
    <content type="html"><![CDATA[<p>这是我之前在慕课网学习 <a href="Mysqlhttps://www.imooc.com/learn/122" target="_blank" rel="noopener">与MySQL的零距离接触</a> 时的笔记，整理了一下发上来。</p><h3 id="修改MySQL提示符"><a href="#修改MySQL提示符" class="headerlink" title="修改MySQL提示符"></a>修改MySQL提示符</h3><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">\p</td><td style="text-align:center">完整的日期</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">当前数据库</td></tr><tr><td style="text-align:center">\h</td><td style="text-align:center">服务器名称</td></tr><tr><td style="text-align:center">\u</td><td style="text-align:center">当前用户</td></tr></tbody></table><p>各个参数可以结合使用。如<code>prompt \u@\h \d&gt;</code></p><ul><li><p>连接客户端时指定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 --prompt \h</span><br></pre></td></tr></table></figure></li><li><p>连接上客户端后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PROMPT &quot;提示符&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h3><ul><li>显示当前服务器版本<code>SELECT VERSION();</code></li><li>显示当前日期时间<code>SELECT NOW();</code></li><li>显示当前用户<code>SELECT USER();</code></li><li>可用<code>SHOW WARNINGS;</code>查看警告信息</li></ul><h3 id="MySQL语句规范"><a href="#MySQL语句规范" class="headerlink" title="MySQL语句规范"></a>MySQL语句规范</h3><ul><li>关键字与函数名称全部大写</li><li>数据库名称、表名称、字段名称全部小写</li><li>SQL语句必须以分号结尾</li></ul><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><blockquote><p><strong>“{}”表示必选项， “|”表示或， “[]”表示可选项</strong></p></blockquote><ul><li>创建数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE &#123;DATABASE | SCHEMA&#125; [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset_name;</span><br></pre></td></tr></table></figure></li></ul><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS db_name CHARACTER SET utf8;</span><br></pre></td></tr></table></figure></p><ul><li><p>查看当前服务器下数据表列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW &#123;DATABASES | SCHEMAS&#125; [LIKE &apos;pattern&apos; | WHERE expr];</span><br></pre></td></tr></table></figure></li><li><p>修改数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER &#123;DATABASE | SCHEMA&#125; [db_name] [DEFAULT] CHARACTER SET [=] charset_name;</span><br></pre></td></tr></table></figure></li></ul><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE db_name CHARACTER SET = gbk;</span><br></pre></td></tr></table></figure></p><ul><li>删除数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP &#123;DATABASE | SCHEMA&#125; [IF EXISTS] db_name;</span><br></pre></td></tr></table></figure></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>整型</li></ul><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">字节 </th></tr></thead><tbody><tr><td style="text-align:center">TINYINT</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">SMALLINT</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">INT</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">BIGINT</td><td style="text-align:center">8</td></tr></tbody></table><ul><li>浮点型<ul><li>FLOAT[(M,D)]</li><li>DOUBLE[(M,D)]</li></ul></li></ul><p><em>M是数字总位数，D是小数点后面的位数。</em></p><ul><li>日期时间型</li></ul><table><thead><tr><th style="text-align:center">列类型</th><th style="text-align:center">存储需求</th></tr></thead><tbody><tr><td style="text-align:center">YEAR</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">DATE</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:center">4</td></tr></tbody></table><ul><li>字符型</li></ul><table><thead><tr><th style="text-align:center">列类型</th><th style="text-align:center">存储需求</th></tr></thead><tbody><tr><td style="text-align:center">CHAR(M)</td><td style="text-align:center">M个字节，0&lt;=M&lt;=255</td></tr><tr><td style="text-align:center">VARCHAR(M)</td><td style="text-align:center">L+1个字节，其中L&lt;=M且0&lt;=M&lt;=65535</td></tr><tr><td style="text-align:center">TINYTEXT</td><td style="text-align:center">L+1个字节，其中L&lt;2^8</td></tr><tr><td style="text-align:center">TEXT</td><td style="text-align:center">L+2个字节，其中L&lt;2^16</td></tr><tr><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">L+3个字节，其中L&lt;2^24</td></tr><tr><td style="text-align:center">LONGTEXT</td><td style="text-align:center">L+4个字节，其中L&lt;2^32</td></tr><tr><td style="text-align:center">ENUM(‘value1’,’value2’,…)</td><td style="text-align:center">1或2个字节，取决于枚举值的个数(最多65536个值)</td></tr><tr><td style="text-align:center">SET(‘value1’,’value2’,…)</td><td style="text-align:center">1、2、3、4或8个字节，取决于set成员数目(最多64个成员)</td></tr></tbody></table><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] table_name (</span><br><span class="line">column_name data_type,</span><br><span class="line">...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">username VARCHAR(20),</span><br><span class="line">age TINYINT UNSIGNED,</span><br><span class="line">salary FLOAT(8,2) UNSIGNED</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><code>UNSIGNED</code>表示无符号位，即始终为正数。使用<code>SHOW CREATE TABLE table_name;</code>可以查看建表语句</p><h4 id="查看数据表"><a href="#查看数据表" class="headerlink" title="查看数据表"></a>查看数据表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES [FROM db_name] [LIKE &apos;pattern&apos; | WHERE expr];</span><br></pre></td></tr></table></figure><h4 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW COLUMNS FROM table_name;</span><br></pre></td></tr></table></figure><p>或：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC table_name;</span><br></pre></td></tr></table></figure></p><h4 id="插入记录"><a href="#插入记录" class="headerlink" title="插入记录"></a>插入记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT [INTO] table_name[(col_name,...)] VALUES(val,...);</span><br></pre></td></tr></table></figure><h4 id="查找记录"><a href="#查找记录" class="headerlink" title="查找记录"></a>查找记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT expr,... FROM table_name;</span><br></pre></td></tr></table></figure><h3 id="空值与非空"><a href="#空值与非空" class="headerlink" title="空值与非空"></a>空值与非空</h3><ul><li><code>NULL</code>，字段值可以为空(可以不写，默认可以为空)</li><li><code>NOT NULL</code>，字段值禁止为空</li></ul><h3 id="自动编号"><a href="#自动编号" class="headerlink" title="自动编号"></a>自动编号</h3><p><code>AUTO_INCREMENT</code> ,必须与主键组合使用，默认情况下，起始值为1，每次增量为1，不需要赋值</p><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p><code>PRIMARY KEY</code> ,每张表只能存在一个主键,用于保证记录的唯一性(不能有重复值)，主键自动为<code>NOT NULL</code></p><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p><code>UNIQUE KEY</code> ,可以保证记录唯一性，唯一约束的字段可以为空(<code>NULL</code>)，每张表可以存在多个唯一约束</p><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><p><code>DEFAULT</code> ,默认值，插入记录时，如果没有明确为字段复制，则自动赋予默认值</p><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>作用：保证数据的一致性、完整性；实现一对一或一对多关系</p><p>要求：</p><ul><li>父表（子表所参照的表）和子表（具有外键列的表）必须使用相同的存储引擎（InnoDB），且禁止使用临时表</li><li>外键列（有<code>FOREIGN KEY</code>关键字的列）和参照列必须具有相似的数据类型。其中数字的长度或是否有符号位必须相同；而字符的长度可以不同。否则会报错<code>(errorno：150)</code></li><li>外键列和参照列必须创建索引。如果外键列不存在索引的话，MySQL会自动创建索引（主键都会自动创建索引）.以网格形式查看索引：<code>SHOW INDEXES FROM db_name\G;</code></li></ul><p>编辑数据表默认存储引擎在安装MySQL的磁盘的<figure class="highlight plain"><figcaption><span>Server 5.7\my.ini```文件里，修改为```default-storage-engine</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">例：</span><br></pre></td></tr></table></figure></p><p>CREATE TABLE provinces(<br>id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,<br>pname VARCHAR(20) NOT NULL<br>);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">CREATE TABLE users(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(20) NOT NULL,</span><br><span class="line">pid SMALLINT UNSIGNED,</span><br><span class="line">FOREIGN KEY (pid) REFERENCES provinces (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="外键约束的参照操作"><a href="#外键约束的参照操作" class="headerlink" title="外键约束的参照操作"></a>外键约束的参照操作</h3><ul><li><code>CASCADE</code>：从父表删除或更新且自动删除或更新子表中匹配的行</li><li><code>SET NULL</code>：从父表删除或更新行，并设置子表中的外键列为<code>NULL</code>。如果适用此项，必须保证兹表列没有制定<code>NOT NULL</code></li><li><code>RESTRICT</code>：拒绝对父表的删除或更新操作</li><li><code>NO ACTION</code>：标准SQL的关键字，在MySQL中与<code>RESTRICT</code>相同</li></ul><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users1(</span><br><span class="line">id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">username VARCHAR(10) NOT NULL,</span><br><span class="line">pid SMALLINT UNSIGNED,</span><br><span class="line">FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>表示级联删除，此时删除provinces表中的记录，user1中相关的记录也会被删除，级联更新<code>ON UPDATE CASCADE</code>同理</p><h3 id="表级约束与列级约束"><a href="#表级约束与列级约束" class="headerlink" title="表级约束与列级约束"></a>表级约束与列级约束</h3><ul><li>对一个数据列建立的约束，称为列级约束。既可以在列定义时声明，也可以在列定义后声明（<code>NOT NULL</code>和<code>DEFAULT</code>约束只有列级约束，其他几种约束则可以有表级也可以有列级约束）</li><li>对多个数据列建立的约束，称为表级约束。只能在列定义后声明</li></ul><h3 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h3><h4 id="添加单列"><a href="#添加单列" class="headerlink" title="添加单列"></a>添加单列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [COLUMN] column_name column_definition [FIRST | AFTER column_name;</span><br></pre></td></tr></table></figure><p>其中，<code>FIRST</code>指把新列放在最前面，<code>AFTER</code>指把新列放在指定列，不加此参数默认添加到所有列最后面</p><h4 id="添加多列"><a href="#添加多列" class="headerlink" title="添加多列"></a>添加多列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [COLUMN] (column_name column_definition, ...);</span><br></pre></td></tr></table></figure><p>添加多列时，要加小括号，且不能制定添加的位置</p><h4 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP [COLUMN] column_name;</span><br></pre></td></tr></table></figure><p>可以同时操作几个语句，用逗号隔开,如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP [COLUMN] column_name,DROP [COLUMN] column_name,ADDADD [COLUMN] column_name column_definition;</span><br></pre></td></tr></table></figure></p><h4 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [CONSTRAINT [symbol]] PRIMARY KEY [index_type] (index_col_name, ...);</span><br></pre></td></tr></table></figure><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD CONSTRAINT PK_users2_id PRIMARY KEY (id);</span><br></pre></td></tr></table></figure></p><h4 id="删除主键约束"><a href="#删除主键约束" class="headerlink" title="删除主键约束"></a>删除主键约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure><h4 id="添加唯一约束"><a href="#添加唯一约束" class="headerlink" title="添加唯一约束"></a>添加唯一约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [CONSTRAINT [symbol]] UNIQUE [INDEX | KEY] [index_name] [index_type] (index_col_name, ...);</span><br></pre></td></tr></table></figure><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD UNIQUE (username);</span><br></pre></td></tr></table></figure></p><h4 id="删除唯一约束"><a href="#删除唯一约束" class="headerlink" title="删除唯一约束"></a>删除唯一约束</h4><p>要删除唯一约束需要先知道约束的名字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW INDEXES FROM table_name\G;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP &#123;INDEX | KEY&#125; index_name;</span><br></pre></td></tr></table></figure><h4 id="添加外键约束"><a href="#添加外键约束" class="headerlink" title="添加外键约束"></a>添加外键约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name, ...) reference_difinition;</span><br></pre></td></tr></table></figure><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ADD FOREIGN KEY (pid) REFERENCES provinces (id);</span><br></pre></td></tr></table></figure></p><h4 id="删除外键约束"><a href="#删除外键约束" class="headerlink" title="删除外键约束"></a>删除外键约束</h4><p>删除外键约束也要先知道约束的名字：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE table_name;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name DROP FOREIGN KEY fk_symbol;</span><br></pre></td></tr></table></figure><h4 id="添加-删除默认约束"><a href="#添加-删除默认约束" class="headerlink" title="添加/删除默认约束"></a>添加/删除默认约束</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ALTER [COLUMN] col_name &#123;SET DEFAULT literal | DROP DEFAULT&#125;;</span><br></pre></td></tr></table></figure><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 ALTER age SET DEFAULT 15;</span><br><span class="line">ALTER TABLE users2 ALTER age DROP DEFAULT;</span><br></pre></td></tr></table></figure></p><h4 id="修改列定义"><a href="#修改列定义" class="headerlink" title="修改列定义"></a>修改列定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name MODIFY [COLUMN] col_name column_difinition [FIRST | AFTER col_name];</span><br></pre></td></tr></table></figure><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST;</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong> 由于存储范围不同，数据类型由大类型改为小类型时可能会导致数据丢失</p><h4 id="修改列名称"><a href="#修改列名称" class="headerlink" title="修改列名称"></a>修改列名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name CHANGE [COLUMN] old_col_name new_col_name column_difinition [FIRST | AFTER col_name];</span><br></pre></td></tr></table></figure><p>使用<code>CHANGE</code>语句既可以修改列名称也可以修改列定义</p><h4 id="修改数据表名"><a href="#修改数据表名" class="headerlink" title="修改数据表名"></a>修改数据表名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name RENAME [TO | AS] new_table_name;</span><br></pre></td></tr></table></figure><p>或：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE table_name TO new_table_name [, table_name2 TO new_table_name2] ... ;</span><br></pre></td></tr></table></figure></p><p><code>RENAME TABLE</code>这个语句可以修改多个数据表的名字</p><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE users2 RENAME users3;</span><br><span class="line">RENAME TABLE users3 TO users2,users1 TO users4;</span><br></pre></td></tr></table></figure></p><p>尽量少使用修改数据列或数据表名的命令，因为在创建了索引或使用了视图或存储过程后，表名和列名被引用的情况下，更名可能会导致视图等无法正常工作</p><h3 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h3><h4 id="插入记录-1"><a href="#插入记录-1" class="headerlink" title="插入记录"></a>插入记录</h4><p>第一种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT [INTO] table_name [(col_name, ...)] &#123;VALUES | VALUE&#125; (&#123;expr | DEFAULE&#125;,...),(...),...;</span><br></pre></td></tr></table></figure></p><p>插入的值可以写数学表达式也可以写一些函数如<code>md5(&#39;123&#39;)</code>，也可以一次插入多条记录<br>插入时把<code>AUTO_INCREMENT</code>的字段赋值为<code>NULL</code>或<code>DEFAULT</code>都会自动递增</p><p>第二种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT [INTO] table_name SET col_name=&#123;expr | DEFAULT&#125;,...;</span><br></pre></td></tr></table></figure></p><p>与第一种方式的区别在于，此方法可以使用<code>子查询(SubQuery)</code>，而且一次只能插入一条记录</p><p>第三种方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT [INTO] table_name [(col_name,...)] SELECT ...;</span><br></pre></td></tr></table></figure><p>此方法可以将<code>SELECT</code>查询结果插入到指定数据表，见下文子查询</p><h4 id="更新记录（单表更新）"><a href="#更新记录（单表更新）" class="headerlink" title="更新记录（单表更新）"></a>更新记录（单表更新）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE [LOW_PRIORITY] [IGNORE] table_reference SET col_name1=&#123;expr1 | DEFAULT&#125; [, col_name2=&#123;expr2 | DEFAULT&#125;] ... [WHERE where_condition];</span><br></pre></td></tr></table></figure><p>可以一次更新多条记录，不加<code>WHERE</code>会更新所有记录</p><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET age = age + 10 WHERE id % 2 = 0;</span><br></pre></td></tr></table></figure></p><h4 id="删除记录（单表删除）"><a href="#删除记录（单表删除）" class="headerlink" title="删除记录（单表删除）"></a>删除记录（单表删除）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name [WHERE where_condition];</span><br></pre></td></tr></table></figure><h4 id="查询记录"><a href="#查询记录" class="headerlink" title="查询记录"></a>查询记录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT select_expr [, select_expr ...]</span><br><span class="line">[</span><br><span class="line">    FROM table_references</span><br><span class="line">    [WHERE where_condition]</span><br><span class="line">    [GROUP BY &#123;col_name | position&#125; [ASC | DESC],...]</span><br><span class="line">    [HAVING where_condition]</span><br><span class="line">    [ORDER BY &#123;col_name | expr |position&#125; [ASC | DESC],...]</span><br><span class="line">    [LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h5 id="查询表达式select-expr："><a href="#查询表达式select-expr：" class="headerlink" title="查询表达式select_expr："></a>查询表达式<code>select_expr</code>：</h5><ul><li>每一个表达式表示想要的一列，必须有至少一个</li><li>多个列之间以英文逗号分隔</li><li>星号<code>(*)</code>表示所有列。<code>table_name.*</code>可以表示命名表的所有列</li><li>查询表达式可以使用<code>[AS] alias_name</code>为其赋予别名</li><li>别名可用于<code>GROUP BY, ORDER BY</code>或<code>HAVING</code>子句</li></ul><h5 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h5><p>对记录进行过滤，如果没有指定<code>WHERE</code>子句，则显示所有记录。在<code>WHERE</code>表达式中，可以使用MySQL支持的函数或运算符</p><h5 id="查询结果分组"><a href="#查询结果分组" class="headerlink" title="查询结果分组"></a>查询结果分组</h5><p><code>[GROUP BY {col_name | position} [ASC | DESC],...]</code>，<code>ASC</code>为升序<code>DESC</code>为降序，默认是升序</p><h5 id="分组条件"><a href="#分组条件" class="headerlink" title="分组条件"></a>分组条件</h5><p><code>[HAVING where_condition]</code>,条件中若使用字段，要保证字段出现在<code>select_expr</code>中，或者使用聚合函数，如<code>count()</code>等</p><h5 id="对查询结果进行排序"><a href="#对查询结果进行排序" class="headerlink" title="对查询结果进行排序"></a>对查询结果进行排序</h5><p><code>[ORDER BY {col_name | expr |position} [ASC | DESC],...]</code>，<code>position</code>指字段在<code>select_expr</code>中出现的位置，推荐尽量直接指定字段名</p><h5 id="限制查询结果返回的数量"><a href="#限制查询结果返回的数量" class="headerlink" title="限制查询结果返回的数量"></a>限制查询结果返回的数量</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;]</span><br></pre></td></tr></table></figure><p>例：<br><code>SELECT * FROM users LIMIT 3,2;</code>表示从第四条开始（编号从0开始，且顺序是查询结果的顺序，受<code>ORDER BY</code>等影响），返回共两条数据</p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p><code>子查询(SubQuery)</code> 是指出现在其他SQL语句内的<code>SELECT</code>子句<br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM t1 WHERE col1 = (SELECT col2 FROM t2);</span><br></pre></td></tr></table></figure></p><p>其中 <code>SELECT * FROM t1</code> 称为 <code>Outer Query[外查询](或者Outer Statement)</code> ,  <code>SELECT col2 FROM t2</code> 称为 <code>SubQuery[子查询]</code>。</p><ul><li>子查询是嵌套在外查询内部，也有可能在子查询内部再嵌套子查询。而且子查询必须出现在<strong>圆括号</strong>之间</li><li>子查询可以包含多个关键字或条件，如<code>DISTINCT, GROUP BY, ORDER BY, LIMIT, 函数等</code></li><li>子查询的外层查询可以是<code>SELECT, INSERT, UPDATE, SET或DO</code></li><li>子查询的返回值可以是标量、一行、一列或子查询<h4 id="使用比较运算符的子查询"><a href="#使用比较运算符的子查询" class="headerlink" title="使用比较运算符的子查询"></a>使用比较运算符的子查询</h4>比较运算符：<code>=, &gt;, &lt;, &gt;=, &lt;=, &lt;&gt;, !=, &lt;=&gt;</code></li></ul><p>语法结构：<code>operand comparison_operator [ANY | SOME | ALL] subquery</code></p><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price &gt; (SELECT ROUND(AVG(goods_price),2) AS avg_price FROM tdb_goods) ORDER BY goods_price DESC;</span><br></pre></td></tr></table></figure></p><p><code>AVG(), MAX(), MIN(), COUNT(), SUM()</code>等为聚合函数，聚合函数只有一个返回值<br>使用比较运算符时，如果子查询返回值多于一行记录可能会报错，这时需要用<code>ANY, SOME或ALL</code>修饰：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">ANY</th><th style="text-align:center">SOME</th><th style="text-align:center">ALL</th></tr></thead><tbody><tr><td style="text-align:center">&gt;, &gt;=</td><td style="text-align:center">最小值</td><td style="text-align:center">最小值</td><td style="text-align:center">最大值</td></tr><tr><td style="text-align:center">&lt;, &lt;=</td><td style="text-align:center">最大值</td><td style="text-align:center">最大值</td><td style="text-align:center">最小值</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">任意值</td><td style="text-align:center">任意值</td></tr><tr><td style="text-align:center">&lt;&gt;, !=</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">任意值</td></tr></tbody></table><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price = ANY(SELECT goods_price FROM tdb_goods WHERE goods_cate = &apos;超级本&apos;) ORDER BY goods_price DESC;</span><br></pre></td></tr></table></figure></p><h4 id="使用-NOT-IN-的子查询"><a href="#使用-NOT-IN-的子查询" class="headerlink" title="使用[NOT] IN 的子查询"></a>使用<code>[NOT] IN</code> 的子查询</h4><p>语法结构：<code>operand comparison_operator [NOT] IN (subquery)</code></p><p><strong>注意：</strong> <code>=ANY</code>和<code>=SOME</code>运算符与<code>IN</code>等效；<code>!=ALL或&lt;&gt;ALL</code>运算符与<code>NOT IN</code>等效</p><h4 id="使用-NOT-EXISTS的子查询"><a href="#使用-NOT-EXISTS的子查询" class="headerlink" title="使用[NOT] EXISTS的子查询"></a>使用<code>[NOT] EXISTS</code>的子查询</h4><p>如果子查询返回任何行，<code>EXISTS</code>将返回<code>TRUE</code>，否则返回<code>FALSE</code></p><h4 id="使用INSERT-SELECT插入记录"><a href="#使用INSERT-SELECT插入记录" class="headerlink" title="使用INSERT...SELECT插入记录"></a>使用<code>INSERT...SELECT</code>插入记录</h4><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT tdb_goods_cates (cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;</span><br></pre></td></tr></table></figure></p><h3 id="多表更新"><a href="#多表更新" class="headerlink" title="多表更新"></a>多表更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_references SET col_name1=&#123;expr1 |DEFAULT&#125; [, col_name2=&#123;expr2 | DEFAULT&#125;]... [WHERE where_condition];</span><br></pre></td></tr></table></figure><p>多表更新时可能会出现字段名混淆，这时候一般会使用<code>AS</code>给表起别名，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE tdb_goods AS  g  INNER JOIN tdb_goods_brands AS b ON g.brand_name = b.brand_name SET g.brand_name = b.brand_id;</span><br></pre></td></tr></table></figure><h3 id="创建表同时插入记录CREATE-SELECT"><a href="#创建表同时插入记录CREATE-SELECT" class="headerlink" title="创建表同时插入记录CREATE...SELECT"></a>创建表同时插入记录<code>CREATE...SELECT</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [IF NOT EXISTS] table_name [&#123;create_definition,...)] select_statement;</span><br></pre></td></tr></table></figure><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tdb_goods_brands (</span><br><span class="line">brand_id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">brand_name VARCHAR(40) NOT NULL</span><br><span class="line">) SELECT brand_name FROM tdb_goods GROUP BY brand_name;</span><br></pre></td></tr></table></figure></p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>MySQL在<code>SELECT</code>语句、多表更新、多表删除语句中支持<code>JOIN</code>操作</p><p>连接类型：</p><ul><li><code>INNER JOIN</code>内连接。MySQL中，<code>JOIN, CROSS JOIN和INNER JOIN</code>是等价的</li><li><code>LEFT [OUTER] JOIN</code>左外连接</li><li><code>RIGHT [OUTER] JOIN</code>右外连接</li></ul><p>连接条件<code>ON</code>或<code>WHERE</code>：</p><ul><li>通常使用<code>ON</code>关键字来设定连接条件</li><li>使用<code>WHERE</code>关键字进行结果集记录的过滤</li></ul><p>语法结构：<code>table_reference {[INNER | CROSS] JOIN | {LEFT | RIGHT} [OUTER] JOIN} table_reference ON conditional_expr</code></p><h4 id="数据表参照table-reference"><a href="#数据表参照table-reference" class="headerlink" title="数据表参照table_reference"></a>数据表参照<code>table_reference</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">table_name [[AS] alias] | table_subquery [AS] alias</span><br></pre></td></tr></table></figure><ul><li>数据表可以使用<code>table_name AS alias_name</code>或<code>table_name alias_name</code>赋予别名</li><li><code>table_subquery</code>可以作为子查询使用在<code>FROM</code>子句中，这样的子查询必须为其赋予别名</li></ul><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>显示左表及右表符合连接条件的记录，即两表的公共部分</p><h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p>显示左表的全部记录及右表符合连接条件的记录</p><h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><p>显示右表的全部记录及左表符合连接条件的记录</p><h4 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h4><p>通过<strong>内连接</strong>实现查询所有商品的详细信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g</span><br><span class="line">INNER JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id</span><br><span class="line">INNER JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G;</span><br></pre></td></tr></table></figure></p><p>通过<strong>左外连接</strong>实现查询所有商品的详细信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g</span><br><span class="line">LEFT JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id</span><br><span class="line">LEFT JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G;</span><br></pre></td></tr></table></figure></p><p>通过<strong>右外连接</strong>实现查询所有商品的详细信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT goods_id,goods_name,cate_name,brand_name,goods_price FROM tdb_goods AS g</span><br><span class="line">RIGHT JOIN tdb_goods_cates AS c ON g.cate_id = c.cate_id</span><br><span class="line">RIGHT JOIN tdb_goods_brands AS b ON g.brand_id = b.brand_id\G;</span><br></pre></td></tr></table></figure></p><h4 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h4><ol><li>对于左外连接<code>A LEFT JOIN B join_condition</code>（右外连接类似）：<ul><li>数据表B的结果集依赖数据表A</li><li>数据表A的结果集根据左连接条件以来所有数据表（B表除外）</li><li>左外连接条件决定如何检索数据表B（在没有制定<code>WHERE</code>条件的情况下）</li><li>如果数据表A的某条记录符合<code>WHERE</code>条件，但是数据表B不存在符合连接条件的记录，将生成一个所有列为空的额外B行</li></ul></li><li>如果使用内连接查找的记录在连接数据表中不存在，并且在<code>WHERE</code>子句中尝试以下操作：<code>col_name IS NULL</code>时，如果<code>col_name</code>被定义为<code>NOT NULL</code>，MySQL将在找到符合连接条件的记录后停止搜索更多的行</li></ol><h3 id="无限分类的数据表设计"><a href="#无限分类的数据表设计" class="headerlink" title="无限分类的数据表设计"></a>无限分类的数据表设计</h3><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tdb_goods_types(</span><br><span class="line">type_id   SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">type_name VARCHAR(20) NOT NULL,</span><br><span class="line">parent_id SMALLINT UNSIGNED NOT NULL DEFAULT 0</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><code>parent_id</code> 就是该类的父类，来自 <code>type_id</code>，没有父类（即最大类）的 <code>type_id</code>为0</p><p>这种数据表的查询用到<strong>自身连接</strong>（同一个数据表对其自身进行连接）如：</p><ul><li><p>查找所有分类及其父类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT s.type_id,s.type_name,p.type_name FROM tdb_goods_types AS s LEFT JOIN tdb_goods_types AS  p ON s.parent_id = p.type_id;</span><br></pre></td></tr></table></figure></li><li><p>查找所有分类及其子类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT p.type_id,p.type_name,s.type_name FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS  s ON s.parent_id = p.type_id;</span><br></pre></td></tr></table></figure></li><li><p>查找所有分类及其子类的数目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT p.type_id,p.type_name,count(s.type_name) AS children_count FROM tdb_goods_types AS p LEFT JOIN tdb_goods_types AS s ON s.parent_id = p.type_id GROUP BY p.type_name ORDER BY p.type_id;</span><br></pre></td></tr></table></figure></li></ul><h3 id="多表删除"><a href="#多表删除" class="headerlink" title="多表删除"></a>多表删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE table_name[.*] [, table_name[.*]] ... FROM table_references [WHERE where_condition];</span><br></pre></td></tr></table></figure><p>例如删除重复记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE t1 FROM tdb_goods AS t1 LEFT JOIN (SELECT goods_id,goods_name FROM tdb_goods GROUP BY goods_name HAVING count(goods_name) &gt;= 2 ) AS t2  ON t1.goods_name = t2.goods_name  WHERE t1.goods_id &gt; t2.goods_id;</span><br></pre></td></tr></table></figure></p><h3 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h3><table><thead><tr><th style="text-align:center">函数名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">CONCAT()</td><td style="text-align:center">字符连接</td></tr><tr><td style="text-align:center">CONCAT_WS()</td><td style="text-align:center">使用指定的分隔符进行字符连接</td></tr><tr><td style="text-align:center">FORMAT()</td><td style="text-align:center">数字格式化,此函数返回值是字符型</td></tr><tr><td style="text-align:center">LOWER()</td><td style="text-align:center">转换成小写字母</td></tr><tr><td style="text-align:center">UPPER()</td><td style="text-align:center">转换成大写字母</td></tr><tr><td style="text-align:center">LEFT()</td><td style="text-align:center">获取左侧字符</td></tr><tr><td style="text-align:center">RIGHT()</td><td style="text-align:center">获取右侧字符</td></tr><tr><td style="text-align:center">LENGTH()</td><td style="text-align:center">获取字符串长度（包括空格）</td></tr><tr><td style="text-align:center">LTRIM()</td><td style="text-align:center">删除字符串的前导空格</td></tr><tr><td style="text-align:center">RTRIM()</td><td style="text-align:center">删除字符串的后续空格</td></tr><tr><td style="text-align:center">TRIM()</td><td style="text-align:center">删除前导和后续空格</td></tr><tr><td style="text-align:center">SUBSTRING()</td><td style="text-align:center">字符串截取</td></tr><tr><td style="text-align:center">[NOT] LIKE</td><td style="text-align:center">模式匹配</td></tr><tr><td style="text-align:center">REPLACE()</td><td style="text-align:center">字符串替换</td></tr></tbody></table><p><strong>注意：</strong>表示字符位置的数字是从1开始而不是从0开始的，起始位置的数值可以是负值，表示从后往前数<br>例：</p><p><code>SELECT CONCAT_WS(&#39;|&#39;,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;);</code>结果：<code>A|B|C</code></p><p><code>SELECT FORMAT(12560.75, 1);</code>结果：<code>12,560.8</code></p><p><code>SELECT LOWER(LEFT(&#39;MySQL&#39;, 2));</code>结果：<code>my</code>。表示把截取的前两位字符变为小写</p><p><code>SELECT TRIM(LEADING &#39;?&#39; FROM &#39;??My??SQL???&#39;);</code>结果：<code>My??SQL???</code>。这里的<code>LEADING</code>表示删除前导的指定字符，<code>TRAILING</code>表示删除后续，<code>BOTH</code>表示前导和后续都删除</p><p><code>SELECT REPLACE(&#39;??My??SQL???&#39;, &#39;?&#39;, &#39;&#39;);</code>结果：<code>MySQL</code></p><p><code>SELECT SUBSTRING(&#39;MySQL&#39;, 1, 2);</code>结果：<code>My</code>。这里表示从第一位截取，截取两位</p><p><code>SELECT &#39;MYSQL&#39; LIKE &#39;M%&#39;;</code>结果：<code>1</code>。<code>1</code>表示<code>TRUE</code>，<code>%</code>表示<strong>任意0个或多个</strong>字符，另外还有<code>_</code>下划线表示<strong>任意一个</strong>字符</p><p>假设数据表<code>test</code>有个<code>first_name</code>为<code>tom%</code>的数据，要查找出此记录，就要<code>SELECT * FROM test WHERE first_name LIKE &#39;%1%%&#39; ESCAPE &#39;1&#39;;</code>，表示1后面的<code>%</code>为普通字符串而非通配符</p><h3 id="数值运算符与函数"><a href="#数值运算符与函数" class="headerlink" title="数值运算符与函数"></a>数值运算符与函数</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">CEIL()</td><td style="text-align:center">进一取整（向上取整）</td></tr><tr><td style="text-align:center">DIV</td><td style="text-align:center">整除，如<code>3 DIV 4</code>为<code>0</code></td></tr><tr><td style="text-align:center">FLOOR()</td><td style="text-align:center">舍一取整（向下取整）</td></tr><tr><td style="text-align:center">MOD</td><td style="text-align:center">取余数（取模，与<code>%</code>相同）</td></tr><tr><td style="text-align:center">POWER()</td><td style="text-align:center">幂运算</td></tr><tr><td style="text-align:center">ROUND()</td><td style="text-align:center">四舍五入</td></tr><tr><td style="text-align:center">TRUNCATE()</td><td style="text-align:center">数字截取</td></tr></tbody></table><p>例：</p><p><code>SELECT POWER(2,3);</code> 结果：<code>8</code></p><p><code>SELECT TRUNCATE(125.59,1);</code>结果：<code>125.5</code>。保留小数点后一位，舍去后面的，与四舍五入不同</p><h3 id="比较运算符与函数"><a href="#比较运算符与函数" class="headerlink" title="比较运算符与函数"></a>比较运算符与函数</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">[NOT] BETWEEN…AND…</td><td style="text-align:center">[不]在范围之内</td></tr><tr><td style="text-align:center">[NOT] IN()</td><td style="text-align:center">[不]在列出值范围内</td></tr><tr><td style="text-align:center">IS [NOT] NULL</td><td style="text-align:center">[不]为空</td></tr></tbody></table><p>例：</p><p><code>SELECT 35 BETWEEN 1 AND 35;</code>结果：<code>1</code></p><p><code>SELECT 13 NOT IN(5, 10, 15);</code>结果：<code>1</code></p><p><code>SELECT 0 IS NOT NULL;</code>结果：<code>1</code></p><h3 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">NOW()</td><td style="text-align:center">当前日期和时间</td></tr><tr><td style="text-align:center">CURDATE()</td><td style="text-align:center">当前日期</td></tr><tr><td style="text-align:center">CURTIME()</td><td style="text-align:center">当前时间</td></tr><tr><td style="text-align:center">DATE_ADD()</td><td style="text-align:center">日期变化</td></tr><tr><td style="text-align:center">DATEDIFF()</td><td style="text-align:center">日期差值</td></tr><tr><td style="text-align:center">DATE_FORMAT()</td><td style="text-align:center">日期格式化</td></tr></tbody></table><p>例 ：</p><p><code>SELECT DATE_ADD(&#39;2017-11-23&#39;, INTERVAL -365 DAY);</code>结果：<code>2016-11-23</code></p><p><code>SELECT DATE_ADD(&#39;2017-11-23&#39;, INTERVAL 3 WEEK);</code>结果：<code>2017-12-14</code></p><p><code>SELECT DATEDIFF(&#39;2017-11-23&#39;, &#39;2018-11-23&#39;);</code>结果：<code>-365</code></p><p><code>SELECT DATE_FORMAT(&#39;2017-11-23&#39;, &#39;%m/%d/%Y&#39;);</code>结果：<code>11/23/2017</code></p><h3 id="信息函数"><a href="#信息函数" class="headerlink" title="信息函数"></a>信息函数</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">CONNECTION_ID()</td><td style="text-align:center">连接ID</td></tr><tr><td style="text-align:center">DATABASE()</td><td style="text-align:center">当前数据库</td></tr><tr><td style="text-align:center">LAST_INSERT_ID()</td><td style="text-align:center">最后插入的记录的ID号</td></tr><tr><td style="text-align:center">USER()</td><td style="text-align:center">当前用户</td></tr><tr><td style="text-align:center">VERSION()</td><td style="text-align:center">版本信息</td></tr></tbody></table><p>对于<code>LAST_INSERT_ID()</code>函数，需要数据表里有一个<code>AUTO_INCREMENT</code>的<code>id</code>字段。另外，若是同时插入多条记录，如<code>INSERT test(name,age) VALUES(&#39;Tom&#39;,20),(&#39;Jack&#39;,22);</code>，这个函数只会返回第一个插入的也就是<code>Tom</code>的<code>id</code></p><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">AVG()</td><td style="text-align:center">平均值</td></tr><tr><td style="text-align:center">COUNT()</td><td style="text-align:center">计数</td></tr><tr><td style="text-align:center">MAX()</td><td style="text-align:center">最大值</td></tr><tr><td style="text-align:center">MIN()</td><td style="text-align:center">最小值</td></tr><tr><td style="text-align:center">SUM()</td><td style="text-align:center">求和</td></tr></tbody></table><p>聚合函数的典型特点：只有一个返回值</p><h3 id="信息函数-1"><a href="#信息函数-1" class="headerlink" title="信息函数"></a>信息函数</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">MD5()</td><td style="text-align:center">信息摘要算法</td></tr><tr><td style="text-align:center">PASSWORD()</td><td style="text-align:center">密码算法</td></tr></tbody></table><p>如果密码是为WEB页面准备的，建议使用<code>MD5()</code>,而<code>PASSWORD()</code>主要用于修改MySQL的用户密码</p><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><ul><li>用户自定义函数<code>(user-defined function, UDF)</code>是一种对MySQL扩展的途径，其用法与内置函数相同</li><li>两个必要条件：<strong>参数</strong>（可以有0个或多个）、<strong>返回值</strong>（只能有一个）</li><li>函数可以返回任意类型的值，同样可以接收这些类型的参数；参数与返回值之间没有必然的内在联系</li></ul><h4 id="创建自定义函数"><a href="#创建自定义函数" class="headerlink" title="创建自定义函数"></a>创建自定义函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION function_name RETURNS &#123;STRING | INTEGER | REAL | DECIMAL&#125; routine_body;</span><br></pre></td></tr></table></figure><p>删除自定义函数用<code>DROP FUNCTION [IF EXISTS] function_name;</code></p><p>关于函数体<code>routine_body</code>：</p><ul><li>函数体由合法的SQL语句构成</li><li>函数体可以是简单的<code>SELECT</code>或<code>INSERT</code>语句</li><li>函数体如果为复合结构则使用<code>BEGIN...END</code>语句</li><li>复合结构可以包含声明、循环、控制结构</li></ul><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION f1() RETURNS VARCHAR(30)</span><br><span class="line">RETURN DATE_FORMAT(NOW(),&apos;%Y年%m月%d日 %H点:%i分:%s秒&apos;);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION f2(num1 SMALLINT UNSIGNED, num2 SMALLINT UNSIGNED)</span><br><span class="line">RETURNS FLOAT(10,2) UNSIGNED</span><br><span class="line">RETURN (num1+num2)/2;</span><br></pre></td></tr></table></figure><p>有时候需要创建有复合结构函数体的自定义函数，由于分隔符<code>;</code>被认为是SQL语句的结束，所以要先执行<code>DELIMITER //</code>修改SQL语句的结束符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION adduser(username VARCHAR(20))</span><br><span class="line">RETURNS INT UNSIGNED</span><br><span class="line">BEGIN</span><br><span class="line">INSERT test(username) VALUES (username);</span><br><span class="line">RETURN LAST_INSERT_ID();</span><br><span class="line">END</span><br><span class="line">//</span><br></pre></td></tr></table></figure></p><p>之后就可以把分隔符修改回来和使用函数了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER ;</span><br><span class="line">SELECT adduser(&apos;Rose&apos;);</span><br></pre></td></tr></table></figure></p><h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><ul><li>存储过程是SQL语句和控制语句的预编译集合，以一个名称存储并作为一个单元处理</li><li>存储过程存储在数据库内，可以由应用程序调用执行，允许用户声明变量以及进行流程控制</li><li>存储过程可以接收输入和输出类型的参数且可以存在多个返回值</li><li>存储过程只在第一次进行语法分析和编译，以后都直接调用编译结果，省略了编译环节</li></ul><p><strong>优点：</strong></p><ul><li>增强SQL语句的功能和灵活性</li><li>实现较快的执行速度</li><li>减少网络流量</li></ul><h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE</span><br><span class="line">[DEFINER = &#123;user | CURRENT_USER&#125;]</span><br><span class="line">PROCEDURE sp_name ([proc_parameter[,...]])</span><br><span class="line">[characteristic ...]</span><br><span class="line">routine_body</span><br></pre></td></tr></table></figure><ul><li><code>DEFINER</code>是创建者，省略的话默认是当前登录到MySQL的用户</li><li><code>sp_name</code>是存储过程的名字</li><li><code>proc_parameter</code>是参数，可以有0到多个，写法：<code>[IN | OUT | INOUT]param_name type</code>。<strong>注意：</strong> 参数名<strong>不要</strong>和数据表字段名<strong>重名</strong><ul><li><code>IN</code>，表示该参数的值必须在调用存储过程时指定，该值不能被返回</li><li><code>OUT</code>，表示该参数的值可以被存储过程改变，并且可以被返回</li><li><code>INOUT</code>，表示该参数的值在调用时指定，并且可以被改变和返回</li></ul></li><li><p><code>characteristic</code>特性，与自定义函数相似：</p><ul><li><code>COMMENT</code>：注释</li><li><code>CONTAINS SQL</code>：包含SQL语句，但不包含读或写数据的语句</li><li><code>NO SQL</code>：不包含SQL语句</li><li><code>READS SQL DATA</code>：包含读数据的语句</li><li><code>MODIFIES SQL DATA</code>：包含写数据的语句</li><li><code>SQL SECURITY {DEFINER | INVOKER}</code>：指明谁有权限来执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMENT &apos;string&apos; | &#123;CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA&#125; | SQL SECURITY &#123;DEFINER | INVOKER&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>routine_body</code>过程体：</p><ul><li>过程体由合法的SQL语句构成</li><li>过程体可以是任意SQL语句（主要指对记录的增删改查及多表连接等而非对数据库数据表本身的修改）</li><li>过程体如果为复合结构则使用<code>BEGIN...END</code>语句</li><li>复合结构可以包含声明、循环、控制结构</li></ul></li></ul><h4 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CALL sp_name([parameter[,...]]);</span><br><span class="line">CALL sp_name[()];</span><br></pre></td></tr></table></figure><h4 id="修改存储过程"><a href="#修改存储过程" class="headerlink" title="修改存储过程"></a>修改存储过程</h4><p>和修改自定义函数相似，只能修改以下简单的选项，<strong>不能</strong>修改过程体，要修改过程体只能删除该存储过程然后重新创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER PROCEDURE sp_name [characteristic ...] COMMENT &apos;string&apos; | &#123;CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA&#125; | SQL SECURITY &#123;DEFINER | INVOKER&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><p>删除时不用带参数，只用存储过程名称<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP PROCEDURE [IF EXISTS] sp_name;</span><br></pre></td></tr></table></figure></p><h4 id="创建不带参数的存储过程"><a href="#创建不带参数的存储过程" class="headerlink" title="创建不带参数的存储过程"></a>创建不带参数的存储过程</h4><p>例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE PROCEDURE sp1() SELECT VERSION();</span><br></pre></td></tr></table></figure></p><p>调用：因为不带参数，所以<code>CALL sp1;</code>或<code>CALL sp1();</code>都可以</p><h4 id="创建带有IN类型参数的存储过程"><a href="#创建带有IN类型参数的存储过程" class="headerlink" title="创建带有IN类型参数的存储过程"></a>创建带有IN类型参数的存储过程</h4><p>和创建自定义函数一样要先使用<code>DELIMITER //</code>修改结束符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE removeUserById(IN p_id INT UNSIGNED)</span><br><span class="line">BEGIN</span><br><span class="line">DELETE FROM test WHERE id = p_id;</span><br><span class="line">END</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></p><h4 id="创建带有IN和OUT类型参数的存储过程"><a href="#创建带有IN和OUT类型参数的存储过程" class="headerlink" title="创建带有IN和OUT类型参数的存储过程"></a>创建带有IN和OUT类型参数的存储过程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE removeUserAndReturnUserCount(IN p_id INT UNSIGNED,OUT userCount INT UNSIGNED)</span><br><span class="line">BEGIN</span><br><span class="line">DELETE FROM test WHERE id = p_id;</span><br><span class="line">SELECT count(id) FROM test INTO userCount;</span><br><span class="line">END</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p>调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CALL removeUserAndReturnUserCount(37,@nums);</span><br><span class="line">SELECT @nums;</span><br></pre></td></tr></table></figure></p><p>其中，<code>@nums</code>是变量，在<code>BEGIN...END</code>间用<code>DECLEAR</code>声明的变量叫局部变量，作用域只在<code>BEGIN...END</code>之间。而且在<code>BEGIN...END</code>间<code>DECLEAR</code>语句必须位于<strong>第一行</strong>。而像上面<code>SELECT...INTO para_name</code>或<code>SET @para_name = ...</code>声明的变量叫用户变量，对当前用户使用的客户端有效</p><h4 id="创建带有多个OUT类型参数的存储过程"><a href="#创建带有多个OUT类型参数的存储过程" class="headerlink" title="创建带有多个OUT类型参数的存储过程"></a>创建带有多个OUT类型参数的存储过程</h4><p><code>ROW_COUNT()</code> 函数可以得到被影响（即插入、删除或更新）的记录数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE removeUserByAgeAndReturnInfos(IN p_age SMALLINT UNSIGNED, OUT deleteUsers SMALLINT UNSIGNED, OUT userCounts SMALLINT UNSIGNED)</span><br><span class="line">BEGIN</span><br><span class="line">DELETE FROM test WHERE age = p_age;</span><br><span class="line">SELECT ROW_COUNT() INTO deleteUsers;</span><br><span class="line">SELECT COUNT(id) FROM test INTO userCounts;</span><br><span class="line">END</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></p><p>调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CALL removeUserByAgeAndReturnInfos(20,@a,@b);</span><br><span class="line">SELECT @a,@b;</span><br></pre></td></tr></table></figure></p><h3 id="存储过程与自定义函数的区别"><a href="#存储过程与自定义函数的区别" class="headerlink" title="存储过程与自定义函数的区别"></a>存储过程与自定义函数的区别</h3><ul><li>存储过程实现的功能要复杂一些；而函数的针对性更强（针对表做操作一般使用存储过程）</li><li>存储过程可以返回多个值；函数只能有一个返回值</li><li>存储过程一般独立来执行；而函数可以作为其他SQL语句的组成部分来出现</li></ul><p><strong>二者注意事项：</strong></p><ul><li>创建存储过程或者自定义函数时需要通过<code>delimiter</code>语句修改定界符</li><li>如果函数体或过程体有多个语句，需要包含在<code>BEGIN...END</code>语句块中</li></ul><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>MySQL可以将数据以不同的技术存储在文件（内存）中，这种技术就称为存储引擎。每一种存储引擎使用不同的存储机制、索引技巧、锁定水平，最终提供广泛且不同的功能</p><p>分类：</p><ul><li>MyISAM</li><li>InnoDB</li><li>Memory</li><li>Archive</li><li>CSV（不支持索引）</li><li>BlackHole：黑洞引擎，写入的数据都会消失，一般用于做数据复制的中继</li></ul><h4 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h4><p>当多个连接对记录进行修改时要保证数据的一致性和完整性，就要使用并发控制。处理并发读或并发写时系统会使用锁系统：</p><ul><li><strong>共享锁</strong>（读锁）：在同一时间段内，多个用户可以读取同一个资源，读取过程中数据不会发生任何变化</li><li><strong>排它锁</strong>（写锁）：在任何时候只能有一个用户写入资源，当进行写锁时会阻塞其他的读锁或者写锁操作</li></ul><p>锁颗粒：</p><ul><li>表锁，是一种开销最小的锁策略</li><li>行锁，是一种开销最大的锁策略</li></ul><h4 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h4><p>事务用于保证数据库的完整性</p><p>事务的特性：</p><ul><li>原子性(Atomicity)</li><li>一致性(Consistency)</li><li>隔离性(Isolation)</li><li>持久性(Durability)</li></ul><h4 id="外键和索引"><a href="#外键和索引" class="headerlink" title="外键和索引"></a>外键和索引</h4><p>外键是保证数据一致性的策略；索引是对数据表中一列或多列的值进行排序的一种结构，包括：普通索引、唯一索引、全文索引、btree索引、hash索引……</p><h4 id="各种存储引擎的特点"><a href="#各种存储引擎的特点" class="headerlink" title="各种存储引擎的特点"></a>各种存储引擎的特点</h4><table><thead><tr><th style="text-align:center">特点</th><th style="text-align:center">MyISAM</th><th style="text-align:center">InnoDB</th><th style="text-align:center">Memory</th><th style="text-align:center">Archive</th></tr></thead><tbody><tr><td style="text-align:center">存储限制</td><td style="text-align:center">256TB</td><td style="text-align:center">64TB</td><td style="text-align:center">有</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">事务安全</td><td style="text-align:center">-</td><td style="text-align:center">支持</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">支持索引</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">锁颗粒</td><td style="text-align:center">表锁</td><td style="text-align:center">行锁</td><td style="text-align:center">表锁</td><td style="text-align:center">行锁</td></tr><tr><td style="text-align:center">数据压缩</td><td style="text-align:center">支持</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">支持外键</td><td style="text-align:center">-</td><td style="text-align:center">支持</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><p>使用得比较多的是MyISAM和InnoDB。MyISAM适用于事务的处理不多的情况；InnoDB适用于事务处理较多，需要有外键支持的情况</p><h4 id="修改存储引擎"><a href="#修改存储引擎" class="headerlink" title="修改存储引擎"></a>修改存储引擎</h4><ul><li>通过修改MySQL配置文件实现：<code>default-storage-engine= engine_name</code>，默认是InnoDB</li><li>通过创建数据表或修改数据表命令实现：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">)ENGINE = engine_name;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE table_name ENGINE [=] engine_name;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      本篇是我在慕课网学习Mysql时的笔记。
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
</feed>
